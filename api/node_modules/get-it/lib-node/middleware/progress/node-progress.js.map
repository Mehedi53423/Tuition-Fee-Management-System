{"version":3,"sources":["../../../src/middleware/progress/node-progress.js"],"names":["progressStream","require","normalizer","stage","prog","percent","percentage","total","length","loaded","transferred","lengthComputable","module","exports","onHeaders","response","evt","progress","time","normalize","contentLength","headers","Number","isNaN","setLength","on","context","channels","publish","pipe","onRequest"],"mappings":";;AAAA,MAAMA,cAAc,GAAGC,OAAO,CAAC,iBAAD,CAA9B;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,SAAOC,IAAI,KAAK;AACdD,IAAAA,KADc;AAEdE,IAAAA,OAAO,EAAED,IAAI,CAACE,UAFA;AAGdC,IAAAA,KAAK,EAAEH,IAAI,CAACI,MAHE;AAIdC,IAAAA,MAAM,EAAEL,IAAI,CAACM,WAJC;AAKdC,IAAAA,gBAAgB,EAAE,EAAEP,IAAI,CAACI,MAAL,KAAgB,CAAhB,IAAqBJ,IAAI,CAACE,UAAL,KAAoB,CAA3C;AALJ,GAAL,CAAX;AAOD;;AAEDM,MAAM,CAACC,OAAP,GAAiB,OAAO;AACtBC,EAAAA,SAAS,EAAE,CAACC,QAAD,EAAWC,GAAX,KAAmB;AAC5B,UAAMC,QAAQ,GAAGjB,cAAc,CAAC;AAACkB,MAAAA,IAAI,EAAE;AAAP,KAAD,CAA/B;AACA,UAAMC,SAAS,GAAGjB,UAAU,CAAC,UAAD,CAA5B,CAF4B,CAI5B;AACA;;AACA,UAAMkB,aAAa,GAAGL,QAAQ,CAACM,OAAT,CAAiB,gBAAjB,CAAtB;AACA,UAAMb,MAAM,GAAGY,aAAa,IAAIE,MAAM,CAACF,aAAD,CAAtC;;AACA,QAAI,CAACG,KAAK,CAACf,MAAD,CAAN,IAAkBA,MAAM,GAAG,CAA/B,EAAkC;AAChCS,MAAAA,QAAQ,CAACO,SAAT,CAAmBhB,MAAnB;AACD;;AAEDS,IAAAA,QAAQ,CAACQ,EAAT,CAAY,UAAZ,EAAwBrB,IAAI,IAAIY,GAAG,CAACU,OAAJ,CAAYC,QAAZ,CAAqBV,QAArB,CAA8BW,OAA9B,CAAsCT,SAAS,CAACf,IAAD,CAA/C,CAAhC;AACA,WAAOW,QAAQ,CAACc,IAAT,CAAcZ,QAAd,CAAP;AACD,GAfqB;AAiBtBa,EAAAA,SAAS,EAAEd,GAAG,IAAI;AAChB,QAAI,CAACA,GAAG,CAACC,QAAT,EAAmB;AACjB;AACD;;AAED,UAAME,SAAS,GAAGjB,UAAU,CAAC,QAAD,CAA5B;AACAc,IAAAA,GAAG,CAACC,QAAJ,CAAaQ,EAAb,CAAgB,UAAhB,EAA4BrB,IAAI,IAAIY,GAAG,CAACU,OAAJ,CAAYC,QAAZ,CAAqBV,QAArB,CAA8BW,OAA9B,CAAsCT,SAAS,CAACf,IAAD,CAA/C,CAApC;AACD;AAxBqB,CAAP,CAAjB","sourcesContent":["const progressStream = require('progress-stream')\n\nfunction normalizer(stage) {\n  return prog => ({\n    stage,\n    percent: prog.percentage,\n    total: prog.length,\n    loaded: prog.transferred,\n    lengthComputable: !(prog.length === 0 && prog.percentage === 0)\n  })\n}\n\nmodule.exports = () => ({\n  onHeaders: (response, evt) => {\n    const progress = progressStream({time: 16})\n    const normalize = normalizer('download')\n\n    // This is supposed to be handled automatically, but it has a bug,\n    // see https://github.com/freeall/progress-stream/pull/22\n    const contentLength = response.headers['content-length']\n    const length = contentLength && Number(contentLength)\n    if (!isNaN(length) && length > 0) {\n      progress.setLength(length)\n    }\n\n    progress.on('progress', prog => evt.context.channels.progress.publish(normalize(prog)))\n    return response.pipe(progress)\n  },\n\n  onRequest: evt => {\n    if (!evt.progress) {\n      return\n    }\n\n    const normalize = normalizer('upload')\n    evt.progress.on('progress', prog => evt.context.channels.progress.publish(normalize(prog)))\n  }\n})\n"],"file":"node-progress.js"}