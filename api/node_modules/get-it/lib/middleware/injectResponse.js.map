{"version":3,"sources":["../../src/middleware/injectResponse.js"],"names":["objectAssign","require","module","exports","opts","inject","Error","prevValue","event","response","options","context","body","url","method","headers","statusCode","statusMessage","interceptRequest"],"mappings":";;AAAA,IAAMA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA5B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,YAAe;AAAA,MAAdC,IAAc,uEAAP,EAAO;;AAC9B,MAAI,OAAOA,IAAI,CAACC,MAAZ,KAAuB,UAA3B,EAAuC;AACrC,UAAM,IAAIC,KAAJ,CAAU,0DAAV,CAAN;AACD;;AAED,WAASD,MAAT,CAAgBE,SAAhB,EAA2BC,KAA3B,EAAkC;AAChC,QAAMC,QAAQ,GAAGL,IAAI,CAACC,MAAL,CAAYG,KAAZ,EAAmBD,SAAnB,CAAjB;;AACA,QAAI,CAACE,QAAL,EAAe;AACb,aAAOF,SAAP;AACD,KAJ+B,CAMhC;;;AACA,QAAMG,OAAO,GAAGF,KAAK,CAACG,OAAN,CAAcD,OAA9B;AACA,WAAOV,YAAY,CACjB,EADiB,EAEjB;AACEY,MAAAA,IAAI,EAAE,EADR;AAEEC,MAAAA,GAAG,EAAEH,OAAO,CAACG,GAFf;AAGEC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAHlB;AAIEC,MAAAA,OAAO,EAAE,EAJX;AAKEC,MAAAA,UAAU,EAAE,GALd;AAMEC,MAAAA,aAAa,EAAE;AANjB,KAFiB,EAUjBR,QAViB,CAAnB;AAYD;;AAED,SAAO;AAACS,IAAAA,gBAAgB,EAAEb;AAAnB,GAAP;AACD,CA5BD","sourcesContent":["const objectAssign = require('object-assign')\n\nmodule.exports = (opts = {}) => {\n  if (typeof opts.inject !== 'function') {\n    throw new Error('`injectResponse` middleware requires a `inject` function')\n  }\n\n  function inject(prevValue, event) {\n    const response = opts.inject(event, prevValue)\n    if (!response) {\n      return prevValue\n    }\n\n    // Merge defaults so we don't have to provide the most basic of details unless we want to\n    const options = event.context.options\n    return objectAssign(\n      {},\n      {\n        body: '',\n        url: options.url,\n        method: options.method,\n        headers: {},\n        statusCode: 200,\n        statusMessage: 'OK'\n      },\n      response\n    )\n  }\n\n  return {interceptRequest: inject}\n}\n"],"file":"injectResponse.js"}