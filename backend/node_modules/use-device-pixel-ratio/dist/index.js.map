{"version":3,"file":"index.js","sources":["../index.ts"],"sourcesContent":["import {useState, useEffect} from 'react'\n\nexport interface DevicePixelRatioOptions {\n  /**\n   * Default DPR to use if browser does not support the `devicePixelRatio`\n   * property, or when rendering on server\n   *\n   * @defaultValue `1`\n   */\n  defaultDpr?: number\n\n  /**\n   * Whether or not to round the number down to the closest integer\n   *\n   * @defaultValue `true`\n   */\n  round?: boolean\n\n  /**\n   * Maximum DPR to return (set to `2` to only generate 1 and 2)\n   *\n   * @defaultValue `3`\n   */\n  maxDpr?: number\n}\n\n/**\n * Get the device pixel ratio, potentially rounded and capped.\n * Will emit new values if it changes.\n *\n * @param options\n * @returns The current device pixel ratio, or the default if none can be resolved\n */\nexport function useDevicePixelRatio(options?: DevicePixelRatioOptions) {\n  const dpr = getDevicePixelRatio(options)\n  const [currentDpr, setCurrentDpr] = useState(dpr)\n\n  useEffect(() => {\n    const canListen = typeof window !== 'undefined' && 'matchMedia' in window\n    if (!canListen) {\n      return\n    }\n\n    const updateDpr = () => setCurrentDpr(getDevicePixelRatio(options))\n    const mediaMatcher = window.matchMedia(`screen and (resolution: ${currentDpr}dppx)`)\n    mediaMatcher.addEventListener('change', updateDpr)\n\n    return () => {\n      mediaMatcher.removeEventListener('change', updateDpr)\n    }\n  }, [currentDpr, options])\n\n  return currentDpr\n}\n\n/**\n * Returns the current device pixel ratio (DPR) given the passed options\n *\n * @param options\n * @returns current device pixel ratio\n */\nexport function getDevicePixelRatio(options?: DevicePixelRatioOptions): number {\n  const {defaultDpr = 1, maxDpr = 3, round = true} = options || {}\n  const hasDprProp = typeof window !== 'undefined' && typeof window.devicePixelRatio === 'number'\n  const dpr = hasDprProp ? window.devicePixelRatio : defaultDpr\n  const rounded = Math.min(Math.max(1, round ? Math.floor(dpr) : dpr), maxDpr)\n  return rounded\n}\n"],"names":["useDevicePixelRatio","options","dpr","getDevicePixelRatio","currentDpr","setCurrentDpr","useState","useEffect","canListen","window","updateDpr","mediaMatcher","matchMedia","addEventListener","removeEventListener","defaultDpr","maxDpr","round","hasDprProp","devicePixelRatio","rounded","Math","min","max","floor"],"mappings":";;AA0BA;;;;;;;;SAOgBA,oBAAoBC;AAClC,QAAMC,GAAG,GAAGC,mBAAmB,CAACF,OAAD,CAA/B;AACA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BC,cAAQ,CAACJ,GAAD,CAA5C;AAEAK,EAAAA,eAAS,CAAC;AACR,UAAMC,SAAS,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,gBAAgBA,MAAnE;;AACA,QAAI,CAACD,SAAL,EAAgB;AACd;AACD;;AAED,UAAME,SAAS,GAAG,MAAML,aAAa,CAACF,mBAAmB,CAACF,OAAD,CAApB,CAArC;;AACA,UAAMU,YAAY,GAAGF,MAAM,CAACG,UAAP,4BAA6CR,iBAA7C,CAArB;AACAO,IAAAA,YAAY,CAACE,gBAAb,CAA8B,QAA9B,EAAwCH,SAAxC;AAEA,WAAO;AACLC,MAAAA,YAAY,CAACG,mBAAb,CAAiC,QAAjC,EAA2CJ,SAA3C;AACD,KAFD;AAGD,GAbQ,EAaN,CAACN,UAAD,EAAaH,OAAb,CAbM,CAAT;AAeA,SAAOG,UAAP;AACD;AAED;;;;;;;SAMgBD,oBAAoBF;AAClC,QAAM;AAACc,IAAAA,UAAU,GAAG,CAAd;AAAiBC,IAAAA,MAAM,GAAG,CAA1B;AAA6BC,IAAAA,KAAK,GAAG;AAArC,MAA6ChB,OAAO,IAAI,EAA9D;AACA,QAAMiB,UAAU,GAAG,OAAOT,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACU,gBAAd,KAAmC,QAAvF;AACA,QAAMjB,GAAG,GAAGgB,UAAU,GAAGT,MAAM,CAACU,gBAAV,GAA6BJ,UAAnD;AACA,QAAMK,OAAO,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYN,KAAK,GAAGI,IAAI,CAACG,KAAL,CAAWtB,GAAX,CAAH,GAAqBA,GAAtC,CAAT,EAAqDc,MAArD,CAAhB;AACA,SAAOI,OAAP;AACD;;;;;"}