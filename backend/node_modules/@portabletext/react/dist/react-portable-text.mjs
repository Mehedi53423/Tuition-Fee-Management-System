var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import { nestLists, LIST_NEST_MODE_HTML, isPortableTextToolkitList, isPortableTextListItemBlock, isPortableTextToolkitSpan, spanToPlainText, isPortableTextBlock, isPortableTextToolkitTextNode, buildMarksTree } from "@portabletext/toolkit";
export { toPlainText } from "@portabletext/toolkit";
import React, { createContext, useMemo, useContext } from "react";
function mergeComponents(parent, overrides) {
  const _a = overrides, { block, list, listItem, marks, types } = _a, rest = __objRest(_a, ["block", "list", "listItem", "marks", "types"]);
  return __spreadValues(__spreadProps(__spreadValues({}, parent), {
    block: mergeDeeply(parent, overrides, "block"),
    list: mergeDeeply(parent, overrides, "list"),
    listItem: mergeDeeply(parent, overrides, "listItem"),
    marks: mergeDeeply(parent, overrides, "marks"),
    types: mergeDeeply(parent, overrides, "types")
  }), rest);
}
function mergeDeeply(parent, overrides, key) {
  const override = overrides[key];
  const parentVal = parent[key];
  if (typeof override === "function") {
    return override;
  }
  if (override && typeof parentVal === "function") {
    return override;
  }
  if (override) {
    return __spreadValues(__spreadValues({}, parentVal), override);
  }
  return parentVal;
}
const link = ({ children, value }) => /* @__PURE__ */ React.createElement("a", {
  href: value == null ? void 0 : value.href
}, children);
const underlineStyle = { textDecoration: "underline" };
const defaultMarks = {
  em: ({ children }) => /* @__PURE__ */ React.createElement("em", null, children),
  strong: ({ children }) => /* @__PURE__ */ React.createElement("strong", null, children),
  code: ({ children }) => /* @__PURE__ */ React.createElement("code", null, children),
  underline: ({ children }) => /* @__PURE__ */ React.createElement("span", {
    style: underlineStyle
  }, children),
  "strike-through": ({ children }) => /* @__PURE__ */ React.createElement("del", null, children),
  link
};
const defaultLists = {
  number: ({ children }) => /* @__PURE__ */ React.createElement("ol", null, children),
  bullet: ({ children }) => /* @__PURE__ */ React.createElement("ul", null, children)
};
const DefaultListItem = ({ children }) => /* @__PURE__ */ React.createElement("li", null, children);
const getTemplate = (type, prop) => `Unknown ${type}, specify a component for it in the \`components.${prop}\` prop`;
const unknownTypeWarning = (typeName) => getTemplate(`block type "${typeName}"`, "types");
const unknownMarkWarning = (markType) => getTemplate(`mark type "${markType}"`, "marks");
const unknownBlockStyleWarning = (blockStyle) => getTemplate(`block style "${blockStyle}"`, "block");
const unknownListStyleWarning = (listStyle) => getTemplate(`list style "${listStyle}"`, "list");
const unknownListItemStyleWarning = (listStyle) => getTemplate(`list item style "${listStyle}"`, "listItem");
function printWarning(message) {
  console.warn(message);
}
const hidden = { display: "none" };
const DefaultUnknownType = ({
  value,
  isInline
}) => {
  const warning = unknownTypeWarning(value._type);
  return isInline ? /* @__PURE__ */ React.createElement("span", {
    style: hidden
  }, warning) : /* @__PURE__ */ React.createElement("div", {
    style: hidden
  }, warning);
};
const DefaultUnknownMark = ({
  markType,
  children
}) => {
  return /* @__PURE__ */ React.createElement("span", {
    className: `unknown__pt__mark__${markType}`
  }, children);
};
const DefaultUnknownBlockStyle = ({
  children
}) => {
  return /* @__PURE__ */ React.createElement("p", null, children);
};
const DefaultUnknownList = ({ children }) => {
  return /* @__PURE__ */ React.createElement("ul", null, children);
};
const DefaultUnknownListItem = ({
  children
}) => {
  return /* @__PURE__ */ React.createElement("li", null, children);
};
const DefaultHardBreak = () => /* @__PURE__ */ React.createElement("br", null);
const defaultBlockStyles = {
  normal: ({ children }) => /* @__PURE__ */ React.createElement("p", null, children),
  blockquote: ({ children }) => /* @__PURE__ */ React.createElement("blockquote", null, children),
  h1: ({ children }) => /* @__PURE__ */ React.createElement("h1", null, children),
  h2: ({ children }) => /* @__PURE__ */ React.createElement("h2", null, children),
  h3: ({ children }) => /* @__PURE__ */ React.createElement("h3", null, children),
  h4: ({ children }) => /* @__PURE__ */ React.createElement("h4", null, children),
  h5: ({ children }) => /* @__PURE__ */ React.createElement("h5", null, children),
  h6: ({ children }) => /* @__PURE__ */ React.createElement("h6", null, children)
};
const defaultComponents = {
  types: {},
  block: defaultBlockStyles,
  marks: defaultMarks,
  list: defaultLists,
  listItem: DefaultListItem,
  hardBreak: DefaultHardBreak,
  unknownType: DefaultUnknownType,
  unknownMark: DefaultUnknownMark,
  unknownList: DefaultUnknownList,
  unknownListItem: DefaultUnknownListItem,
  unknownBlockStyle: DefaultUnknownBlockStyle
};
const PortableTextComponentsContext = createContext(defaultComponents);
const PortableTextComponentsProvider = ({
  components,
  children
}) => {
  const value = useMemo(() => mergeComponents(defaultComponents, components), [components]);
  return /* @__PURE__ */ React.createElement(PortableTextComponentsContext.Provider, {
    value
  }, children);
};
function PortableText({
  value: input,
  components: componentOverrides,
  listNestingMode,
  onMissingComponent: missingComponentHandler = printWarning
}) {
  const handleMissingComponent = missingComponentHandler || noop;
  const blocks = Array.isArray(input) ? input : [input];
  const nested = nestLists(blocks, listNestingMode || LIST_NEST_MODE_HTML);
  const parentComponents = useContext(PortableTextComponentsContext);
  const components = useMemo(() => {
    return componentOverrides ? mergeComponents(parentComponents, componentOverrides) : parentComponents;
  }, [parentComponents, componentOverrides]);
  const renderNode = useMemo(() => getNodeRenderer(components, handleMissingComponent), [components, handleMissingComponent]);
  const rendered = nested.map((node, index) => renderNode({ node, index, isInline: false, renderNode }));
  return componentOverrides ? /* @__PURE__ */ React.createElement(PortableTextComponentsContext.Provider, {
    value: components
  }, rendered) : /* @__PURE__ */ React.createElement(React.Fragment, null, rendered);
}
const getNodeRenderer = (components, handleMissingComponent) => {
  function renderNode(options) {
    const { node, index, isInline } = options;
    const key = node._key || `node-${index}`;
    if (isPortableTextToolkitList(node)) {
      return renderList(node, index, key);
    }
    if (isPortableTextListItemBlock(node)) {
      return renderListItem(node, index, key);
    }
    if (isPortableTextToolkitSpan(node)) {
      return renderSpan(node, index, key);
    }
    if (isPortableTextBlock(node)) {
      return renderBlock(node, index, key, isInline);
    }
    if (isPortableTextToolkitTextNode(node)) {
      return renderText(node, key);
    }
    return renderCustomBlock(node, index, key, isInline);
  }
  function renderListItem(node, index, key) {
    const tree = serializeBlock({ node, index, isInline: false, renderNode });
    const renderer = components.listItem;
    const handler = typeof renderer === "function" ? renderer : renderer[node.listItem];
    const Li = handler || components.unknownListItem;
    if (Li === components.unknownListItem) {
      const style = node.listItem || "bullet";
      handleMissingComponent(unknownListItemStyleWarning(style), {
        type: style,
        nodeType: "listItemStyle"
      });
    }
    let children = tree.children;
    if (node.style && node.style !== "normal") {
      const _a = node, { listItem } = _a, blockNode = __objRest(_a, ["listItem"]);
      children = renderNode({ node: blockNode, index, isInline: false, renderNode });
    }
    return /* @__PURE__ */ React.createElement(Li, {
      key,
      value: node,
      index,
      isInline: false,
      renderNode
    }, children);
  }
  function renderList(node, index, key) {
    const children = node.children.map((child, childIndex) => renderNode({
      node: child._key ? child : __spreadProps(__spreadValues({}, child), { _key: `li-${index}-${childIndex}` }),
      index,
      isInline: false,
      renderNode
    }));
    const component = components.list;
    const handler = typeof component === "function" ? component : component[node.listItem];
    const List = handler || components.unknownList;
    if (List === components.unknownList) {
      const style = node.listItem || "bullet";
      handleMissingComponent(unknownListStyleWarning(style), { nodeType: "listStyle", type: style });
    }
    return /* @__PURE__ */ React.createElement(List, {
      key,
      value: node,
      index,
      isInline: false,
      renderNode
    }, children);
  }
  function renderSpan(node, _index, key) {
    const { markDef, markType, markKey } = node;
    const Span = components.marks[markType] || components.unknownMark;
    const children = node.children.map((child, childIndex) => renderNode({ node: child, index: childIndex, isInline: true, renderNode }));
    if (Span === components.unknownMark) {
      handleMissingComponent(unknownMarkWarning(markType), { nodeType: "mark", type: markType });
    }
    return /* @__PURE__ */ React.createElement(Span, {
      key,
      text: spanToPlainText(node),
      value: markDef,
      markType,
      markKey,
      renderNode
    }, children);
  }
  function renderBlock(node, index, key, isInline) {
    const _a = serializeBlock({ node, index, isInline, renderNode }), { _key } = _a, props = __objRest(_a, ["_key"]);
    const style = props.node.style || "normal";
    const handler = typeof components.block === "function" ? components.block : components.block[style];
    const Block = handler || components.unknownBlockStyle;
    if (Block === components.unknownBlockStyle) {
      handleMissingComponent(unknownBlockStyleWarning(style), {
        nodeType: "blockStyle",
        type: style
      });
    }
    return /* @__PURE__ */ React.createElement(Block, __spreadProps(__spreadValues({
      key
    }, props), {
      value: props.node,
      renderNode
    }));
  }
  function renderText(node, key) {
    if (node.text === "\n") {
      const HardBreak = components.hardBreak;
      return HardBreak ? /* @__PURE__ */ React.createElement(HardBreak, {
        key
      }) : "\n";
    }
    return node.text;
  }
  function renderCustomBlock(node, index, key, isInline) {
    const Node = components.types[node._type];
    const nodeOptions = {
      value: node,
      isInline,
      index,
      renderNode
    };
    if (Node) {
      return /* @__PURE__ */ React.createElement(Node, __spreadValues({
        key
      }, nodeOptions));
    }
    handleMissingComponent(unknownTypeWarning(node._type), { nodeType: "block", type: node._type });
    const UnknownType = components.unknownType;
    return /* @__PURE__ */ React.createElement(UnknownType, __spreadValues({
      key
    }, nodeOptions));
  }
  return renderNode;
};
function serializeBlock(options) {
  const { node, index, isInline, renderNode } = options;
  const tree = buildMarksTree(node);
  const children = tree.map((child, i) => renderNode({ node: child, isInline: true, index: i, renderNode }));
  return {
    _key: node._key || `block-${index}`,
    children,
    index,
    isInline,
    node
  };
}
function noop() {
}
export { PortableText, PortableTextComponentsProvider, defaultComponents, mergeComponents };
//# sourceMappingURL=react-portable-text.mjs.map
