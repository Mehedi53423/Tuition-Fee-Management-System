var autoId = require('@reach/auto-id');
var React = require('react');
var ReactIs = require('react-is');
var styled = require('styled-components');
var color$1 = require('@sanity/color');
var icons = require('@sanity/icons');
var Refractor = require('react-refractor');
var reactPopper = require('react-popper');
var resizeObserver = require('@juggle/resize-observer');
var ReactDOM = require('react-dom');
var maxSizeModifier = require('popper-max-size-modifier');
var framerMotion = require('framer-motion');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var ReactIs__default = /*#__PURE__*/_interopDefaultLegacy(ReactIs);
var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var Refractor__default = /*#__PURE__*/_interopDefaultLegacy(Refractor);
var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);
var maxSizeModifier__default = /*#__PURE__*/_interopDefaultLegacy(maxSizeModifier);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var EMPTY_ARRAY = [];
var EMPTY_RECORD$1 = {};

function _getElements(element, elementsArg) {
  var ret = [element];

  for (var _iterator = _createForOfIteratorHelperLoose(elementsArg), _step; !(_step = _iterator()).done;) {
    var el = _step.value;

    if (Array.isArray(el)) {
      ret.push.apply(ret, el);
    } else {
      ret.push(el);
    }
  }

  return ret.filter(Boolean);
}
/**
 * @public
 */


function useClickOutside(listener, elementsArg, boundaryElement) {
  if (elementsArg === void 0) {
    elementsArg = EMPTY_ARRAY;
  }

  var _useState = React.useState(null),
      element = _useState[0],
      setElement = _useState[1];

  var _useState2 = React.useState(function () {
    return _getElements(element, elementsArg);
  }),
      elements = _useState2[0],
      setElements = _useState2[1];

  var elementsRef = React.useRef(elements);
  React.useEffect(function () {
    var prevElements = elementsRef.current;

    var nextElements = _getElements(element, elementsArg);

    if (prevElements.length !== nextElements.length) {
      setElements(nextElements);
      elementsRef.current = nextElements;
      return;
    }

    for (var _iterator2 = _createForOfIteratorHelperLoose(prevElements), _step2; !(_step2 = _iterator2()).done;) {
      var el = _step2.value;

      if (!nextElements.includes(el)) {
        setElements(nextElements);
        elementsRef.current = nextElements;
        return;
      }
    }

    for (var _iterator3 = _createForOfIteratorHelperLoose(nextElements), _step3; !(_step3 = _iterator3()).done;) {
      var _el = _step3.value;

      if (!prevElements.includes(_el)) {
        setElements(nextElements);
        elementsRef.current = nextElements;
        return;
      }
    }
  }, [element, elementsArg]);
  React.useEffect(function () {
    if (!listener) return undefined;

    var handleWindowMouseDown = function handleWindowMouseDown(evt) {
      var target = evt.target;

      if (!(target instanceof Node)) {
        return;
      }

      if (boundaryElement && !boundaryElement.contains(target)) {
        return;
      }

      for (var _iterator4 = _createForOfIteratorHelperLoose(elements), _step4; !(_step4 = _iterator4()).done;) {
        var el = _step4.value;

        if (target === el || el.contains(target)) {
          return;
        }
      }

      listener(evt);
    };

    window.addEventListener('mousedown', handleWindowMouseDown);
    return function () {
      window.removeEventListener('mousedown', handleWindowMouseDown);
    };
  }, [boundaryElement, listener, elements]);
  return setElement;
}

/**
 * Subscribe to the rect of a DOM element.
 * @beta
 */

function useElementRect(element) {
  var _useState = React.useState(null),
      rect = _useState[0],
      setRect = _useState[1];

  React.useEffect(function () {
    if (!element) return undefined;
    var ro = new ResizeObserver(function (entries) {
      setRect(entries[0].contentRect);
    });
    ro.observe(element);
    return function () {
      return ro.disconnect();
    };
  }, [element]);
  return rect;
}

/**
 * @beta
 */

function useGlobalKeyDown(onKeyDown) {
  return React.useEffect(function () {
    addEventListener('keydown', onKeyDown);
    return function () {
      return removeEventListener('keydown', onKeyDown);
    };
  }, [onKeyDown]);
}

function multiplyChannel(b, s) {
  return b * s;
}
/**
 * Apply the \`multiply\` blend mode
 * Source: https://www.w3.org/TR/compositing-1/#blendingmultiply
 * @internal
 */


function multiply$1(b, s) {
  return {
    r: Math.round(clamp$1(multiplyChannel(b.r / 255, s.r / 255) * 255)),
    g: Math.round(clamp$1(multiplyChannel(b.g / 255, s.g / 255) * 255)),
    b: Math.round(clamp$1(multiplyChannel(b.b / 255, s.b / 255) * 255))
  };
}

function clamp$1(num) {
  return Math.max(Math.min(num, 255), 0);
}

function screenChannel(b, s) {
  return b + s - b * s;
}
/**
 * Apply the \`screen\` blend mode
 * Source: https://www.w3.org/TR/compositing-1/#blendingscreen
 * @internal
 */


function screen$1(b, s) {
  return {
    r: Math.round(clamp(screenChannel(b.r / 255, s.r / 255) * 255)),
    g: Math.round(clamp(screenChannel(b.g / 255, s.g / 255) * 255)),
    b: Math.round(clamp(screenChannel(b.b / 255, s.b / 255) * 255))
  };
}

function clamp(num) {
  return Math.max(Math.min(num, 255), 0);
}

/**
 * @internal
 */
function hexToRgb(hex) {
  if (hex.length === 4) {
    var hexR = hex.slice(1, 2);
    var hexG = hex.slice(2, 3);
    var hexB = hex.slice(3, 4);
    return {
      r: parseInt(hexR + hexR, 16),
      g: parseInt(hexG + hexG, 16),
      b: parseInt(hexB + hexB, 16)
    };
  }

  return {
    r: parseInt(hex.slice(1, 3), 16),
    g: parseInt(hex.slice(3, 5), 16),
    b: parseInt(hex.slice(5, 7), 16)
  };
}
/**
 * @internal
 */

function rgbToHex(_ref) {
  var r = _ref.r,
      g = _ref.g,
      b = _ref.b;
  return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
}
/**
 * @internal
 * @see https://css-tricks.com/converting-color-spaces-in-javascript/
 */

function rgbToHsl(_ref2) {
  var r = _ref2.r,
      g = _ref2.g,
      b = _ref2.b;
  // Make r, g, and b fractions of 1
  r /= 255;
  g /= 255;
  b /= 255; // Find greatest and smallest channel values

  var cmin = Math.min(r, g, b);
  var cmax = Math.max(r, g, b);
  var delta = cmax - cmin;
  var h = 0;
  var s = 0;
  var l = 0; // Calculate hue
  // No difference

  if (delta == 0) h = 0; // Red is max
  else if (cmax == r) h = (g - b) / delta % 6; // Green is max
  else if (cmax == g) h = (b - r) / delta + 2; // Blue is max
  else h = (r - g) / delta + 4;
  h = Math.round(h * 60); // Make negative hues positive behind 360Â°

  if (h < 0) h += 360; // Calculate lightness

  l = (cmax + cmin) / 2; // Calculate saturation

  s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1)); // Multiply l and s by 100

  s = +(s * 100).toFixed(1);
  l = +(l * 100).toFixed(1);
  return {
    h: h,
    s: s,
    l: l
  };
}
/**
 * @internal
 */

function hslToRgb(hsl) {
  // Must be fractions of 1
  var s = hsl.s / 100;
  var l = hsl.l / 100;
  var c = (1 - Math.abs(2 * l - 1)) * s;
  var x = c * (1 - Math.abs(hsl.h / 60 % 2 - 1));
  var m = l - c / 2;
  var r = 0;
  var g = 0;
  var b = 0;

  if (0 <= hsl.h && hsl.h < 60) {
    r = c;
    g = x;
    b = 0;
  } else if (60 <= hsl.h && hsl.h < 120) {
    r = x;
    g = c;
    b = 0;
  } else if (120 <= hsl.h && hsl.h < 180) {
    r = 0;
    g = c;
    b = x;
  } else if (180 <= hsl.h && hsl.h < 240) {
    r = 0;
    g = x;
    b = c;
  } else if (240 <= hsl.h && hsl.h < 300) {
    r = x;
    g = 0;
    b = c;
  } else if (300 <= hsl.h && hsl.h < 360) {
    r = c;
    g = 0;
    b = x;
  }

  return {
    r: Math.round((r + m) * 255),
    g: Math.round((g + m) * 255),
    b: Math.round((b + m) * 255)
  };
}

var HEX_CHARS = '0123456789ABCDEFabcdef';
var HSL_RE = /hsl\(\s*(\d+)\s*,\s*((\d+(?:\.\d+)?)%)\s*,\s*((\d+(?:\.\d+)?)%)\s*\)/i;

function isHexChars(str) {
  for (var _iterator = _createForOfIteratorHelperLoose(str), _step; !(_step = _iterator()).done;) {
    var c = _step.value;

    if (HEX_CHARS.indexOf(c) === -1) {
      return false;
    }
  }

  return true;
}

function isHex(str) {
  if (str[0] !== '#') return false; // Accept both #000 and #000000

  if (!(str.length === 4 || str.length === 7)) return false;
  return isHexChars(str.slice(1));
}

function parseHsl(str) {
  var res = HSL_RE.exec(str);

  if (!res) {
    throw new Error("parseHsl: string is not a HSL color: \"" + str + "\"");
  }

  return {
    h: parseInt(res[1]),
    s: parseFloat(res[3]),
    l: parseFloat(res[5])
  };
}
/**
 * @internal
 */


function parseColor(color) {
  if (!color) return {
    r: 0,
    g: 0,
    b: 0
  };

  if (typeof color !== 'string') {
    throw new Error('parseColor: expected a string');
  }

  if (isHex(color)) {
    return hexToRgb(color);
  }

  if (color.startsWith('hsl(')) {
    return hslToRgb(parseHsl(color));
  }

  throw new Error("parseColor: unexpected color format: \"" + color + "\"");
}

/**
 * @internal
 */

function rgba(color, a) {
  var rgb = parseColor(color);
  return "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + a + ")";
}

function createButtonTones(opts, base, dark, solid, muted, mode) {
  return {
    "default": opts.button({
      base: base,
      dark: dark,
      solid: solid["default"],
      muted: muted["default"],
      mode: mode
    }),
    primary: opts.button({
      base: base,
      dark: dark,
      solid: solid.primary,
      muted: muted.primary,
      mode: mode
    }),
    positive: opts.button({
      base: base,
      dark: dark,
      solid: solid.positive,
      muted: muted.positive,
      mode: mode
    }),
    caution: opts.button({
      base: base,
      dark: dark,
      solid: solid.caution,
      muted: muted.caution,
      mode: mode
    }),
    critical: opts.button({
      base: base,
      dark: dark,
      solid: solid.critical,
      muted: muted.critical,
      mode: mode
    })
  };
}

function createButtonModes(opts, base, dark, solid, muted) {
  return {
    "default": createButtonTones(opts, base, dark, solid, muted, 'default'),
    ghost: createButtonTones(opts, base, dark, solid, muted, 'ghost'),
    bleed: createButtonTones(opts, base, dark, solid, muted, 'bleed')
  };
}

function createCardStates(opts, base, dark, name, solid, muted) {
  return {
    enabled: opts.card({
      base: base,
      dark: dark,
      name: name,
      state: 'enabled',
      solid: solid,
      muted: muted
    }),
    disabled: opts.card({
      base: base,
      dark: dark,
      name: name,
      state: 'disabled',
      solid: solid,
      muted: muted
    }),
    hovered: opts.card({
      base: base,
      dark: dark,
      name: name,
      state: 'hovered',
      solid: solid,
      muted: muted
    }),
    pressed: opts.card({
      base: base,
      dark: dark,
      name: name,
      state: 'pressed',
      solid: solid,
      muted: muted
    }),
    selected: opts.card({
      base: base,
      dark: dark,
      name: name,
      state: 'selected',
      solid: solid,
      muted: muted
    })
  };
}

var black = 'hsl(0, 0%, 0%)';
var white = 'hsl(0, 0%, 100%)';
var colors = {
  "default": {
    lightest: 'hsl(0, 0%, 95%)',
    lighter: 'hsl(0, 0%, 70%)',
    light: 'hsl(0, 0%, 65%)',
    base: 'hsl(0, 0%, 50%)',
    dark: 'hsl(0, 0%, 35%)',
    darker: 'hsl(0, 0%, 20%)',
    darkest: 'hsl(0, 0%, 5%)'
  },
  transparent: {
    lightest: 'hsl(240, 100%, 95%)',
    lighter: 'hsl(240, 100%, 70%)',
    light: 'hsl(240, 100%, 65%)',
    base: 'hsl(240, 100%, 50%)',
    dark: 'hsl(240, 100%, 35%)',
    darker: 'hsl(240, 100%, 20%)',
    darkest: 'hsl(240, 100%, 5%)'
  },
  primary: {
    lightest: 'hsl(240, 100%, 95%)',
    lighter: 'hsl(240, 100%, 70%)',
    light: 'hsl(240, 100%, 65%)',
    base: 'hsl(240, 100%, 50%)',
    dark: 'hsl(240, 100%, 35%)',
    darker: 'hsl(240, 100%, 20%)',
    darkest: 'hsl(240, 100%, 5%)'
  },
  positive: {
    lightest: 'hsl(120, 100%, 95%)',
    lighter: 'hsl(120, 100%, 70%)',
    light: 'hsl(120, 100%, 65%)',
    base: 'hsl(120, 100%, 50%)',
    dark: 'hsl(120, 100%, 35%)',
    darker: 'hsl(120, 100%, 20%)',
    darkest: 'hsl(120, 100%, 5%)'
  },
  caution: {
    lightest: 'hsl(60, 100%, 95%)',
    lighter: 'hsl(60, 100%, 70%)',
    light: 'hsl(60, 100%, 65%)',
    base: 'hsl(60, 100%, 50%)',
    dark: 'hsl(60, 100%, 35%)',
    darker: 'hsl(60, 100%, 20%)',
    darkest: 'hsl(60, 100%, 5%)'
  },
  critical: {
    lightest: 'hsl(0, 100%, 95%)',
    lighter: 'hsl(0, 100%, 70%)',
    light: 'hsl(0, 100%, 65%)',
    base: 'hsl(0, 100%, 50%)',
    dark: 'hsl(0, 100%, 35%)',
    darker: 'hsl(0, 100%, 20%)',
    darkest: 'hsl(0, 100%, 5%)'
  }
};
var spots = {
  gray: 'hsl(0, 0%, 50%)',
  red: 'hsl(0, 100%, 50%)',
  orange: 'hsl(30, 100%, 50%)',
  yellow: 'hsl(60, 100%, 50%)',
  green: 'hsl(120, 100%, 50%)',
  cyan: 'hsl(180, 100%, 50%)',
  blue: 'hsl(240, 100%, 50%)',
  purple: 'hsl(270, 100%, 50%)',
  magenta: 'hsl(300, 100%, 50%)'
};
var tones$1 = {
  transparent: {
    bg: [colors.transparent.darkest, colors.transparent.lightest],
    fg: [colors.transparent.lightest, colors.transparent.darkest],
    border: [colors.transparent.darker, colors.transparent.lighter],
    focusRing: [colors.transparent.base, colors.transparent.base]
  },
  primary: {
    bg: [colors.primary.darkest, colors.primary.lightest],
    fg: [colors.primary.lightest, colors.primary.darkest],
    border: [colors.primary.darker, colors.primary.lighter],
    focusRing: [colors.primary.base, colors.primary.base]
  },
  positive: {
    bg: [colors.positive.darkest, colors.positive.lightest],
    fg: [colors.positive.lightest, colors.positive.darkest],
    border: [colors.positive.darker, colors.positive.lighter],
    focusRing: [colors.positive.base, colors.positive.base]
  },
  caution: {
    bg: [colors.caution.darkest, colors.caution.lightest],
    fg: [colors.caution.lightest, colors.caution.darkest],
    border: [colors.caution.darker, colors.caution.lighter],
    focusRing: [colors.caution.base, colors.caution.base]
  },
  critical: {
    bg: [colors.critical.darkest, colors.critical.lightest],
    fg: [colors.critical.lightest, colors.critical.darkest],
    border: [colors.critical.darker, colors.critical.lighter],
    focusRing: [colors.critical.base, colors.critical.base]
  }
};
var defaultOpts = {
  base: function base(_ref) {
    var dark = _ref.dark,
        name = _ref.name;

    if (name === 'default') {
      return {
        bg: dark ? black : white,
        fg: dark ? white : black,
        border: dark ? colors["default"].darkest : colors["default"].lightest,
        focusRing: colors.primary.base,
        shadow: {
          outline: black,
          umbra: black,
          penumbra: black,
          ambient: black
        },
        skeleton: {
          from: dark ? white : black,
          to: dark ? white : black
        }
      };
    } // Variants:
    // - primary
    // - positive
    // - caution
    // - critical


    return {
      bg: tones$1[name].bg[dark ? 0 : 1],
      fg: tones$1[name].fg[dark ? 0 : 1],
      border: tones$1[name].border[dark ? 0 : 1],
      focusRing: tones$1[name].focusRing[dark ? 0 : 1],
      shadow: {
        outline: black,
        umbra: black,
        penumbra: black,
        ambient: black
      },
      skeleton: {
        from: dark ? white : black,
        to: dark ? white : black
      }
    };
  },
  solid: function solid(_ref2) {
    var base = _ref2.base,
        dark = _ref2.dark,
        state = _ref2.state,
        tone = _ref2.tone;
    var color = colors[tone];

    if (state === 'hovered') {
      return {
        bg: dark ? color.light : color.dark,
        bg2: dark ? color.light : color.dark,
        border: dark ? color.lighter : color.darker,
        fg: dark ? color.darkest : color.lightest,
        muted: {
          fg: black
        },
        accent: {
          fg: black
        },
        link: {
          fg: black
        },
        code: {
          bg: black,
          fg: black
        },
        skeleton: base.skeleton
      };
    }

    return {
      bg: color.base,
      bg2: color.base,
      border: dark ? color.light : color.dark,
      fg: dark ? color.darkest : color.lightest,
      muted: {
        fg: black
      },
      accent: {
        fg: black
      },
      link: {
        fg: black
      },
      code: {
        bg: black,
        fg: black
      },
      skeleton: base.skeleton
    };
  },
  muted: function muted(_ref3) {
    var base = _ref3.base,
        dark = _ref3.dark,
        state = _ref3.state,
        tone = _ref3.tone;
    var color = colors[tone];

    if (state === 'hovered') {
      return {
        bg: dark ? color.darker : color.lighter,
        bg2: dark ? color.darker : color.lighter,
        border: dark ? color.lighter : color.darker,
        fg: dark ? color.lightest : color.darkest,
        muted: {
          fg: black
        },
        accent: {
          fg: black
        },
        link: {
          fg: black
        },
        code: {
          bg: black,
          fg: black
        },
        skeleton: base.skeleton
      };
    }

    return {
      bg: dark ? color.darkest : color.lightest,
      bg2: dark ? color.darkest : color.lightest,
      border: dark ? color.darker : color.lighter,
      fg: dark ? color.lighter : color.darker,
      muted: {
        fg: black
      },
      accent: {
        fg: black
      },
      link: {
        fg: black
      },
      code: {
        bg: black,
        fg: black
      },
      skeleton: base.skeleton
    };
  },
  button: function button(_ref4) {
    var base = _ref4.base,
        mode = _ref4.mode,
        muted = _ref4.muted,
        solid = _ref4.solid;

    if (mode === 'bleed') {
      return _extends({}, muted, {
        enabled: {
          bg: 'transparent',
          bg2: 'transparent',
          fg: muted.enabled.fg,
          border: 'transparent',
          muted: {
            fg: black
          },
          accent: {
            fg: black
          },
          link: {
            fg: black
          },
          code: {
            bg: black,
            fg: black
          },
          skeleton: base.skeleton
        },
        hovered: {
          bg: muted.enabled.bg,
          bg2: muted.enabled.bg,
          fg: muted.hovered.fg,
          border: 'transparent',
          muted: {
            fg: black
          },
          accent: {
            fg: black
          },
          link: {
            fg: black
          },
          code: {
            bg: black,
            fg: black
          },
          skeleton: base.skeleton
        }
      });
    }

    if (mode === 'ghost') return _extends({}, solid, {
      enabled: muted.enabled
    });
    return solid;
  },
  card: function card(_ref5) {
    var base = _ref5.base;
    return {
      bg: black,
      bg2: black,
      fg: black,
      border: black,
      muted: {
        fg: black
      },
      accent: {
        fg: black
      },
      link: {
        fg: black
      },
      code: {
        bg: black,
        fg: black
      },
      skeleton: base.skeleton
    };
  },
  input: function input() {
    return {
      bg: black,
      fg: black,
      border: black,
      placeholder: black
    };
  },
  selectable: function selectable(_ref6) {
    var muted = _ref6.muted,
        state = _ref6.state,
        tone = _ref6.tone;
    return muted[tone][state];
  },
  spot: function spot(_ref7) {
    var key = _ref7.key;
    return spots[key];
  },
  syntax: function syntax() {
    return {
      atrule: black,
      attrName: black,
      attrValue: black,
      attribute: black,
      "boolean": black,
      builtin: black,
      cdata: black,
      "char": black,
      "class": black,
      className: black,
      comment: black,
      constant: black,
      deleted: black,
      doctype: black,
      entity: black,
      "function": black,
      hexcode: black,
      id: black,
      important: black,
      inserted: black,
      keyword: black,
      number: black,
      operator: black,
      prolog: black,
      property: black,
      pseudoClass: black,
      pseudoElement: black,
      punctuation: black,
      regex: black,
      selector: black,
      string: black,
      symbol: black,
      tag: black,
      unit: black,
      url: black,
      variable: black
    };
  }
};

function createInputModes(opts, base, dark, solid, muted) {
  return {
    "default": {
      enabled: opts.input({
        base: base,
        dark: dark,
        mode: 'default',
        state: 'enabled',
        solid: solid["default"],
        muted: muted["default"]
      }),
      disabled: opts.input({
        base: base,
        dark: dark,
        mode: 'default',
        state: 'disabled',
        solid: solid["default"],
        muted: muted["default"]
      }),
      hovered: opts.input({
        base: base,
        dark: dark,
        mode: 'default',
        state: 'hovered',
        solid: solid["default"],
        muted: muted["default"]
      }),
      readOnly: opts.input({
        base: base,
        dark: dark,
        mode: 'default',
        state: 'readOnly',
        solid: solid["default"],
        muted: muted["default"]
      })
    },
    invalid: {
      enabled: opts.input({
        base: base,
        dark: dark,
        mode: 'invalid',
        state: 'enabled',
        solid: solid["default"],
        muted: muted["default"]
      }),
      disabled: opts.input({
        base: base,
        dark: dark,
        mode: 'invalid',
        state: 'disabled',
        solid: solid["default"],
        muted: muted["default"]
      }),
      hovered: opts.input({
        base: base,
        dark: dark,
        mode: 'invalid',
        state: 'hovered',
        solid: solid["default"],
        muted: muted["default"]
      }),
      readOnly: opts.input({
        base: base,
        dark: dark,
        mode: 'invalid',
        state: 'readOnly',
        solid: solid["default"],
        muted: muted["default"]
      })
    }
  };
}

function createMutedTones(opts, base, dark, name) {
  return {
    "default": {
      enabled: opts.muted({
        base: base,
        dark: dark,
        tone: 'default',
        name: name,
        state: 'enabled'
      }),
      disabled: opts.muted({
        base: base,
        dark: dark,
        tone: 'default',
        name: name,
        state: 'disabled'
      }),
      hovered: opts.muted({
        base: base,
        dark: dark,
        tone: 'default',
        name: name,
        state: 'hovered'
      }),
      pressed: opts.muted({
        base: base,
        dark: dark,
        tone: 'default',
        name: name,
        state: 'pressed'
      }),
      selected: opts.muted({
        base: base,
        dark: dark,
        tone: 'default',
        name: name,
        state: 'selected'
      })
    },
    transparent: {
      enabled: opts.muted({
        base: base,
        dark: dark,
        tone: 'transparent',
        name: name,
        state: 'enabled'
      }),
      disabled: opts.muted({
        base: base,
        dark: dark,
        tone: 'transparent',
        name: name,
        state: 'disabled'
      }),
      hovered: opts.muted({
        base: base,
        dark: dark,
        tone: 'transparent',
        name: name,
        state: 'hovered'
      }),
      pressed: opts.muted({
        base: base,
        dark: dark,
        tone: 'transparent',
        name: name,
        state: 'pressed'
      }),
      selected: opts.muted({
        base: base,
        dark: dark,
        tone: 'transparent',
        name: name,
        state: 'selected'
      })
    },
    primary: {
      enabled: opts.muted({
        base: base,
        dark: dark,
        tone: 'primary',
        name: name,
        state: 'enabled'
      }),
      disabled: opts.muted({
        base: base,
        dark: dark,
        tone: 'primary',
        name: name,
        state: 'disabled'
      }),
      hovered: opts.muted({
        base: base,
        dark: dark,
        tone: 'primary',
        name: name,
        state: 'hovered'
      }),
      pressed: opts.muted({
        base: base,
        dark: dark,
        tone: 'primary',
        name: name,
        state: 'pressed'
      }),
      selected: opts.muted({
        base: base,
        dark: dark,
        tone: 'primary',
        name: name,
        state: 'selected'
      })
    },
    positive: {
      enabled: opts.muted({
        base: base,
        dark: dark,
        tone: 'positive',
        name: name,
        state: 'enabled'
      }),
      disabled: opts.muted({
        base: base,
        dark: dark,
        tone: 'positive',
        name: name,
        state: 'disabled'
      }),
      hovered: opts.muted({
        base: base,
        dark: dark,
        tone: 'positive',
        name: name,
        state: 'hovered'
      }),
      pressed: opts.muted({
        base: base,
        dark: dark,
        tone: 'positive',
        name: name,
        state: 'pressed'
      }),
      selected: opts.muted({
        base: base,
        dark: dark,
        tone: 'positive',
        name: name,
        state: 'selected'
      })
    },
    caution: {
      enabled: opts.muted({
        base: base,
        dark: dark,
        tone: 'caution',
        name: name,
        state: 'enabled'
      }),
      disabled: opts.muted({
        base: base,
        dark: dark,
        tone: 'caution',
        name: name,
        state: 'disabled'
      }),
      hovered: opts.muted({
        base: base,
        dark: dark,
        tone: 'caution',
        name: name,
        state: 'hovered'
      }),
      pressed: opts.muted({
        base: base,
        dark: dark,
        tone: 'caution',
        name: name,
        state: 'pressed'
      }),
      selected: opts.muted({
        base: base,
        dark: dark,
        tone: 'caution',
        name: name,
        state: 'selected'
      })
    },
    critical: {
      enabled: opts.muted({
        base: base,
        dark: dark,
        tone: 'critical',
        name: name,
        state: 'enabled'
      }),
      disabled: opts.muted({
        base: base,
        dark: dark,
        tone: 'critical',
        name: name,
        state: 'disabled'
      }),
      hovered: opts.muted({
        base: base,
        dark: dark,
        tone: 'critical',
        name: name,
        state: 'hovered'
      }),
      pressed: opts.muted({
        base: base,
        dark: dark,
        tone: 'critical',
        name: name,
        state: 'pressed'
      }),
      selected: opts.muted({
        base: base,
        dark: dark,
        tone: 'critical',
        name: name,
        state: 'selected'
      })
    }
  };
}

function createSelectableTones(opts, base, dark, solid, muted) {
  return {
    "default": _createSelectableStates(opts, base, dark, solid, muted, 'default'),
    primary: _createSelectableStates(opts, base, dark, solid, muted, 'primary'),
    positive: _createSelectableStates(opts, base, dark, solid, muted, 'positive'),
    caution: _createSelectableStates(opts, base, dark, solid, muted, 'caution'),
    critical: _createSelectableStates(opts, base, dark, solid, muted, 'critical')
  };
}

function _createSelectableStates(opts, base, dark, solid, muted, tone) {
  return {
    enabled: opts.selectable({
      base: base,
      dark: dark,
      solid: solid,
      muted: muted,
      state: 'enabled',
      tone: tone
    }),
    hovered: opts.selectable({
      base: base,
      dark: dark,
      solid: solid,
      muted: muted,
      state: 'hovered',
      tone: tone
    }),
    pressed: opts.selectable({
      base: base,
      dark: dark,
      solid: solid,
      muted: muted,
      state: 'pressed',
      tone: tone
    }),
    selected: opts.selectable({
      base: base,
      dark: dark,
      solid: solid,
      muted: muted,
      state: 'selected',
      tone: tone
    }),
    disabled: opts.selectable({
      base: base,
      dark: dark,
      solid: solid,
      muted: muted,
      state: 'disabled',
      tone: tone
    })
  };
}

function createSolidTones(opts, base, dark, name) {
  return {
    "default": {
      enabled: opts.solid({
        base: base,
        dark: dark,
        tone: 'default',
        name: name,
        state: 'enabled'
      }),
      disabled: opts.solid({
        base: base,
        dark: dark,
        tone: 'default',
        name: name,
        state: 'disabled'
      }),
      hovered: opts.solid({
        base: base,
        dark: dark,
        tone: 'default',
        name: name,
        state: 'hovered'
      }),
      pressed: opts.solid({
        base: base,
        dark: dark,
        tone: 'default',
        name: name,
        state: 'pressed'
      }),
      selected: opts.solid({
        base: base,
        dark: dark,
        tone: 'default',
        name: name,
        state: 'selected'
      })
    },
    transparent: {
      enabled: opts.solid({
        base: base,
        dark: dark,
        tone: 'transparent',
        name: name,
        state: 'enabled'
      }),
      disabled: opts.solid({
        base: base,
        dark: dark,
        tone: 'transparent',
        name: name,
        state: 'disabled'
      }),
      hovered: opts.solid({
        base: base,
        dark: dark,
        tone: 'transparent',
        name: name,
        state: 'hovered'
      }),
      pressed: opts.solid({
        base: base,
        dark: dark,
        tone: 'transparent',
        name: name,
        state: 'pressed'
      }),
      selected: opts.solid({
        base: base,
        dark: dark,
        tone: 'transparent',
        name: name,
        state: 'selected'
      })
    },
    primary: {
      enabled: opts.solid({
        base: base,
        dark: dark,
        tone: 'primary',
        name: name,
        state: 'enabled'
      }),
      disabled: opts.solid({
        base: base,
        dark: dark,
        tone: 'primary',
        name: name,
        state: 'disabled'
      }),
      hovered: opts.solid({
        base: base,
        dark: dark,
        tone: 'primary',
        name: name,
        state: 'hovered'
      }),
      pressed: opts.solid({
        base: base,
        dark: dark,
        tone: 'primary',
        name: name,
        state: 'pressed'
      }),
      selected: opts.solid({
        base: base,
        dark: dark,
        tone: 'primary',
        name: name,
        state: 'selected'
      })
    },
    positive: {
      enabled: opts.solid({
        base: base,
        dark: dark,
        tone: 'positive',
        name: name,
        state: 'enabled'
      }),
      disabled: opts.solid({
        base: base,
        dark: dark,
        tone: 'positive',
        name: name,
        state: 'disabled'
      }),
      hovered: opts.solid({
        base: base,
        dark: dark,
        tone: 'positive',
        name: name,
        state: 'hovered'
      }),
      pressed: opts.solid({
        base: base,
        dark: dark,
        tone: 'positive',
        name: name,
        state: 'pressed'
      }),
      selected: opts.solid({
        base: base,
        dark: dark,
        tone: 'positive',
        name: name,
        state: 'selected'
      })
    },
    caution: {
      enabled: opts.solid({
        base: base,
        dark: dark,
        tone: 'caution',
        name: name,
        state: 'enabled'
      }),
      disabled: opts.solid({
        base: base,
        dark: dark,
        tone: 'caution',
        name: name,
        state: 'disabled'
      }),
      hovered: opts.solid({
        base: base,
        dark: dark,
        tone: 'caution',
        name: name,
        state: 'hovered'
      }),
      pressed: opts.solid({
        base: base,
        dark: dark,
        tone: 'caution',
        name: name,
        state: 'pressed'
      }),
      selected: opts.solid({
        base: base,
        dark: dark,
        tone: 'caution',
        name: name,
        state: 'selected'
      })
    },
    critical: {
      enabled: opts.solid({
        base: base,
        dark: dark,
        tone: 'critical',
        name: name,
        state: 'enabled'
      }),
      disabled: opts.solid({
        base: base,
        dark: dark,
        tone: 'critical',
        name: name,
        state: 'disabled'
      }),
      hovered: opts.solid({
        base: base,
        dark: dark,
        tone: 'critical',
        name: name,
        state: 'hovered'
      }),
      pressed: opts.solid({
        base: base,
        dark: dark,
        tone: 'critical',
        name: name,
        state: 'pressed'
      }),
      selected: opts.solid({
        base: base,
        dark: dark,
        tone: 'critical',
        name: name,
        state: 'selected'
      })
    }
  };
}

function createSpot(opts, base, dark) {
  return {
    gray: opts.spot({
      base: base,
      dark: dark,
      key: 'gray'
    }),
    blue: opts.spot({
      base: base,
      dark: dark,
      key: 'blue'
    }),
    purple: opts.spot({
      base: base,
      dark: dark,
      key: 'purple'
    }),
    magenta: opts.spot({
      base: base,
      dark: dark,
      key: 'magenta'
    }),
    red: opts.spot({
      base: base,
      dark: dark,
      key: 'red'
    }),
    orange: opts.spot({
      base: base,
      dark: dark,
      key: 'orange'
    }),
    yellow: opts.spot({
      base: base,
      dark: dark,
      key: 'yellow'
    }),
    green: opts.spot({
      base: base,
      dark: dark,
      key: 'green'
    }),
    cyan: opts.spot({
      base: base,
      dark: dark,
      key: 'cyan'
    })
  };
}

/**
 * @public
 */

function createColorTheme(partialOpts) {
  if (partialOpts === void 0) {
    partialOpts = {};
  }

  var builders = _extends({}, defaultOpts, partialOpts);

  return {
    light: _createColorScheme(builders, false),
    dark: _createColorScheme(builders, true)
  };
}
/**
 * @internal
 */

function _createColorScheme(opts, dark) {
  return {
    "default": _createColor(opts, dark, 'default'),
    transparent: _createColor(opts, dark, 'transparent'),
    primary: _createColor(opts, dark, 'primary'),
    positive: _createColor(opts, dark, 'positive'),
    caution: _createColor(opts, dark, 'caution'),
    critical: _createColor(opts, dark, 'critical')
  };
}
/**
 * @internal
 */


function _createColor(opts, dark, name) {
  var base = opts.base({
    dark: dark,
    name: name
  });
  var solid = createSolidTones(opts, base, dark, name);
  var muted = createMutedTones(opts, base, dark, name);
  return {
    base: base,
    button: createButtonModes(opts, base, dark, solid, muted),
    card: createCardStates(opts, base, dark, name, solid, muted),
    dark: dark,
    input: createInputModes(opts, base, dark, solid, muted),
    selectable: createSelectableTones(opts, base, dark, solid, muted),
    spot: createSpot(opts, base, dark),
    syntax: opts.syntax({
      base: base,
      dark: dark
    }),
    solid: solid,
    muted: muted
  };
}

function multiply(bg, fg) {
  var b = parseColor(bg);
  var s = parseColor(fg);
  var hex = rgbToHex(multiply$1(b, s));
  return hex;
}
function screen(bg, fg) {
  var b = parseColor(bg);
  var s = parseColor(fg);
  var hex = rgbToHex(screen$1(b, s));
  return hex;
}

var tones = {
  "default": color$1.hues.gray,
  transparent: color$1.hues.gray,
  primary: color$1.hues.blue,
  positive: color$1.hues.green,
  caution: color$1.hues.yellow,
  critical: color$1.hues.red
};
var NEUTRAL_TONES = ['default', 'transparent'];
var color = createColorTheme({
  base: function base(_ref) {
    var dark = _ref.dark,
        name = _ref.name;

    if (name === 'default') {
      var _skeletonFrom = dark ? color$1.hues.gray[900].hex : color$1.hues.gray[100].hex;

      return {
        fg: dark ? color$1.white.hex : color$1.black.hex,
        bg: dark ? color$1.black.hex : color$1.white.hex,
        border: color$1.hues.gray[dark ? 800 : 200].hex,
        focusRing: color$1.hues.blue[dark ? 500 : 500].hex,
        shadow: {
          outline: rgba(color$1.hues.gray[500].hex, 0.4),
          umbra: rgba(dark ? color$1.black.hex : color$1.hues.gray[500].hex, 0.2),
          penumbra: rgba(dark ? color$1.black.hex : color$1.hues.gray[500].hex, 0.14),
          ambient: rgba(dark ? color$1.black.hex : color$1.hues.gray[500].hex, 0.12)
        },
        skeleton: {
          from: _skeletonFrom,
          to: rgba(_skeletonFrom, 0.5)
        }
      };
    }

    if (name === 'transparent') {
      var _tints = tones["default"];
      var _skeletonFrom2 = _tints[dark ? 800 : 200].hex;
      return {
        fg: _tints[dark ? 100 : 900].hex,
        bg: _tints[dark ? 950 : 50].hex,
        border: _tints[dark ? 800 : 300].hex,
        focusRing: color$1.hues.blue[500].hex,
        shadow: {
          outline: rgba(_tints[500].hex, dark ? 0.2 : 0.4),
          umbra: rgba(dark ? color$1.black.hex : _tints[500].hex, 0.2),
          penumbra: rgba(dark ? color$1.black.hex : _tints[500].hex, 0.14),
          ambient: rgba(dark ? color$1.black.hex : _tints[500].hex, 0.12)
        },
        skeleton: {
          from: _skeletonFrom2,
          to: rgba(_skeletonFrom2, 0.5)
        }
      };
    }

    var tints = tones[name] || tones["default"];
    var skeletonFrom = tints[dark ? 800 : 200].hex;
    return {
      fg: tints[dark ? 100 : 900].hex,
      bg: tints[dark ? 950 : 50].hex,
      border: tints[dark ? 800 : 200].hex,
      focusRing: tints[500].hex,
      shadow: {
        outline: rgba(tints[500].hex, dark ? 0.2 : 0.4),
        umbra: rgba(dark ? color$1.black.hex : tints[500].hex, 0.2),
        penumbra: rgba(dark ? color$1.black.hex : tints[500].hex, 0.14),
        ambient: rgba(dark ? color$1.black.hex : tints[500].hex, 0.12)
      },
      skeleton: {
        from: skeletonFrom,
        to: rgba(skeletonFrom, 0.5)
      }
    };
  },
  solid: function solid(_ref2) {
    var base = _ref2.base,
        dark = _ref2.dark,
        name = _ref2.name,
        state = _ref2.state,
        tone = _ref2.tone;
    var mix = dark ? screen : multiply;
    var mix2 = dark ? multiply : screen;
    var defaultTints = tones[name] || tones["default"];
    var isNeutral = NEUTRAL_TONES.includes(name) && NEUTRAL_TONES.includes(tone);
    var tints = tones[tone === 'default' ? name : tone] || defaultTints;

    if (state === 'disabled') {
      tints = defaultTints;

      var _bg = mix(base.bg, tints[dark ? 800 : 200].hex);

      var _skeletonFrom3 = mix2(_bg, tints[dark ? 200 : 800].hex);

      return {
        bg: _bg,
        bg2: mix2(_bg, tints[dark ? 50 : 950].hex),
        border: mix(base.bg, tints[dark ? 800 : 200].hex),
        fg: mix(base.bg, dark ? color$1.black.hex : color$1.white.hex),
        muted: {
          fg: mix(base.bg, tints[dark ? 950 : 50].hex)
        },
        accent: {
          fg: mix(base.bg, tints[dark ? 950 : 50].hex)
        },
        link: {
          fg: mix(base.bg, tints[dark ? 950 : 50].hex)
        },
        code: {
          bg: _bg,
          fg: mix(base.bg, tints[dark ? 950 : 50].hex)
        },
        skeleton: {
          from: _skeletonFrom3,
          to: rgba(_skeletonFrom3, 0.5)
        }
      };
    }

    if (state === 'hovered') {
      var _bg2 = mix(base.bg, tints[dark ? 300 : 600].hex);

      var _skeletonFrom4 = mix2(_bg2, tints[dark ? 200 : 800].hex);

      return {
        bg: _bg2,
        bg2: mix2(_bg2, tints[dark ? 50 : 950].hex),
        border: mix(base.bg, tints[dark ? 300 : 600].hex),
        fg: mix(base.bg, dark ? color$1.black.hex : color$1.white.hex),
        muted: {
          fg: mix(base.bg, tints[dark ? 800 : 200].hex)
        },
        accent: {
          fg: mix2(_bg2, color$1.hues.red[dark ? 800 : 200].hex)
        },
        link: {
          fg: mix2(_bg2, color$1.hues.blue[dark ? 800 : 200].hex)
        },
        code: {
          bg: mix(_bg2, tints[dark ? 950 : 50].hex),
          fg: mix(base.bg, tints[dark ? 800 : 200].hex)
        },
        skeleton: {
          from: _skeletonFrom4,
          to: rgba(_skeletonFrom4, 0.5)
        }
      };
    }

    if (state === 'pressed') {
      var _bg3 = mix(base.bg, tints[dark ? 200 : 800].hex);

      var _skeletonFrom5 = mix2(_bg3, tints[dark ? 200 : 800].hex);

      return {
        bg: mix(base.bg, tints[dark ? 200 : 800].hex),
        bg2: mix2(_bg3, tints[dark ? 50 : 950].hex),
        border: mix(base.bg, tints[dark ? 200 : 800].hex),
        fg: mix(base.bg, dark ? color$1.black.hex : color$1.white.hex),
        muted: {
          fg: mix(base.bg, tints[dark ? 800 : 200].hex)
        },
        accent: {
          fg: mix2(_bg3, color$1.hues.red[dark ? 800 : 200].hex)
        },
        link: {
          fg: mix2(_bg3, color$1.hues.blue[dark ? 800 : 200].hex)
        },
        code: {
          bg: mix(_bg3, tints[dark ? 950 : 50].hex),
          fg: mix(base.bg, tints[dark ? 800 : 200].hex)
        },
        skeleton: {
          from: _skeletonFrom5,
          to: rgba(_skeletonFrom5, 0.5)
        }
      };
    }

    if (state === 'selected') {
      if (isNeutral) {
        tints = tones.primary;
      }

      var _bg4 = mix(base.bg, tints[dark ? 200 : 800].hex);

      var _skeletonFrom6 = mix2(_bg4, tints[dark ? 200 : 800].hex);

      return {
        bg: _bg4,
        bg2: mix2(_bg4, tints[dark ? 50 : 950].hex),
        border: mix(base.bg, tints[dark ? 200 : 800].hex),
        fg: mix(base.bg, dark ? color$1.black.hex : color$1.white.hex),
        muted: {
          fg: mix(base.bg, tints[dark ? 800 : 200].hex)
        },
        accent: {
          fg: mix2(_bg4, color$1.hues.red[dark ? 800 : 200].hex)
        },
        link: {
          fg: mix2(_bg4, color$1.hues.blue[dark ? 800 : 200].hex)
        },
        code: {
          bg: mix(_bg4, tints[dark ? 950 : 50].hex),
          fg: mix(base.bg, tints[dark ? 800 : 200].hex)
        },
        skeleton: {
          from: _skeletonFrom6,
          to: rgba(_skeletonFrom6, 0.5)
        }
      };
    } // state: "enabled" | unknown


    var bg = mix(base.bg, tints[dark ? 400 : 500].hex);
    var skeletonFrom = mix2(bg, tints[dark ? 200 : 800].hex);
    return {
      bg: bg,
      bg2: mix2(bg, tints[dark ? 50 : 950].hex),
      border: mix(base.bg, tints[dark ? 400 : 500].hex),
      fg: mix(base.bg, dark ? color$1.black.hex : color$1.white.hex),
      muted: {
        fg: mix(base.bg, tints[dark ? 900 : 100].hex)
      },
      accent: {
        fg: mix2(bg, color$1.hues.red[dark ? 900 : 100].hex)
      },
      link: {
        fg: mix2(bg, color$1.hues.blue[dark ? 900 : 100].hex)
      },
      code: {
        bg: mix(bg, tints[dark ? 950 : 50].hex),
        fg: mix(base.bg, tints[dark ? 900 : 100].hex)
      },
      skeleton: {
        from: skeletonFrom,
        to: rgba(skeletonFrom, 0.5)
      }
    };
  },
  muted: function muted(_ref3) {
    var base = _ref3.base,
        dark = _ref3.dark,
        name = _ref3.name,
        state = _ref3.state,
        tone = _ref3.tone;
    var mix = dark ? screen : multiply;
    var defaultTints = tones[name] || tones["default"];
    var isNeutral = NEUTRAL_TONES.includes(name) && NEUTRAL_TONES.includes(tone);
    var tints = tones[tone === 'default' ? name : tone] || defaultTints;

    if (state === 'disabled') {
      tints = defaultTints;
      var _bg5 = base.bg;

      var _skeletonFrom7 = mix(_bg5, tints[dark ? 900 : 100].hex);

      return {
        bg: _bg5,
        bg2: mix(_bg5, tints[dark ? 950 : 50].hex),
        border: mix(_bg5, tints[dark ? 950 : 50].hex),
        fg: mix(_bg5, tints[dark ? 800 : 200].hex),
        muted: {
          fg: mix(_bg5, tints[dark ? 900 : 100].hex)
        },
        accent: {
          fg: mix(_bg5, tints[dark ? 900 : 100].hex)
        },
        link: {
          fg: mix(_bg5, tints[dark ? 900 : 100].hex)
        },
        code: {
          bg: _bg5,
          fg: mix(_bg5, tints[dark ? 900 : 100].hex)
        },
        skeleton: {
          from: rgba(_skeletonFrom7, 0.5),
          to: rgba(_skeletonFrom7, 0.25)
        }
      };
    }

    if (state === 'hovered') {
      // if (isNeutral) {
      //   tints = tones.primary
      // }
      var _bg6 = mix(base.bg, tints[dark ? 950 : 50].hex);

      var _skeletonFrom8 = mix(_bg6, tints[dark ? 900 : 100].hex);

      return {
        bg: _bg6,
        bg2: mix(_bg6, tints[dark ? 950 : 50].hex),
        border: mix(_bg6, tints[dark ? 900 : 100].hex),
        fg: mix(base.bg, tints[dark ? 200 : 800].hex),
        muted: {
          fg: mix(base.bg, tints[dark ? 400 : 600].hex)
        },
        accent: {
          fg: mix(base.bg, color$1.hues.red[dark ? 400 : 500].hex)
        },
        link: {
          fg: mix(base.bg, color$1.hues.blue[dark ? 400 : 600].hex)
        },
        code: {
          bg: mix(_bg6, tints[dark ? 950 : 50].hex),
          fg: mix(base.bg, tints[dark ? 400 : 600].hex)
        },
        skeleton: {
          from: _skeletonFrom8,
          to: rgba(_skeletonFrom8, 0.5)
        }
      };
    }

    if (state === 'pressed') {
      if (isNeutral) {
        tints = tones.primary;
      }

      var _bg7 = mix(base.bg, tints[dark ? 900 : 100].hex);

      var _skeletonFrom9 = mix(_bg7, tints[dark ? 900 : 100].hex);

      return {
        bg: _bg7,
        bg2: mix(_bg7, tints[dark ? 950 : 50].hex),
        border: mix(_bg7, tints[dark ? 900 : 100].hex),
        fg: mix(base.bg, tints[dark ? 200 : 800].hex),
        muted: {
          fg: mix(base.bg, tints[dark ? 400 : 600].hex)
        },
        accent: {
          fg: mix(_bg7, color$1.hues.red[dark ? 400 : 500].hex)
        },
        link: {
          fg: mix(_bg7, color$1.hues.blue[dark ? 400 : 600].hex)
        },
        code: {
          bg: mix(_bg7, tints[dark ? 950 : 50].hex),
          fg: mix(base.bg, tints[dark ? 400 : 600].hex)
        },
        skeleton: {
          from: _skeletonFrom9,
          to: rgba(_skeletonFrom9, 0.5)
        }
      };
    }

    if (state === 'selected') {
      if (isNeutral) {
        tints = tones.primary;
      }

      var _bg8 = mix(base.bg, tints[dark ? 900 : 100].hex);

      var _skeletonFrom10 = mix(_bg8, tints[dark ? 900 : 100].hex);

      return {
        bg: _bg8,
        bg2: mix(_bg8, tints[dark ? 950 : 50].hex),
        border: mix(_bg8, tints[dark ? 900 : 100].hex),
        fg: mix(base.bg, tints[dark ? 200 : 800].hex),
        muted: {
          fg: mix(base.bg, tints[dark ? 400 : 600].hex)
        },
        accent: {
          fg: mix(_bg8, color$1.hues.red[dark ? 400 : 500].hex)
        },
        link: {
          fg: mix(_bg8, color$1.hues.blue[dark ? 400 : 600].hex)
        },
        code: {
          bg: mix(_bg8, tints[dark ? 950 : 50].hex),
          fg: mix(base.bg, tints[dark ? 400 : 600].hex)
        },
        skeleton: {
          from: _skeletonFrom10,
          to: rgba(_skeletonFrom10, 0.5)
        }
      };
    }

    var bg = base.bg;
    var skeletonFrom = mix(bg, tints[dark ? 900 : 100].hex);
    return {
      bg: bg,
      bg2: mix(bg, tints[dark ? 950 : 50].hex),
      border: mix(bg, tints[dark ? 900 : 100].hex),
      fg: mix(base.bg, tints[dark ? 300 : 700].hex),
      muted: {
        fg: mix(base.bg, tints[dark ? 400 : 600].hex)
      },
      accent: {
        fg: mix(base.bg, color$1.hues.red[dark ? 400 : 500].hex)
      },
      link: {
        fg: mix(base.bg, color$1.hues.blue[dark ? 400 : 600].hex)
      },
      code: {
        bg: mix(base.bg, tints[dark ? 950 : 50].hex),
        fg: mix(base.bg, tints[dark ? 400 : 600].hex)
      },
      skeleton: {
        from: skeletonFrom,
        to: rgba(skeletonFrom, 0.5)
      }
    };
  },
  button: function button(_ref4) {
    var base = _ref4.base,
        mode = _ref4.mode,
        muted = _ref4.muted,
        solid = _ref4.solid;

    if (mode === 'bleed') {
      return {
        enabled: _extends({}, muted.enabled, {
          border: muted.enabled.bg
        }),
        hovered: _extends({}, muted.hovered, {
          border: muted.hovered.bg
        }),
        pressed: _extends({}, muted.pressed, {
          border: muted.pressed.bg
        }),
        selected: _extends({}, muted.selected, {
          border: muted.selected.bg
        }),
        disabled: _extends({}, muted.disabled, {
          border: muted.disabled.bg
        })
      };
    }

    if (mode === 'ghost') {
      return _extends({}, solid, {
        enabled: _extends({}, muted.enabled, {
          border: base.border
        }),
        disabled: muted.disabled
      });
    }

    return solid;
  },
  card: function card(_ref5) {
    var base = _ref5.base,
        dark = _ref5.dark,
        muted = _ref5.muted,
        name = _ref5.name,
        solid = _ref5.solid,
        state = _ref5.state;

    if (state === 'hovered') {
      return muted[name].hovered;
    }

    if (state === 'disabled') {
      return muted[name].disabled;
    }

    var isNeutral = NEUTRAL_TONES.includes(name);
    var tints = tones[name] || tones["default"];
    var mix = dark ? screen : multiply;

    if (state === 'pressed') {
      if (isNeutral) {
        return muted.primary.pressed;
      }

      return muted[name].pressed;
    }

    if (state === 'selected') {
      if (isNeutral) {
        return solid.primary.enabled;
      }

      return solid[name].enabled;
    }

    var bg = base.bg;
    var skeletonFrom = mix(base.bg, tints[dark ? 900 : 100].hex);
    return {
      bg: bg,
      bg2: mix(bg, tints[dark ? 950 : 50].hex),
      fg: base.fg,
      border: base.border,
      muted: {
        fg: mix(base.bg, tints[dark ? 400 : 600].hex)
      },
      accent: {
        fg: mix(base.bg, color$1.hues.red[dark ? 400 : 500].hex)
      },
      link: {
        fg: mix(base.bg, color$1.hues.blue[dark ? 400 : 600].hex)
      },
      code: {
        bg: mix(base.bg, tints[dark ? 950 : 50].hex),
        fg: tints[dark ? 400 : 600].hex
      },
      skeleton: {
        from: skeletonFrom,
        to: rgba(skeletonFrom, 0.5)
      }
    };
  },
  input: function input(_ref6) {
    var base = _ref6.base,
        dark = _ref6.dark,
        mode = _ref6.mode,
        state = _ref6.state;
    var mix = dark ? screen : multiply;

    if (mode === 'invalid') {
      var tints = tones.critical;
      return {
        bg: mix(base.bg, tints[dark ? 950 : 50].hex),
        fg: mix(base.bg, tints[dark ? 400 : 600].hex),
        border: mix(base.bg, tints[dark ? 800 : 200].hex),
        placeholder: mix(base.bg, tints[dark ? 600 : 400].hex)
      };
    }

    if (state === 'hovered') {
      return {
        bg: base.bg,
        fg: base.fg,
        border: mix(base.bg, color$1.hues.gray[dark ? 700 : 300].hex),
        placeholder: mix(base.bg, color$1.hues.gray[dark ? 600 : 400].hex)
      };
    }

    if (state === 'disabled') {
      return {
        bg: mix(base.bg, color$1.hues.gray[dark ? 950 : 50].hex),
        fg: mix(base.bg, color$1.hues.gray[dark ? 700 : 300].hex),
        border: mix(base.bg, color$1.hues.gray[dark ? 900 : 100].hex),
        placeholder: mix(base.bg, color$1.hues.gray[dark ? 800 : 200].hex)
      };
    }

    if (state === 'readOnly') {
      return {
        bg: mix(base.bg, color$1.hues.gray[dark ? 950 : 50].hex),
        fg: mix(base.bg, color$1.hues.gray[dark ? 200 : 800].hex),
        border: mix(base.bg, color$1.hues.gray[dark ? 800 : 200].hex),
        placeholder: mix(base.bg, color$1.hues.gray[dark ? 600 : 400].hex)
      };
    }

    return {
      bg: base.bg,
      fg: base.fg,
      border: base.border,
      placeholder: mix(base.bg, color$1.hues.gray[dark ? 600 : 400].hex)
    };
  },
  selectable: function selectable(_ref7) {
    var base = _ref7.base,
        muted = _ref7.muted,
        tone = _ref7.tone,
        solid = _ref7.solid,
        state = _ref7.state;

    if (state === 'enabled') {
      return _extends({}, muted[tone].enabled, {
        bg: base.bg
      });
    }

    if (state === 'pressed') {
      if (tone === 'default') {
        return muted.primary.pressed;
      }

      return muted[tone].pressed;
    }

    if (state === 'selected') {
      if (tone === 'default') {
        return solid.primary.enabled;
      }

      return solid[tone].enabled;
    }

    if (state === 'disabled') {
      return _extends({}, muted[tone].disabled, {
        bg: base.bg
      });
    }

    return muted[tone][state];
  },
  spot: function spot(_ref8) {
    var base = _ref8.base,
        dark = _ref8.dark,
        key = _ref8.key;
    var mix = dark ? screen : multiply;
    return mix(base.bg, color$1.hues[key][dark ? 400 : 500].hex);
  },
  syntax: function syntax(_ref9) {
    var base = _ref9.base,
        dark = _ref9.dark;
    var mix = dark ? screen : multiply;
    var mainShade = dark ? 400 : 600;
    var secondaryShade = dark ? 600 : 400;
    return {
      atrule: mix(base.bg, color$1.hues.purple[mainShade].hex),
      attrName: mix(base.bg, color$1.hues.green[mainShade].hex),
      attrValue: mix(base.bg, color$1.hues.yellow[mainShade].hex),
      attribute: mix(base.bg, color$1.hues.yellow[mainShade].hex),
      "boolean": mix(base.bg, color$1.hues.purple[mainShade].hex),
      builtin: mix(base.bg, color$1.hues.purple[mainShade].hex),
      cdata: mix(base.bg, color$1.hues.yellow[mainShade].hex),
      "char": mix(base.bg, color$1.hues.yellow[mainShade].hex),
      "class": mix(base.bg, color$1.hues.orange[mainShade].hex),
      className: mix(base.bg, color$1.hues.cyan[mainShade].hex),
      comment: mix(base.bg, color$1.hues.gray[secondaryShade].hex),
      constant: mix(base.bg, color$1.hues.purple[mainShade].hex),
      deleted: mix(base.bg, color$1.hues.red[mainShade].hex),
      doctype: mix(base.bg, color$1.hues.gray[secondaryShade].hex),
      entity: mix(base.bg, color$1.hues.red[mainShade].hex),
      "function": mix(base.bg, color$1.hues.green[mainShade].hex),
      hexcode: mix(base.bg, color$1.hues.blue[mainShade].hex),
      id: mix(base.bg, color$1.hues.purple[mainShade].hex),
      important: mix(base.bg, color$1.hues.purple[mainShade].hex),
      inserted: mix(base.bg, color$1.hues.yellow[mainShade].hex),
      keyword: mix(base.bg, color$1.hues.magenta[mainShade].hex),
      number: mix(base.bg, color$1.hues.purple[mainShade].hex),
      operator: mix(base.bg, color$1.hues.magenta[mainShade].hex),
      prolog: mix(base.bg, color$1.hues.gray[secondaryShade].hex),
      property: mix(base.bg, color$1.hues.blue[mainShade].hex),
      pseudoClass: mix(base.bg, color$1.hues.yellow[mainShade].hex),
      pseudoElement: mix(base.bg, color$1.hues.yellow[mainShade].hex),
      punctuation: mix(base.bg, color$1.hues.gray[mainShade].hex),
      regex: mix(base.bg, color$1.hues.blue[mainShade].hex),
      selector: mix(base.bg, color$1.hues.red[mainShade].hex),
      string: mix(base.bg, color$1.hues.yellow[mainShade].hex),
      symbol: mix(base.bg, color$1.hues.purple[mainShade].hex),
      tag: mix(base.bg, color$1.hues.red[mainShade].hex),
      unit: mix(base.bg, color$1.hues.orange[mainShade].hex),
      url: mix(base.bg, color$1.hues.red[mainShade].hex),
      variable: mix(base.bg, color$1.hues.red[mainShade].hex)
    };
  }
});

var fonts = {
  code: {
    family: '-apple-system-ui-monospace, "SF Mono", Menlo, Monaco, Consolas, monospace',
    horizontalOffset: 0.075,
    weights: {
      regular: 400,
      medium: 500,
      semibold: 600,
      bold: 700
    },
    sizes: [{
      ascenderHeight: 3,
      descenderHeight: 3,
      fontSize: 10,
      iconSize: 17,
      lineHeight: 13,
      letterSpacing: 0
    }, {
      ascenderHeight: 4,
      descenderHeight: 4,
      fontSize: 13,
      iconSize: 21,
      lineHeight: 17,
      letterSpacing: 0
    }, {
      ascenderHeight: 5,
      descenderHeight: 5,
      fontSize: 16,
      iconSize: 25,
      lineHeight: 21,
      letterSpacing: 0
    }, {
      ascenderHeight: 6,
      descenderHeight: 6,
      fontSize: 19,
      iconSize: 29,
      lineHeight: 25,
      letterSpacing: 0
    }, {
      ascenderHeight: 7,
      descenderHeight: 7,
      fontSize: 22,
      iconSize: 33,
      lineHeight: 29,
      letterSpacing: 0
    }]
  },
  heading: {
    family: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", "Liberation Sans", Helvetica, Arial, system-ui, sans-serif',
    horizontalOffset: 0.075,
    weights: {
      regular: 700,
      medium: 800,
      semibold: 900,
      bold: 900
    },
    sizes: [{
      ascenderHeight: 4,
      descenderHeight: 4,
      fontSize: 12,
      iconSize: 17,
      lineHeight: 17,
      letterSpacing: 0
    }, {
      ascenderHeight: 5,
      descenderHeight: 5,
      fontSize: 16,
      iconSize: 25,
      lineHeight: 21,
      letterSpacing: 0
    }, {
      ascenderHeight: 6,
      descenderHeight: 6,
      fontSize: 21,
      iconSize: 33,
      lineHeight: 27,
      letterSpacing: 0
    }, {
      ascenderHeight: 7,
      descenderHeight: 7,
      fontSize: 27,
      iconSize: 41,
      lineHeight: 33,
      letterSpacing: 0
    }, {
      ascenderHeight: 9,
      descenderHeight: 7,
      fontSize: 33,
      iconSize: 49,
      lineHeight: 39,
      letterSpacing: 0
    }, {
      ascenderHeight: 10,
      descenderHeight: 8,
      fontSize: 38,
      iconSize: 53,
      lineHeight: 45,
      letterSpacing: 0
    }]
  },
  label: {
    family: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", "Liberation Sans", system-ui, sans-serif',
    horizontalOffset: 0.075,
    weights: {
      regular: 600,
      medium: 700,
      semibold: 800,
      bold: 900
    },
    sizes: [{
      ascenderHeight: 2,
      descenderHeight: 2,
      fontSize: 9.8,
      iconSize: 15,
      lineHeight: 11,
      letterSpacing: 0.5
    }, {
      ascenderHeight: 2,
      descenderHeight: 2,
      fontSize: 11.25,
      iconSize: 17,
      lineHeight: 12,
      letterSpacing: 0.5
    }, {
      ascenderHeight: 2,
      descenderHeight: 2,
      fontSize: 12.75,
      iconSize: 19,
      lineHeight: 13,
      letterSpacing: 0.5
    }, {
      ascenderHeight: 2,
      descenderHeight: 2,
      fontSize: 14,
      iconSize: 21,
      lineHeight: 14,
      letterSpacing: 0.5
    }, {
      ascenderHeight: 2,
      descenderHeight: 2,
      fontSize: 15.5,
      iconSize: 23,
      lineHeight: 15,
      letterSpacing: 0.5
    }]
  },
  text: {
    family: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", "Liberation Sans", Helvetica, Arial, system-ui, sans-serif',
    horizontalOffset: 0.075,
    weights: {
      regular: 400,
      medium: 500,
      semibold: 600,
      bold: 700
    },
    sizes: [{
      ascenderHeight: 3,
      descenderHeight: 3,
      fontSize: 10,
      iconSize: 17,
      lineHeight: 13,
      letterSpacing: 0
    }, {
      ascenderHeight: 4,
      descenderHeight: 4,
      fontSize: 13,
      iconSize: 21,
      lineHeight: 17,
      letterSpacing: 0
    }, {
      ascenderHeight: 5,
      descenderHeight: 5,
      fontSize: 16,
      iconSize: 25,
      lineHeight: 21,
      letterSpacing: 0
    }, {
      ascenderHeight: 6,
      descenderHeight: 6,
      fontSize: 19,
      iconSize: 29,
      lineHeight: 25,
      letterSpacing: 0
    }, {
      ascenderHeight: 7,
      descenderHeight: 7,
      fontSize: 22,
      iconSize: 33,
      lineHeight: 29,
      letterSpacing: 0
    }]
  }
};

/**
 * @public
 */

var studioTheme = {
  avatar: {
    sizes: [{
      distance: -3,
      size: 25
    }, {
      distance: -6,
      size: 35
    }, {
      distance: -9,
      size: 55
    }]
  },
  button: {
    textWeight: 'medium'
  },
  color: color,
  container: [320, 640, 960, 1280, 1600, 1920],
  focusRing: {
    offset: 1,
    width: 2
  },
  fonts: fonts,
  media: [360, 600, 900, 1200, 1800, 2400],
  radius: [0, 1, 3, 6, 9, 12, 21],
  shadows: [null, {
    umbra: [0, 0, 0, 0],
    penumbra: [0, 0, 0, 0],
    ambient: [0, 0, 0, 0]
  }, {
    umbra: [0, 3, 5, -1],
    penumbra: [0, 6, 10, 0],
    ambient: [0, 1, 18, 0]
  }, {
    umbra: [0, 7, 8, -4],
    penumbra: [0, 12, 17, 2],
    ambient: [0, 5, 22, 4]
  }, {
    umbra: [0, 9, 11, -5],
    penumbra: [0, 18, 28, 2],
    ambient: [0, 7, 34, 6]
  }, {
    umbra: [0, 11, 15, -7],
    penumbra: [0, 24, 38, 3],
    ambient: [0, 9, 46, 8]
  }],
  space: [0, 4, 8, 12, 20, 32, 52, 84, 136, 220],
  input: {
    checkbox: {
      size: 17
    },
    radio: {
      size: 17,
      markSize: 9
    },
    "switch": {
      width: 33,
      height: 17,
      padding: 4,
      transitionDurationMs: 150,
      transitionTimingFunction: 'ease-out'
    },
    border: {
      width: 1
    }
  } // styles: {
  //   button: {
  //     root: {
  //       transition: 'background-color 100ms,border-color 100ms,color 100ms',
  //     },
  //   },
  //   card: {
  //     root: {
  //       transition: 'background-color 100ms,border-color 100ms,color 100ms',
  //     },
  //   },
  // },

};

var DEFAULT_THEME_LAYER = {
  dialog: {
    zOffset: 600
  },
  popover: {
    zOffset: 400
  },
  tooltip: {
    zOffset: 200
  }
};

/**
 * Gets the global scope instance in a given environment.
 *
 * The strategy is to return the most modern, and if not, the most common:
 * - The `globalThis` variable is the modern approach to accessing the global scope
 * - The `window` variable is the global scope in a web browser
 * - The `self` variable is the global scope in workers and others
 * - The `global` variable is the global scope in Node.js
 */
function getGlobalScope() {
  if (typeof globalThis !== 'undefined') return globalThis;
  if (typeof window !== 'undefined') return window;
  if (typeof self !== 'undefined') return self;
  if (typeof global !== 'undefined') return global;
  throw new Error('@sanity/ui: could not locate global scope');
}

var globalScope = getGlobalScope();

var key$7 = Symbol["for"]('@sanity/ui/context/theme');
globalScope[key$7] = globalScope[key$7] || /*#__PURE__*/React.createContext(null);
/**
 * @internal
 */

var ThemeContext = globalScope[key$7];

var _excluded$H = ["color", "layer"];
/**
 * @public
 */

function ThemeProvider(props) {
  var parentTheme = React.useContext(ThemeContext);
  var children = props.children,
      _props$scheme = props.scheme,
      scheme = _props$scheme === void 0 ? (parentTheme == null ? void 0 : parentTheme.scheme) || 'light' : _props$scheme,
      _props$theme = props.theme,
      themeProp = _props$theme === void 0 ? (parentTheme == null ? void 0 : parentTheme.theme) || null : _props$theme,
      _props$tone = props.tone,
      tone = _props$tone === void 0 ? (parentTheme == null ? void 0 : parentTheme.tone) || 'default' : _props$tone;
  var theme = React.useMemo(function () {
    if (!themeProp) return null;

    var rootColor = themeProp.color,
        rootLayer = themeProp.layer,
        restTheme = _objectWithoutPropertiesLoose(themeProp, _excluded$H);

    var colorScheme = rootColor[scheme] || rootColor.light;
    var color = colorScheme[tone] || colorScheme["default"];
    var layer = rootLayer || DEFAULT_THEME_LAYER;
    return {
      sanity: _extends({}, restTheme, {
        color: color,
        layer: layer
      })
    };
  }, [scheme, themeProp, tone]);
  var value = React.useMemo(function () {
    return themeProp && {
      version: 0.0,
      theme: themeProp,
      scheme: scheme,
      tone: tone
    };
  }, [themeProp, scheme, tone]);

  if (!theme) {
    return /*#__PURE__*/React__default["default"].createElement("pre", null, "ThemeProvider: no \"theme\" property provided");
  }

  return /*#__PURE__*/React__default["default"].createElement(ThemeContext.Provider, {
    value: value
  }, /*#__PURE__*/React__default["default"].createElement(styled.ThemeProvider, {
    theme: theme
  }, children));
}

function isRecord(value) {
  return Boolean(value && typeof value === 'object');
}

/**
 * @public
 */

function useRootTheme() {
  var value = React.useContext(ThemeContext);

  if (!value) {
    throw new Error('useRootTheme(): missing context value');
  } // NOTE: This check is for future-compatiblity
  // - If the value is not an object, itâs not compatible with the current version
  // - If the value is an object, but doesnât have `version: 0.0`, itâs not compatible with the current version


  if (!isRecord(value) || value.version !== 0.0) {
    throw new Error('useRootTheme(): the context value is not compatible');
  }

  return value;
}

/**
 * @public
 */

function ThemeColorProvider(props) {
  var children = props.children,
      scheme = props.scheme,
      tone = props.tone;
  var root = useRootTheme();
  return /*#__PURE__*/React__default["default"].createElement(ThemeProvider, {
    scheme: scheme || root.scheme,
    theme: root.theme,
    tone: tone
  }, children);
}

/**
 * @public
 */

function useTheme() {
  return styled.useTheme();
}

var MEDIA_MANAGER_CACHE = new WeakMap();

function _getMediaQuery(media, index) {
  if (index === 0) {
    return "screen and (max-width: " + (media[index] - 1) + "px)";
  }

  if (index === media.length) {
    return "screen and (min-width: " + media[index - 1] + "px)";
  }

  return "screen and (min-width: " + media[index - 1] + "px) and (max-width: " + (media[index] - 1) + "px)";
}

function _createMediaManager(media) {
  var mediaLen = media.length;
  var sizes = [];

  if (typeof window !== 'undefined') {
    for (var index = mediaLen; index > -1; index -= 1) {
      var mediaQuery = _getMediaQuery(media, index);

      sizes.push({
        index: index,
        mq: window.matchMedia(mediaQuery)
      });
    }
  }

  var getCurrentIndex = function getCurrentIndex() {
    for (var _iterator = _createForOfIteratorHelperLoose(sizes), _step; !(_step = _iterator()).done;) {
      var _step$value = _step.value,
          _index = _step$value.index,
          mq = _step$value.mq;
      if (mq.matches) return _index;
    }

    return 0;
  };

  var subscribe = function subscribe(subscriber) {
    var disposeFns = [];

    var _loop = function _loop() {
      var _step2$value = _step2.value,
          index = _step2$value.index,
          mq = _step2$value.mq;

      var handleChange = function handleChange() {
        if (mq.matches) subscriber(index);
      };

      if (mq.addEventListener) {
        mq.addEventListener('change', handleChange);
      } else {
        mq.addListener(handleChange);
      }

      disposeFns.push(function () {
        if (mq.removeEventListener) {
          mq.removeEventListener('change', handleChange);
        } else {
          mq.removeListener(handleChange);
        }
      });
    };

    for (var _iterator2 = _createForOfIteratorHelperLoose(sizes), _step2; !(_step2 = _iterator2()).done;) {
      _loop();
    }

    return function () {
      for (var _iterator3 = _createForOfIteratorHelperLoose(disposeFns), _step3; !(_step3 = _iterator3()).done;) {
        var disposeFn = _step3.value;
        disposeFn();
      }
    };
  };

  return {
    getCurrentIndex: getCurrentIndex,
    subscribe: subscribe
  };
}
/**
 * @internal
 */


function _getMediaManager(media) {
  var manager = MEDIA_MANAGER_CACHE.get(media);

  if (!manager) {
    manager = _createMediaManager(media);
    MEDIA_MANAGER_CACHE.set(media, manager);
  }

  return manager;
}

/**
 * This API might change. DO NOT USE IN PRODUCTION.
 * @beta
 */

function useMediaIndex() {
  var theme = useTheme();
  var media = theme.sanity.media;
  var manager = React.useMemo(function () {
    return _getMediaManager(media);
  }, [media]);

  var _useState = React.useState(manager.getCurrentIndex),
      index = _useState[0],
      setIndex = _useState[1];

  React.useEffect(function () {
    return manager.subscribe(setIndex);
  }, [manager]);
  return index;
}

/**
 * @public
 */

function usePrefersDark() {
  var mq = React.useMemo(function () {
    if (typeof window === 'undefined') return undefined;
    return window.matchMedia('(prefers-color-scheme: dark)');
  }, []);

  var _useState = React.useState((mq == null ? void 0 : mq.matches) || false),
      dark = _useState[0],
      setDark = _useState[1];

  React.useEffect(function () {
    if (!mq) return undefined;
    setDark(mq.matches);

    var handleChange = function handleChange() {
      return setDark(mq.matches);
    };

    mq.addEventListener('change', handleChange);
    return function () {
      return mq.removeEventListener('change', handleChange);
    };
  }, [mq]);
  return dark;
}

/**
 * @beta
 */

var useIsomorphicEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;

/**
 * @beta
 */

function useForwardedRef(ref) {
  var innerRef = React.useRef(null);
  useIsomorphicEffect(function () {
    if (!ref) return;

    if (typeof ref === 'function') {
      ref(innerRef.current);
    } else {
      ref.current = innerRef.current;
    }
  });
  return innerRef;
}

/**
 * @beta
 */

function useCustomValidity(ref, customValidity) {
  React.useEffect(function () {
    if (ref.current) {
      ref.current.setCustomValidity(customValidity || '');
    }
  }, [customValidity, ref]);
}

/**
 * @internal
 */

function fillCSSObject(propKeys, value) {
  return propKeys.reduce(function (obj, propKey) {
    obj[propKey] = value;
    return obj;
  }, {});
}
/**
 * @public
 */

function rem(pixelValue) {
  if (pixelValue === 0) return 0;
  return pixelValue / 16 + "rem";
}
/**
 * @internal
 */

function responsive(media, values, callback) {
  var statements = values.map(callback);
  return statements.map(function (statement, mediaIndex) {
    var _ref;

    if (mediaIndex === 0) return statement;
    return _ref = {}, _ref["@media screen and (min-width: " + media[mediaIndex - 1] + "px)"] = statement, _ref;
  });
}
/**
 * @internal
 */

function getResponsiveProp(val, defaultVal) {
  if (val === undefined) return defaultVal || EMPTY_ARRAY;
  return Array.isArray(val) ? val : [val];
}
/**
 * @internal
 */

function getResponsiveSpace(theme, props, spaceIndexes) {
  if (spaceIndexes === void 0) {
    spaceIndexes = EMPTY_ARRAY;
  }

  if (!Array.isArray(spaceIndexes)) {
    throw new Error('the property must be array of numbers');
  }

  if (spaceIndexes.length === 0) {
    return null;
  }

  return responsive(theme.sanity.media, spaceIndexes, function (spaceIndex) {
    return fillCSSObject(props, rem(theme.sanity.space[spaceIndex]));
  });
}

/**
 * A utility function getting responsive font styles.
 * @internal
 */

function responsiveFont(fontKey, props) {
  var $size = props.$size,
      $weight = props.$weight,
      theme = props.theme;
  var _theme$sanity = theme.sanity,
      fonts = _theme$sanity.fonts,
      media = _theme$sanity.media;
  var _fonts$fontKey = fonts[fontKey],
      family = _fonts$fontKey.family,
      sizes = _fonts$fontKey.sizes,
      weights = _fonts$fontKey.weights,
      horizontalOffset = _fonts$fontKey.horizontalOffset;
  var fontWeight = $weight && weights[$weight] || weights.regular; // @todo: make this configurable

  var defaultSize = sizes[2];
  var base = {
    position: 'relative',
    fontFamily: family,
    fontWeight: fontWeight,
    padding: '1px',
    margin: 0,
    '&:before': {
      content: '""',
      display: 'block',
      height: 0
    },
    '&:after': {
      content: '""',
      display: 'block',
      height: 0
    },
    '& > code, & > span': {
      display: 'block'
    },
    '&:not([hidden])': {
      display: 'block'
    }
  };
  var resp = responsive(media, getResponsiveProp($size), function (sizeIndex) {
    return fontSize(sizes[sizeIndex] || defaultSize, horizontalOffset);
  });
  return [base].concat(resp);
}
function fontSize(size, horizontalOffset) {
  var ascenderHeight = size.ascenderHeight,
      descenderHeight = size.descenderHeight,
      fontSize = size.fontSize,
      iconSize = size.iconSize,
      letterSpacing = size.letterSpacing,
      lineHeight = size.lineHeight;
  var negHeight = ascenderHeight + descenderHeight;
  var capHeight = lineHeight - negHeight;
  var iconOffset = (capHeight - iconSize) / 2;
  var customIconSize = Math.floor(fontSize * 1.125 / 2) * 2 + 1;
  var customIconOffset = (capHeight - customIconSize) / 2;
  return {
    fontSize: rem(fontSize),
    lineHeight: "calc(" + lineHeight + " / " + fontSize + ")",
    letterSpacing: rem(letterSpacing),
    transform: "translateY(" + rem(descenderHeight) + ")",
    '&:before': {
      marginTop: "calc(" + rem(0 - negHeight) + " - 1px)"
    },
    '&:after': {
      marginBottom: '-1px'
    },
    '& > code, & > span': {
      margin: horizontalOffset ? "0 calc(" + rem(0 - horizontalOffset * fontSize) + " - 1px)" : '0 -1px'
    },
    '& svg:not([data-sanity-icon])': {
      fontSize: "calc(" + customIconSize + " / 16 * 1rem)",
      margin: [// top & bottom
      rem(customIconOffset), // left & right
      horizontalOffset ? "calc(" + rem(customIconOffset) + " + " + rem(horizontalOffset * fontSize) + ")" : rem(customIconOffset)].join(' ')
    },
    '& [data-sanity-icon]': {
      fontSize: "calc(" + iconSize + " / 16 * 1rem)",
      margin: [// top & bottom
      rem(iconOffset), // left & right
      horizontalOffset ? "calc(" + rem(iconOffset) + " + " + rem(horizontalOffset * fontSize) + ")" : rem(iconOffset)].join(' ')
    }
  };
}

/**
 * Get responsive CSS for the `code` font style.
 * @internal
 */

function responsiveCodeFontStyle(props) {
  return responsiveFont('code', props);
}

/**
 * Get responsive CSS for the `heading` font style.
 * @internal
 */

function responsiveHeadingFont(props) {
  return responsiveFont('heading', props);
}

/**
 * Get responsive CSS for the `label` font style.
 * @internal
 */

function responsiveLabelFont(props) {
  return responsiveFont('label', props);
}

/**
 * Get responsive text align styles.
 * @internal
 */

function responsiveTextAlignStyle(props) {
  var theme = props.theme;
  return responsive(theme.sanity.media, getResponsiveProp(props.$align), function (textAlign) {
    return {
      textAlign: textAlign
    };
  });
}

/**
 * Get responsive CSS for the `text` font style.
 * @internal
 */

function responsiveTextFont(props) {
  return responsiveFont('text', props);
}

/**
 * This API might change. DO NOT USE IN PRODUCTION.
 * @beta
 */

function useResponsiveProp(val, defaultVal) {
  return React.useMemo(function () {
    return getResponsiveProp(val, defaultVal);
  }, [defaultVal, val]);
}

var BORDER_VALUE = '1px solid var(--card-border-color)';
function responsiveBorderStyle() {
  return [border, borderTop, borderRight, borderBottom, borderLeft];
}

function border(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$border), function (value) {
    return value ? {
      '&&': {
        border: BORDER_VALUE
      }
    } : {
      '&&': {
        border: 0
      }
    };
  });
}

function borderTop(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$borderTop), function (value) {
    return value ? {
      '&&': {
        borderTop: BORDER_VALUE
      }
    } : {
      '&&': {
        borderTop: 0
      }
    };
  });
}

function borderRight(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$borderRight), function (value) {
    return value ? {
      '&&': {
        borderRight: BORDER_VALUE
      }
    } : {
      '&&': {
        borderRight: 0
      }
    };
  });
}

function borderBottom(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$borderBottom), function (value) {
    return value ? {
      '&&': {
        borderBottom: BORDER_VALUE
      }
    } : {
      '&&': {
        borderBottom: 0
      }
    };
  });
}

function borderLeft(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$borderLeft), function (value) {
    return value ? {
      '&&': {
        borderLeft: BORDER_VALUE
      }
    } : {
      '&&': {
        borderLeft: 0
      }
    };
  });
}

var BASE_STYLE$4 = {
  '&[data-as="ul"],&[data-as="ol"]': {
    listStyle: 'none'
  }
};
var BOX_SIZING = {
  content: 'content-box',
  border: 'border-box'
};
var BOX_HEIGHT = {
  stretch: 'stretch',
  fill: '100%'
};
function boxStyle() {
  return BASE_STYLE$4;
}
function responsiveBoxStyle() {
  return [responsiveBoxSizingStyle, responsiveBoxHeightStyle, responsiveBoxOverflowStyle, responsiveBoxDisplayStyle];
}

function responsiveBoxDisplayStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$display), function (display) {
    return {
      '&:not([hidden])': {
        display: display
      }
    };
  });
}

function responsiveBoxSizingStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$sizing), function (sizing) {
    return {
      boxSizing: BOX_SIZING[sizing]
    };
  });
}

function responsiveBoxHeightStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$height), function (height) {
    return {
      height: BOX_HEIGHT[height]
    };
  });
}

function responsiveBoxOverflowStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$overflow), function (overflow) {
    return {
      overflow: overflow
    };
  });
}

var BASE_STYLE$3 = {
  '&&:not([hidden])': {
    display: 'flex'
  }
};
function responsiveFlexStyle() {
  return [BASE_STYLE$3, responsiveFlexAlignStyle, responsiveFlexGapStyle, responsiveFlexWrapStyle, responsiveFlexJustifyStyle, responsiveFlexDirectionStyle];
}
function responsiveFlexAlignStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$align), function (align) {
    return {
      alignItems: align
    };
  });
}

function responsiveFlexGapStyle(props) {
  var theme = props.theme;
  var _theme$sanity = theme.sanity,
      media = _theme$sanity.media,
      space = _theme$sanity.space;
  return responsive(media, getResponsiveProp(props.$gap), function (gap) {
    return {
      gap: gap ? rem(space[gap]) : undefined
    };
  });
}

function responsiveFlexWrapStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$wrap), function (wrap) {
    return {
      flexWrap: wrap
    };
  });
}
function responsiveFlexJustifyStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$justify), function (justify) {
    return {
      justifyContent: justify
    };
  });
}
function responsiveFlexDirectionStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$direction), function (direction) {
    return {
      flexDirection: direction
    };
  });
}

var BASE_STYLE$2 = {
  minWidth: 0,
  minHeight: 0
};
function flexItemStyle() {
  return [BASE_STYLE$2, responsiveFlexItemStyle];
}
function responsiveFlexItemStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$flex), function (flex) {
    return {
      flex: flex
    };
  });
}

function focusRingBorderStyle(border) {
  return "inset 0 0 0 " + border.width + "px " + border.color;
}
function focusRingStyle(opts) {
  var base = opts.base,
      border = opts.border,
      focusRing = opts.focusRing;
  var focusRingOutsetWidth = focusRing.offset + focusRing.width;
  var focusRingInsetWidth = 0 - focusRing.offset;
  var bgColor = base ? base.bg : 'var(--card-bg-color)';
  return [focusRingInsetWidth > 0 && "inset 0 0 0 " + focusRingInsetWidth + "px var(--card-focus-ring-color)", border && focusRingBorderStyle(border), focusRingInsetWidth < 0 && "0 0 0 " + (0 - focusRingInsetWidth) + "px " + bgColor, focusRingOutsetWidth > 0 && "0 0 0 " + focusRingOutsetWidth + "px var(--card-focus-ring-color)"].filter(Boolean).join(',');
}

var GRID_CSS = {
  '&&:not([hidden])': {
    display: 'grid'
  },
  '&[data-as="ul"],&[data-as="ol"]': {
    listStyle: 'none'
  }
};
var GRID_AUTO_COLUMS = {
  auto: 'auto',
  min: 'min-content',
  max: 'max-content',
  fr: 'minmax(0, 1fr)'
};
var GRID_AUTO_ROWS = {
  auto: 'auto',
  min: 'min-content',
  max: 'max-content',
  fr: 'minmax(0, 1fr)'
};
function responsiveGridStyle() {
  return [GRID_CSS, responsiveGridAutoFlowStyle, responsiveGridAutoRowsStyle, responsiveGridAutoColsStyle, responsiveGridColumnsStyle, responsiveGridRowsStyle, responsiveGridGapStyle, responsiveGridGapXStyle, responsiveGridGapYStyle];
}

function responsiveGridAutoFlowStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$autoFlow), function (autoFlow) {
    return {
      gridAutoFlow: autoFlow
    };
  });
}

function responsiveGridAutoRowsStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$autoRows), function (autoRows) {
    return {
      gridAutoRows: autoRows && GRID_AUTO_ROWS[autoRows]
    };
  });
}

function responsiveGridAutoColsStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$autoCols), function (autoCols) {
    return {
      gridAutoColumns: autoCols && GRID_AUTO_COLUMS[autoCols]
    };
  });
}

function responsiveGridColumnsStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$columns), function (columns) {
    return {
      gridTemplateColumns: columns && "repeat(" + columns + ",minmax(0,1fr));"
    };
  });
}

function responsiveGridRowsStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$rows), function (rows) {
    return {
      gridTemplateRows: rows && "repeat(" + rows + ",minmax(0,1fr));"
    };
  });
}

function responsiveGridGapStyle(props) {
  var theme = props.theme;
  var _theme$sanity = theme.sanity,
      media = _theme$sanity.media,
      space = _theme$sanity.space;
  return responsive(media, getResponsiveProp(props.$gap), function (gap) {
    return {
      gridGap: gap ? rem(space[gap]) : undefined
    };
  });
}

function responsiveGridGapXStyle(props) {
  var theme = props.theme;
  var _theme$sanity2 = theme.sanity,
      media = _theme$sanity2.media,
      space = _theme$sanity2.space;
  return responsive(media, getResponsiveProp(props.$gapX), function (gapX) {
    return {
      columnGap: gapX ? rem(space[gapX]) : undefined
    };
  });
}

function responsiveGridGapYStyle(props) {
  var theme = props.theme;
  var _theme$sanity3 = theme.sanity,
      media = _theme$sanity3.media,
      space = _theme$sanity3.space;
  return responsive(media, getResponsiveProp(props.$gapY), function (gapY) {
    return {
      rowGap: gapY ? rem(space[gapY]) : undefined
    };
  });
}

function responsiveGridItemStyle() {
  return [responsiveGridItemRowStyle, responsiveGridItemRowStartStyle, responsiveGridItemRowEndStyle, responsiveGridItemColumnStyle, responsiveGridItemColumnStartStyle, responsiveGridItemColumnEndStyle];
}
var GRID_ITEM_ROW = {
  auto: 'auto',
  full: '1 / -1'
};
var GRID_ITEM_COLUMN = {
  auto: 'auto',
  full: '1 / -1'
};

function responsiveGridItemRowStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$row), function (row) {
    if (typeof row === 'number') {
      return {
        gridRow: "span " + row + " / span " + row
      };
    }

    return {
      gridRow: GRID_ITEM_ROW[row]
    };
  });
}

function responsiveGridItemRowStartStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$rowStart), function (rowStart) {
    return {
      gridRowStart: rowStart
    };
  });
}

function responsiveGridItemRowEndStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$rowEnd), function (rowEnd) {
    return {
      gridRowEnd: rowEnd
    };
  });
}

function responsiveGridItemColumnStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$column), function (column) {
    if (typeof column === 'number') {
      return {
        gridColumn: "span " + column + " / span " + column
      };
    }

    return {
      gridColumn: GRID_ITEM_COLUMN[column]
    };
  });
}

function responsiveGridItemColumnStartStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$columnStart), function (columnStart) {
    return {
      gridColumnStart: columnStart
    };
  });
}

function responsiveGridItemColumnEndStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$columnEnd), function (columnEnd) {
    return {
      gridColumnEnd: columnEnd
    };
  });
}

function responsiveInputPaddingStyle(props) {
  var $iconLeft = props.$iconLeft,
      $iconRight = props.$iconRight,
      theme = props.theme;
  var _theme$sanity = theme.sanity,
      fonts = _theme$sanity.fonts,
      media = _theme$sanity.media,
      spaceScale = _theme$sanity.space;
  var padding = getResponsiveProp(props.$padding, [0]);
  var space = getResponsiveProp(props.$space, [0]);
  var size = getResponsiveProp(props.$fontSize, [0]);
  var len = Math.max(padding.length, space.length, size.length);
  var _padding = [];
  var _space = [];
  var _size = [];

  for (var i = 0; i < len; i += 1) {
    _padding[i] = padding[i] === undefined ? _padding[i - 1] : padding[i];
    _space[i] = space[i] === undefined ? _space[i - 1] : space[i];
    _size[i] = size[i] === undefined ? _size[i - 1] : size[i];
  }

  return responsive(media, _padding, function (_, i) {
    var fontSize = fonts.text.sizes[_size[i]] || fonts.text.sizes[2];
    var emSize = fontSize.lineHeight - fontSize.ascenderHeight - fontSize.descenderHeight;
    var p = spaceScale[_padding[i]];
    var s = spaceScale[_space[i]];
    var styles = {
      paddingTop: rem(p - fontSize.ascenderHeight),
      paddingRight: rem(p),
      paddingBottom: rem(p - fontSize.descenderHeight),
      paddingLeft: rem(p)
    };
    if ($iconRight) styles.paddingRight = rem(p + emSize + s);
    if ($iconLeft) styles.paddingLeft = rem(p + emSize + s);
    return styles;
  });
}
function responsiveInputPaddingIconRightStyle(props) {
  return responsiveInputPaddingStyle(_extends({}, props, {
    $iconRight: true
  }));
}

var _templateObject$D, _templateObject2$n, _templateObject3$e;
var ROOT_STYLE = styled.css(_templateObject$D || (_templateObject$D = _taggedTemplateLiteralLoose(["\n  &:not([hidden]) {\n    display: flex;\n  }\n\n  align-items: center;\n"])));
function textInputRootStyle() {
  return ROOT_STYLE;
}
function textInputBaseStyle(props) {
  var theme = props.theme,
      $weight = props.$weight;
  var font = theme.sanity.fonts.text;
  var color = theme.sanity.color.input;
  return styled.css(_templateObject2$n || (_templateObject2$n = _taggedTemplateLiteralLoose(["\n    --input-fg-color: ", ";\n    --input-placeholder-color: ", ";\n\n    appearance: none;\n    background: none;\n    border: 0;\n    border-radius: 0;\n    outline: none;\n    width: 100%;\n    box-sizing: border-box;\n    font-family: ", ";\n    font-weight: ", ";\n    margin: 0;\n    position: relative;\n    z-index: 1;\n    display: block;\n    color: var(--input-fg-color);\n\n    /* NOTE: This is a hack to disable Chrome\u2019s autofill styles */\n    &:-webkit-autofill,\n    &:-webkit-autofill:hover,\n    &:-webkit-autofill:focus,\n    &:-webkit-autofill:active {\n      -webkit-text-fill-color: var(--input-fg-color) !important;\n      transition: background-color 5000s;\n      transition-delay: 86400s /* 24h */;\n    }\n\n    &::placeholder {\n      color: var(--input-placeholder-color);\n    }\n\n    /* &:is(textarea) */\n    &[data-as='textarea'] {\n      resize: none;\n    }\n\n    /* enabled */\n    &:not(:invalid):not(:disabled):not(:read-only) {\n      --input-fg-color: ", ";\n      --input-placeholder-color: ", ";\n    }\n\n    /* disabled */\n    &:not(:invalid):disabled {\n      --input-fg-color: ", ";\n      --input-placeholder-color: ", ";\n    }\n\n    /* invalid */\n    &:invalid {\n      --input-fg-color: ", ";\n      --input-placeholder-color: ", ";\n    }\n\n    /* readOnly */\n    &:read-only {\n      --input-fg-color: ", ";\n      --input-placeholder-color: ", ";\n    }\n  "])), color["default"].enabled.fg, color["default"].enabled.placeholder, font.family, $weight && font.weights[$weight] || font.weights.regular, color["default"].enabled.fg, color["default"].enabled.placeholder, color["default"].disabled.fg, color["default"].disabled.placeholder, color.invalid.enabled.fg, color.invalid.enabled.placeholder, color["default"].readOnly.fg, color["default"].readOnly.placeholder);
}
function textInputFontSizeStyle(props) {
  var theme = props.theme;
  var _theme$sanity = theme.sanity,
      fonts = _theme$sanity.fonts,
      media = _theme$sanity.media;
  return responsive(media, getResponsiveProp(props.$fontSize, [2]), function (sizeIndex) {
    var size = fonts.text.sizes[sizeIndex] || fonts.text.sizes[2];
    return {
      fontSize: rem(size.fontSize),
      lineHeight: size.lineHeight / size.fontSize
    };
  });
}
function textInputRepresentationStyle(props) {
  var $border = props.$border,
      $hasPrefix = props.$hasPrefix,
      $hasSuffix = props.$hasSuffix,
      theme = props.theme;
  var _theme$sanity2 = theme.sanity,
      focusRing = _theme$sanity2.focusRing,
      input = _theme$sanity2.input;
  var color = theme.sanity.color.input;
  return styled.css(_templateObject3$e || (_templateObject3$e = _taggedTemplateLiteralLoose(["\n    --card-bg-color: ", ";\n    --card-fg-color: ", ";\n    --input-box-shadow: none;\n\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    display: block;\n    pointer-events: none;\n    z-index: 0;\n    background-color: var(--card-bg-color);\n    box-shadow: var(--input-box-shadow);\n\n    border-top-left-radius: ", ";\n    border-bottom-left-radius: ", ";\n    border-top-right-radius: ", ";\n    border-bottom-right-radius: ", ";\n\n    /* enabled */\n    *:not(:disabled) + && {\n      --input-box-shadow: ", ";\n    }\n\n    /* invalid */\n    *:not(:disabled):invalid + && {\n      --card-bg-color: ", ";\n      --card-fg-color: ", ";\n      --input-box-shadow: ", ";\n    }\n\n    /* focused */\n    *:not(:disabled):focus + && {\n      --input-box-shadow: ", ";\n    }\n\n    /* disabled */\n    *:disabled + && {\n      --card-bg-color: ", ";\n      --card-fg-color: ", ";\n      --input-box-shadow: ", ";\n    }\n\n    /* hovered */\n    @media (hover: hover) {\n      *:not(:disabled):not(:read-only):not(:invalid):hover + && {\n        --card-bg-color: ", ";\n        --card-fg-color: ", ";\n      }\n\n      *:not(:disabled):not(:read-only):not(:invalid):not(:focus):hover + && {\n        --input-box-shadow: ", ";\n      }\n    }\n\n    /* readOnly */\n    *:read-only + && {\n      --card-bg-color: ", ";\n      --card-fg-color: ", ";\n    }\n  "])), color["default"].enabled.bg, color["default"].enabled.fg, $hasPrefix ? 0 : undefined, $hasPrefix ? 0 : undefined, $hasSuffix ? 0 : undefined, $hasSuffix ? 0 : undefined, $border ? focusRingBorderStyle({
    color: color["default"].enabled.border,
    width: input.border.width
  }) : undefined, color.invalid.enabled.bg, color.invalid.enabled.fg, $border ? focusRingBorderStyle({
    color: color.invalid.enabled.border,
    width: input.border.width
  }) : 'none', focusRingStyle({
    border: $border ? {
      color: color["default"].enabled.border,
      width: input.border.width
    } : undefined,
    focusRing: focusRing
  }), color["default"].disabled.bg, color["default"].disabled.fg, $border ? focusRingBorderStyle({
    color: color["default"].disabled.border,
    width: input.border.width
  }) : 'none', color["default"].hovered.bg, color["default"].hovered.fg, $border ? focusRingBorderStyle({
    color: color["default"].hovered.border,
    width: input.border.width
  }) : 'none', color["default"].readOnly.bg, color["default"].readOnly.fg);
}

function responsiveMarginStyle(props) {
  var theme = props.theme;
  return [getResponsiveSpace(theme, ['margin'], getResponsiveProp(props.$margin)), getResponsiveSpace(theme, ['marginLeft', 'marginRight'], getResponsiveProp(props.$marginX)), getResponsiveSpace(theme, ['marginTop', 'marginBottom'], getResponsiveProp(props.$marginY)), getResponsiveSpace(theme, ['marginTop'], getResponsiveProp(props.$marginTop)), getResponsiveSpace(theme, ['marginRight'], getResponsiveProp(props.$marginRight)), getResponsiveSpace(theme, ['marginBottom'], getResponsiveProp(props.$marginBottom)), getResponsiveSpace(theme, ['marginLeft'], getResponsiveProp(props.$marginLeft))].filter(Boolean);
}

function responsivePaddingStyle(props) {
  var theme = props.theme;
  return [getResponsiveSpace(theme, ['padding'], getResponsiveProp(props.$padding)), getResponsiveSpace(theme, ['paddingLeft', 'paddingRight'], getResponsiveProp(props.$paddingX)), getResponsiveSpace(theme, ['paddingTop', 'paddingBottom'], getResponsiveProp(props.$paddingY)), getResponsiveSpace(theme, ['paddingTop'], getResponsiveProp(props.$paddingTop)), getResponsiveSpace(theme, ['paddingRight'], getResponsiveProp(props.$paddingRight)), getResponsiveSpace(theme, ['paddingBottom'], getResponsiveProp(props.$paddingBottom)), getResponsiveSpace(theme, ['paddingLeft'], getResponsiveProp(props.$paddingLeft))].filter(Boolean);
}

function responsiveRadiusStyle(props) {
  var theme = props.theme;
  var _theme$sanity = theme.sanity,
      media = _theme$sanity.media,
      radius = _theme$sanity.radius;
  return responsive(media, getResponsiveProp(props.$radius), function (radiusIndex) {
    return {
      borderRadius: rem(radius[radiusIndex])
    };
  });
}

function toBoxShadow(shadow, color) {
  return shadow.map(rem).join(' ') + " " + color;
}

function shadowStyle(shadow) {
  if (!shadow) return EMPTY_RECORD$1;
  var outline = "0 0 0 " + rem(1) + " var(--card-shadow-outline-color)";
  var umbra = toBoxShadow(shadow.umbra, 'var(--card-shadow-umbra-color)');
  var penumbra = toBoxShadow(shadow.penumbra, 'var(--card-shadow-penumbra-color)');
  var ambient = toBoxShadow(shadow.ambient, 'var(--card-shadow-ambient-color)');
  return {
    boxShadow: outline + ", " + umbra + ", " + penumbra + ", " + ambient
  };
}

function responsiveShadowStyle(props) {
  var theme = props.theme;
  var _theme$sanity = theme.sanity,
      media = _theme$sanity.media,
      shadows = _theme$sanity.shadows;
  return responsive(media, getResponsiveProp(props.$shadow), function (shadow) {
    return shadowStyle(shadows[shadow]);
  });
}

var _templateObject$C, _templateObject2$m, _templateObject3$d;
function textBaseStyle(props) {
  var $accent = props.$accent,
      $muted = props.$muted,
      theme = props.theme;
  var weights = theme.sanity.fonts.text.weights;
  return styled.css(_templateObject$C || (_templateObject$C = _taggedTemplateLiteralLoose(["\n    color: var(--card-fg-color);\n\n    ", "\n\n    ", "\n\n    & code {\n      font-family: ", ";\n      border-radius: 1px;\n      background-color: var(--card-code-bg-color);\n      color: var(--card-code-fg-color);\n    }\n\n    & a {\n      text-decoration: none;\n      border-radius: 1px;\n      color: var(--card-link-color);\n      outline: none;\n\n      @media (hover: hover) {\n        &:hover {\n          text-decoration: underline;\n        }\n      }\n\n      &:focus {\n        box-shadow: 0 0 0 1px var(--card-bg-color), 0 0 0 3px var(--card-focus-ring-color);\n      }\n\n      &:focus:not(:focus-visible) {\n        box-shadow: none;\n      }\n    }\n\n    & strong {\n      font-weight: ", ";\n    }\n\n    & [data-sanity-icon] {\n      vertical-align: baseline;\n    }\n  "])), $accent && styled.css(_templateObject2$m || (_templateObject2$m = _taggedTemplateLiteralLoose(["\n      color: var(--card-accent-fg-color);\n    "]))), $muted && styled.css(_templateObject3$d || (_templateObject3$d = _taggedTemplateLiteralLoose(["\n      color: var(--card-muted-fg-color);\n    "]))), theme.sanity.fonts.code.family, weights.bold);
}

var _excluded$G = ["accent", "align", "children", "muted", "size", "textOverflow", "weight"];

var _templateObject$B;
var Root$E = styled__default["default"].div(responsiveTextFont, responsiveTextAlignStyle, textBaseStyle);
var SpanWithTextOverflow$2 = styled__default["default"].span(_templateObject$B || (_templateObject$B = _taggedTemplateLiteralLoose(["\n  display: block;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n"])));
/**
 * @public
 */

var Text = /*#__PURE__*/React.forwardRef(function Text(props, ref) {
  var _props$accent = props.accent,
      accent = _props$accent === void 0 ? false : _props$accent,
      align = props.align,
      childrenProp = props.children,
      _props$muted = props.muted,
      muted = _props$muted === void 0 ? false : _props$muted,
      _props$size = props.size,
      size = _props$size === void 0 ? 2 : _props$size,
      textOverflow = props.textOverflow,
      weight = props.weight,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$G);

  var children = childrenProp;

  if (textOverflow === 'ellipsis') {
    children = /*#__PURE__*/React__default["default"].createElement(SpanWithTextOverflow$2, null, children);
  }

  return /*#__PURE__*/React__default["default"].createElement(Root$E, _extends({
    "data-ui": "Text"
  }, restProps, {
    "$accent": accent,
    "$align": align,
    "$muted": muted,
    ref: ref,
    "$size": size,
    "$weight": weight
  }), /*#__PURE__*/React__default["default"].createElement("span", null, children));
});

var avatarStyle = {
  root: avatarRootStyle,
  arrow: avatarArrowStyle,
  bgStroke: avatarBgStrokeStyle,
  stroke: avatarStrokeStyle,
  initials: avatarInitialsStyle
};

function avatarArrowStyle() {
  return {
    position: 'absolute',
    boxSizing: 'border-box',
    zIndex: 0,
    opacity: 0,
    transition: 'all 0.2s linear',
    transform: 'rotate(-90deg) translate3d(0, 6px, 0)',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    '& > svg': {
      width: '11px',
      height: '7px',
      position: 'absolute',
      top: '-5px',
      left: '50%',
      transform: 'translateX(-6px)',
      '&:not([hidden])': {
        display: 'block'
      }
    },
    "[data-arrow-position='inside'] > &": {
      transform: 'rotate(-90deg) translate3d(0, 6px, 0)',
      opacity: 0
    },
    "[data-arrow-position='top'] > &": {
      opacity: 1,
      transform: 'rotate(0deg)'
    },
    "[data-arrow-position='bottom'] > &": {
      opacity: 1,
      transform: 'rotate(-180deg)'
    }
  };
}

function avatarRootStyle(props) {
  var $color = props.$color,
      theme = props.theme;
  var focusRing = theme.sanity.focusRing;
  return {
    backgroundColor: $color,
    position: 'relative',
    boxSizing: 'border-box',
    userSelect: 'none',
    boxShadow: '0 0 0 1px var(--card-bg-color)',
    '&[data-status="inactive"]': {
      opacity: 0.5
    },
    '&>svg': {
      '&:not([hidden])': {
        display: 'block'
      }
    },

    /* &:is(button) */
    '&[data-as="button"]': {
      '-webkit-font-smoothing': 'inherit',
      appearance: 'none',
      margin: 0,
      padding: 0,
      border: 0,
      font: 'inherit',
      color: 'inherit',
      outline: 'none',
      '&:focus': {
        boxShadow: focusRingStyle({
          focusRing: focusRing
        })
      },
      '&:focus:not(:focus-visible)': {
        boxShadow: 'none'
      }
    }
  };
}
function responsiveAvatarSizeStyle(props) {
  var theme = props.theme;
  var _theme$sanity = theme.sanity,
      avatar = _theme$sanity.avatar,
      media = _theme$sanity.media;
  return responsive(media, props.$size, function (size) {
    var avatarSize = avatar.sizes[size] || avatar.sizes[0];
    return {
      width: rem(avatarSize.size),
      height: rem(avatarSize.size),
      borderRadius: rem(avatarSize.size / 2),
      '&>svg': {
        width: rem(avatarSize.size),
        height: rem(avatarSize.size),
        borderRadius: rem(avatarSize.size / 2)
      }
    };
  });
}
function avatarInitialsStyle(props) {
  var theme = props.theme;
  var base = theme.sanity.color.base;
  return {
    width: '100%',
    height: '100%',
    color: base.fg,
    alignItems: 'center',
    justifyContent: 'center',
    textTransform: 'uppercase',
    textAlign: 'center',
    borderRadius: '50%',
    '&:not([hidden])': {
      display: 'flex'
    }
  };
}

function avatarBgStrokeStyle() {
  return {
    strokeWidth: '4px',
    stroke: 'var(--card-bg-color)'
  };
}

function avatarStrokeStyle() {
  return {
    strokeWidth: '3px',
    '[data-status="editing"] &': {
      strokeSasharray: '2 4',
      strokeLinecap: 'round'
    }
  };
}

var _excluded$F = ["as", "color", "src", "title", "initials", "onImageLoadError", "arrowPosition", "animateArrowFrom", "status", "size"];
var Root$D = styled__default["default"].div(responsiveAvatarSizeStyle, avatarStyle.root);
var Arrow = styled__default["default"].div(avatarStyle.arrow);
var BgStroke = styled__default["default"].ellipse(avatarStyle.bgStroke);
var Stroke = styled__default["default"].ellipse(avatarStyle.stroke);
var Initials = styled__default["default"].div(avatarStyle.initials);
/**
 * @public
 */

var Avatar = /*#__PURE__*/React.forwardRef(function Avatar(props, ref) {
  var asProp = props.as,
      _props$color = props.color,
      colorKey = _props$color === void 0 ? 'gray' : _props$color,
      src = props.src,
      title = props.title,
      initials = props.initials,
      onImageLoadError = props.onImageLoadError,
      arrowPositionProp = props.arrowPosition,
      animateArrowFrom = props.animateArrowFrom,
      _props$status = props.status,
      status = _props$status === void 0 ? 'online' : _props$status,
      sizeProp = props.size,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$F);

  var as = ReactIs__default["default"].isValidElementType(asProp) ? asProp : 'div';
  var size = useResponsiveProp(sizeProp, [0]);
  var theme = useTheme();
  var color = theme.sanity.color.spot[colorKey] || theme.sanity.color.spot.gray; // @todo: remove this

  var avatarSize = theme.sanity.avatar.sizes[size[0]] || theme.sanity.avatar.sizes[0];
  var _sizeRem = avatarSize.size;

  var _radius = _sizeRem / 2;

  var elementId = autoId.useId() || '';

  var _useState = React.useState(animateArrowFrom || arrowPositionProp || 'inside'),
      arrowPosition = _useState[0],
      setArrowPosition = _useState[1];

  var _useState2 = React.useState(false),
      imageFailed = _useState2[0],
      setImageFailed = _useState2[1];

  var imageId = "avatar-image-" + elementId;
  React.useEffect(function () {
    if (arrowPosition === arrowPositionProp) return undefined; // Start animation in the next frame

    var raf = requestAnimationFrame(function () {
      return setArrowPosition(arrowPositionProp);
    });
    return function () {
      return cancelAnimationFrame(raf);
    };
  }, [arrowPosition, arrowPositionProp]);
  React.useEffect(function () {
    if (src) setImageFailed(false);
  }, [src]);
  var handleImageError = React.useCallback(function () {
    setImageFailed(true);

    if (onImageLoadError) {
      onImageLoadError(new Error('Avatar: the image failed to load'));
    }
  }, [onImageLoadError]);
  return /*#__PURE__*/React__default["default"].createElement(Root$D, _extends({
    as: as,
    "data-as": typeof as === 'string' ? as : undefined,
    "data-ui": "Avatar"
  }, restProps, {
    "$size": size,
    "$color": color,
    "aria-label": title,
    "data-arrow-position": arrowPosition,
    "data-status": status,
    ref: ref,
    title: title
  }), /*#__PURE__*/React__default["default"].createElement(Arrow, null, /*#__PURE__*/React__default["default"].createElement("svg", {
    width: "11",
    height: "7",
    viewBox: "0 0 11 7",
    fill: "none"
  }, /*#__PURE__*/React__default["default"].createElement("path", {
    d: "M6.67948 1.50115L11 7L0 7L4.32052 1.50115C4.92109 0.736796 6.07891 0.736795 6.67948 1.50115Z",
    fill: color
  }))), !imageFailed && src && /*#__PURE__*/React__default["default"].createElement("svg", {
    viewBox: "0 0 " + _sizeRem + " " + _sizeRem,
    fill: "none"
  }, /*#__PURE__*/React__default["default"].createElement("defs", null, /*#__PURE__*/React__default["default"].createElement("pattern", {
    id: imageId,
    patternContentUnits: "objectBoundingBox",
    width: "1",
    height: "1"
  }, /*#__PURE__*/React__default["default"].createElement("image", {
    href: src,
    width: "1",
    height: "1",
    onError: handleImageError
  }))), /*#__PURE__*/React__default["default"].createElement("circle", {
    cx: _radius,
    cy: _radius,
    r: _radius,
    fill: "url(#" + imageId + ")"
  }), /*#__PURE__*/React__default["default"].createElement(BgStroke, {
    cx: _radius,
    cy: _radius,
    rx: _radius,
    ry: _radius,
    vectorEffect: "non-scaling-stroke"
  }), /*#__PURE__*/React__default["default"].createElement(Stroke, {
    cx: _radius,
    cy: _radius,
    rx: _radius,
    ry: _radius,
    stroke: color,
    vectorEffect: "non-scaling-stroke"
  })), (imageFailed || !src) && initials && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(Initials, null, /*#__PURE__*/React__default["default"].createElement(Text, {
    as: "span",
    size: size.map(function (s) {
      return s === 0 ? 0 : s + 1;
    })
  }, /*#__PURE__*/React__default["default"].createElement("strong", null, initials)))));
});

var _templateObject$A;

function responsiveAvatarCounterSizeStyle(props) {
  var theme = props.theme;
  var _theme$sanity = theme.sanity,
      avatar = _theme$sanity.avatar,
      media = _theme$sanity.media;
  return responsive(media, props.$size, function (size) {
    var avatarSize = avatar.sizes[size];
    if (!avatarSize) return EMPTY_RECORD$1;
    return {
      borderRadius: rem(avatarSize.size / 2),
      minWidth: rem(avatarSize.size),
      height: rem(avatarSize.size)
    };
  });
}

function avatarCounterBaseStyle(props) {
  var theme = props.theme;
  return styled.css(_templateObject$A || (_templateObject$A = _taggedTemplateLiteralLoose(["\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    user-select: none;\n    color: inherit;\n    color: var(--card-fg-color);\n    background: var(--card-bg-color);\n    box-shadow: 0 0 0 1px var(--card-bg-color), inset 0 0 0 1.5px var(--card-hairline-hard-color);\n    padding: 0 ", ";\n\n    &:not([hidden]) {\n      display: flex;\n    }\n  "])), rem(theme.sanity.space[2]));
}

var Root$C = styled__default["default"].div(responsiveAvatarCounterSizeStyle, avatarCounterBaseStyle);
/**
 * @public
 */

var AvatarCounter = /*#__PURE__*/React.forwardRef(function AvatarCounter(props, ref) {
  var count = props.count,
      _props$size = props.size,
      sizeProp = _props$size === void 0 ? 0 : _props$size,
      tone = props.tone;
  var size = useResponsiveProp(sizeProp, [0]);
  return /*#__PURE__*/React__default["default"].createElement(Root$C, {
    "$size": size,
    "data-tone": tone,
    ref: ref
  }, /*#__PURE__*/React__default["default"].createElement(Text, {
    as: "span",
    size: size.map(function (s) {
      return s === 0 ? 0 : s + 1;
    })
  }, /*#__PURE__*/React__default["default"].createElement("strong", null, count)));
});

function childrenToElementArray(children) {
  var childrenArray = Array.isArray(children) ? children : [children];
  return childrenArray.filter(function (node) {
    return ReactIs.isElement(node) || ReactIs.isFragment(node) || typeof node === 'string';
  });
}

var _excluded$E = ["children", "maxLength", "size", "tone"];

var _templateObject$z;
var BASE_STYLES = styled.css(_templateObject$z || (_templateObject$z = _taggedTemplateLiteralLoose(["\n  white-space: nowrap;\n\n  & > div {\n    vertical-align: top;\n\n    &:not([hidden]) {\n      display: inline-block;\n    }\n  }\n"])));

function avatarStackStyle() {
  return BASE_STYLES;
}

function responsiveAvatarStackSizeStyle(props) {
  var theme = props.theme;
  var _theme$sanity = theme.sanity,
      avatar = _theme$sanity.avatar,
      media = _theme$sanity.media;
  return responsive(media, getResponsiveProp(props.size), function (size) {
    var avatarSize = avatar.sizes[size];
    if (!avatarSize) return EMPTY_RECORD$1;
    return {
      '& > div + div': {
        marginLeft: rem(avatarSize.distance)
      }
    };
  });
}

var Root$B = styled__default["default"].div(responsiveAvatarStackSizeStyle, avatarStackStyle);
/**
 * @public
 */

var AvatarStack = /*#__PURE__*/React.forwardRef(function AvatarStack(props, ref) {
  var childrenProp = props.children,
      _props$maxLength = props.maxLength,
      maxLengthProp = _props$maxLength === void 0 ? 4 : _props$maxLength,
      _props$size = props.size,
      size = _props$size === void 0 ? 0 : _props$size,
      tone = props.tone,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$E);

  var maxLength = Math.max(maxLengthProp, 0);
  var children = childrenToElementArray(childrenProp).filter(function (child) {
    return typeof child !== 'string';
  });
  var len = children.length;
  var visibleCount = maxLength - 1;
  var extraCount = len - visibleCount;
  var visibleChildren = extraCount > 1 ? children.slice(extraCount, len) : children;
  return /*#__PURE__*/React__default["default"].createElement(Root$B, _extends({
    "data-ui": "AvatarStack"
  }, restProps, {
    ref: ref,
    size: size
  }), len === 0 && /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement(AvatarCounter, {
    count: len,
    tone: tone
  })), len !== 0 && extraCount > 1 && /*#__PURE__*/React__default["default"].createElement("div", null, /*#__PURE__*/React__default["default"].createElement(AvatarCounter, {
    count: extraCount,
    size: size,
    tone: tone
  })), visibleChildren.map(function (child, childIndex) {
    return /*#__PURE__*/React__default["default"].createElement("div", {
      key: String(childIndex)
    }, /*#__PURE__*/React.cloneElement(child, {
      size: size,
      tone: tone
    }));
  }));
});

var _excluded$D = ["as", "column", "columnStart", "columnEnd", "display", "flex", "height", "margin", "marginX", "marginY", "marginTop", "marginRight", "marginBottom", "marginLeft", "overflow", "padding", "paddingX", "paddingY", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "row", "rowStart", "rowEnd", "sizing"];
var Root$A = styled__default["default"].div(boxStyle, flexItemStyle, responsiveBoxStyle, responsiveGridItemStyle, responsiveMarginStyle, responsivePaddingStyle);
/**
 * @public
 */

var Box = /*#__PURE__*/React.forwardRef(function Box(props, ref) {
  var _props$as = props.as,
      asProp = _props$as === void 0 ? 'div' : _props$as,
      column = props.column,
      columnStart = props.columnStart,
      columnEnd = props.columnEnd,
      _props$display = props.display,
      display = _props$display === void 0 ? 'block' : _props$display,
      flex = props.flex,
      height = props.height,
      _props$margin = props.margin,
      margin = _props$margin === void 0 ? 0 : _props$margin,
      marginX = props.marginX,
      marginY = props.marginY,
      marginTop = props.marginTop,
      marginRight = props.marginRight,
      marginBottom = props.marginBottom,
      marginLeft = props.marginLeft,
      overflow = props.overflow,
      _props$padding = props.padding,
      padding = _props$padding === void 0 ? 0 : _props$padding,
      paddingX = props.paddingX,
      paddingY = props.paddingY,
      paddingTop = props.paddingTop,
      paddingRight = props.paddingRight,
      paddingBottom = props.paddingBottom,
      paddingLeft = props.paddingLeft,
      row = props.row,
      rowStart = props.rowStart,
      rowEnd = props.rowEnd,
      sizing = props.sizing,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$D);

  return /*#__PURE__*/React__default["default"].createElement(Root$A, _extends({
    "data-as": asProp,
    "data-ui": "Box"
  }, restProps, {
    "$column": column,
    "$columnStart": columnStart,
    "$columnEnd": columnEnd,
    "$display": display,
    "$flex": flex,
    "$height": height,
    "$margin": margin,
    "$marginX": marginX,
    "$marginY": marginY,
    "$marginTop": marginTop,
    "$marginRight": marginRight,
    "$marginBottom": marginBottom,
    "$marginLeft": marginLeft,
    "$overflow": overflow,
    "$padding": padding,
    "$paddingX": paddingX,
    "$paddingY": paddingY,
    "$paddingTop": paddingTop,
    "$paddingRight": paddingRight,
    "$paddingBottom": paddingBottom,
    "$paddingLeft": paddingLeft,
    "$row": row,
    "$rowStart": rowStart,
    "$rowEnd": rowEnd,
    "$sizing": sizing,
    as: asProp,
    ref: ref
  }), props.children);
});

var _templateObject$y, _templateObject2$l, _templateObject3$c;
function labelBaseStyle(props) {
  var $accent = props.$accent,
      $muted = props.$muted,
      theme = props.theme;
  var fonts = theme.sanity.fonts;
  return styled.css(_templateObject$y || (_templateObject$y = _taggedTemplateLiteralLoose(["\n    text-transform: uppercase;\n\n    ", "\n\n    ", "\n\n    & code {\n      font-family: ", ";\n      border-radius: 1px;\n    }\n\n    & a {\n      text-decoration: none;\n      border-radius: 1px;\n    }\n\n    & [data-sanity-icon] {\n      vertical-align: baseline;\n    }\n  "])), $accent && styled.css(_templateObject2$l || (_templateObject2$l = _taggedTemplateLiteralLoose(["\n      color: var(--card-accent-fg-color);\n    "]))), $muted && styled.css(_templateObject3$c || (_templateObject3$c = _taggedTemplateLiteralLoose(["\n      color: var(--card-muted-fg-color);\n    "]))), fonts.code.family);
}

var _excluded$C = ["accent", "align", "children", "muted", "size", "textOverflow", "weight"];

var _templateObject$x;
var Root$z = styled__default["default"].div(responsiveLabelFont, responsiveTextAlignStyle, labelBaseStyle);
var SpanWithTextOverflow$1 = styled__default["default"].span(_templateObject$x || (_templateObject$x = _taggedTemplateLiteralLoose(["\n  display: block;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n"])));
/**
 * @public
 */

var Label = /*#__PURE__*/React.forwardRef(function Label(props, ref) {
  var accent = props.accent,
      align = props.align,
      childrenProp = props.children,
      _props$muted = props.muted,
      muted = _props$muted === void 0 ? false : _props$muted,
      _props$size = props.size,
      size = _props$size === void 0 ? 2 : _props$size,
      textOverflow = props.textOverflow,
      weight = props.weight,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$C);

  var children = childrenProp;

  if (textOverflow === 'ellipsis') {
    children = /*#__PURE__*/React__default["default"].createElement(SpanWithTextOverflow$1, null, children);
  } else {
    children = /*#__PURE__*/React__default["default"].createElement("span", null, children);
  }

  return /*#__PURE__*/React__default["default"].createElement(Root$z, _extends({
    "data-ui": "Label"
  }, restProps, {
    "$accent": accent,
    "$align": align,
    "$muted": muted,
    "$size": size,
    "$weight": weight,
    ref: ref
  }), children);
});

function badgeStyle(props) {
  var $mode = props.$mode,
      $tone = props.$tone,
      theme = props.theme;
  var palette = theme.sanity.color[$mode === 'outline' ? 'muted' : 'solid'];
  var color = palette[$tone] || palette["default"];
  return {
    backgroundColor: color.enabled.bg,
    color: color.enabled.fg,
    boxShadow: "inset 0 0 0 1px " + color.enabled.border,
    cursor: 'default',
    '&:not([hidden])': {
      display: 'inline-block'
    }
  };
}

var _excluded$B = ["children", "fontSize", "mode", "padding", "radius", "tone"];
var Root$y = styled__default["default"](Box)(responsiveRadiusStyle, badgeStyle);
/**
 * @public
 */

var Badge = /*#__PURE__*/React.forwardRef(function Badge(props, ref) {
  var children = props.children,
      fontSize = props.fontSize,
      _props$mode = props.mode,
      mode = _props$mode === void 0 ? 'default' : _props$mode,
      _props$padding = props.padding,
      padding = _props$padding === void 0 ? 1 : _props$padding,
      _props$radius = props.radius,
      radius = _props$radius === void 0 ? 2 : _props$radius,
      _props$tone = props.tone,
      tone = _props$tone === void 0 ? 'default' : _props$tone,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$B);

  return /*#__PURE__*/React__default["default"].createElement(Root$y, _extends({
    "data-ui": "Badge"
  }, restProps, {
    "$mode": mode,
    "$tone": tone,
    "$radius": radius,
    padding: padding,
    ref: ref
  }), /*#__PURE__*/React__default["default"].createElement(Label, {
    size: fontSize
  }, children));
});

var _excluded$A = ["align", "as", "direction", "gap", "justify", "wrap"];
var Root$x = styled__default["default"](Box)(flexItemStyle, responsiveFlexStyle);
/**
 * @public
 */

var Flex = /*#__PURE__*/React.forwardRef(function Flex(props, ref) {
  var align = props.align,
      as = props.as,
      _props$direction = props.direction,
      direction = _props$direction === void 0 ? 'row' : _props$direction,
      gap = props.gap,
      justify = props.justify,
      wrap = props.wrap,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$A);

  return /*#__PURE__*/React__default["default"].createElement(Root$x, _extends({
    "data-ui": "Flex"
  }, restProps, {
    "$align": align,
    "$direction": direction,
    "$gap": gap,
    "$justify": justify,
    "$wrap": wrap,
    forwardedAs: as,
    ref: ref
  }));
});

var _templateObject$w, _templateObject2$k;
var rotate$1 = styled.keyframes(_templateObject$w || (_templateObject$w = _taggedTemplateLiteralLoose(["\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n"])));
var Root$w = styled__default["default"](Text)(_templateObject2$k || (_templateObject2$k = _taggedTemplateLiteralLoose(["\n  & > span > svg {\n    animation: ", " 500ms linear infinite;\n  }\n"])), rotate$1);
/**
 * @public
 */

var Spinner = /*#__PURE__*/React.forwardRef(function Spinner(props, ref) {
  return /*#__PURE__*/React__default["default"].createElement(Root$w, _extends({
    "data-ui": "Spinner"
  }, props, {
    ref: ref
  }), /*#__PURE__*/React__default["default"].createElement(icons.SpinnerIcon, null));
});

/**
 * @internal
 */
function _colorVarsStyle(base, color, checkered) {
  var _color$muted, _color$accent, _color$link, _color$code, _color$code2, _color$skeleton, _color$skeleton2, _color$link2;

  if (checkered === void 0) {
    checkered = false;
  }

  return {
    // Base
    // @todo: rename to "--base-"?
    '--card-shadow-outline-color': base.shadow.outline,
    '--card-shadow-umbra-color': base.shadow.umbra,
    '--card-shadow-penumbra-color': base.shadow.penumbra,
    '--card-shadow-ambient-color': base.shadow.ambient,
    '--card-focus-ring-color': base.focusRing,
    // Card
    '--card-bg-color': color.bg,
    '--card-bg-image': checkered ? "repeating-conic-gradient(" + color.bg + " 0% 25%, " + (color.bg2 || color.bg) + " 0% 50%)" : undefined,
    '--card-fg-color': color.fg,
    '--card-border-color': color.border,
    '--card-muted-fg-color': (_color$muted = color.muted) == null ? void 0 : _color$muted.fg,
    '--card-accent-fg-color': (_color$accent = color.accent) == null ? void 0 : _color$accent.fg,
    '--card-link-fg-color': (_color$link = color.link) == null ? void 0 : _color$link.fg,
    '--card-code-bg-color': (_color$code = color.code) == null ? void 0 : _color$code.bg,
    '--card-code-fg-color': (_color$code2 = color.code) == null ? void 0 : _color$code2.fg,
    '--card-skeleton-color-from': (_color$skeleton = color.skeleton) == null ? void 0 : _color$skeleton.from,
    '--card-skeleton-color-to': (_color$skeleton2 = color.skeleton) == null ? void 0 : _color$skeleton2.to,
    // @todo: deprecate
    '--card-link-color': (_color$link2 = color.link) == null ? void 0 : _color$link2.fg,
    '--card-hairline-soft-color': color.border,
    '--card-hairline-hard-color': color.border
  };
}

var _templateObject$v;
/**
 * @internal
 */

function buttonBaseStyles() {
  return styled.css(_templateObject$v || (_templateObject$v = _taggedTemplateLiteralLoose(["\n    -webkit-font-smoothing: inherit;\n    appearance: none;\n    display: inline-flex;\n    align-items: center;\n    font: inherit;\n    border: 0;\n    outline: none;\n    user-select: none;\n    text-decoration: none;\n    border: 0;\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n    white-space: nowrap;\n    text-align: left;\n    position: relative;\n\n    & > span {\n      display: block;\n      flex: 1;\n      min-width: 0;\n      border-radius: inherit;\n    }\n\n    &::-moz-focus-inner {\n      border: 0;\n      padding: 0;\n    }\n  "])));
}
var buttonTheme = {
  border: {
    width: 1
  }
};
/**
 * @internal
 */

function buttonColorStyles(props) {
  var _theme$sanity$styles, _theme$sanity$styles$;

  var $mode = props.$mode,
      theme = props.theme;
  var focusRing = theme.sanity.focusRing;
  var base = theme.sanity.color.base;
  var mode = theme.sanity.color.button[$mode] || theme.sanity.color.button["default"];
  var color = mode[props.$tone] || mode["default"];
  var border = {
    width: buttonTheme.border.width,
    color: 'var(--card-border-color)'
  };
  return [_colorVarsStyle(base, color.enabled), {
    backgroundColor: 'var(--card-bg-color)',
    color: 'var(--card-fg-color)',
    boxShadow: focusRingBorderStyle(border),
    '&:disabled, &[data-disabled="true"]': _colorVarsStyle(base, color.disabled),
    "&:not([data-disabled='true'])": {
      '&:focus': {
        boxShadow: focusRingStyle({
          base: base,
          border: border,
          focusRing: focusRing
        })
      },
      '&:focus:not(:focus-visible)': {
        boxShadow: focusRingBorderStyle(border)
      },
      '@media (hover: hover)': {
        '&:hover': _colorVarsStyle(base, color.hovered),
        '&:active': _colorVarsStyle(base, color.pressed)
      },
      '&[data-selected]': _colorVarsStyle(base, color.pressed)
    }
  }, (_theme$sanity$styles = theme.sanity.styles) == null ? void 0 : (_theme$sanity$styles$ = _theme$sanity$styles.button) == null ? void 0 : _theme$sanity$styles$.root].filter(Boolean);
}

var _excluded$z = ["children", "disabled", "fontSize", "icon", "iconRight", "justify", "loading", "mode", "padding", "paddingX", "paddingY", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight", "radius", "selected", "space", "text", "textAlign", "tone", "type"];

var _templateObject$u;
var Root$v = styled__default["default"].button(responsiveRadiusStyle, buttonBaseStyles, buttonColorStyles);
var LoadingBox = styled__default["default"].div(_templateObject$u || (_templateObject$u = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--card-bg-color);\n  border-radius: inherit;\n  z-index: 1;\n  box-shadow: inherit;\n"])));
/**
 * @public
 */

var Button = /*#__PURE__*/React.forwardRef(function Button(props, ref) {
  var children = props.children,
      disabled = props.disabled,
      fontSize = props.fontSize,
      icon = props.icon,
      iconRight = props.iconRight,
      _props$justify = props.justify,
      justify = _props$justify === void 0 ? 'center' : _props$justify,
      loading = props.loading,
      _props$mode = props.mode,
      mode = _props$mode === void 0 ? 'default' : _props$mode,
      _props$padding = props.padding,
      padding = _props$padding === void 0 ? 3 : _props$padding,
      paddingX = props.paddingX,
      paddingY = props.paddingY,
      paddingTop = props.paddingTop,
      paddingBottom = props.paddingBottom,
      paddingLeft = props.paddingLeft,
      paddingRight = props.paddingRight,
      _props$radius = props.radius,
      radius = _props$radius === void 0 ? 2 : _props$radius,
      selected = props.selected,
      _props$space = props.space,
      space = _props$space === void 0 ? 3 : _props$space,
      text = props.text,
      textAlign = props.textAlign,
      _props$tone = props.tone,
      tone = _props$tone === void 0 ? 'default' : _props$tone,
      _props$type = props.type,
      type = _props$type === void 0 ? 'button' : _props$type,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$z);

  var theme = useTheme();
  var boxProps = React.useMemo(function () {
    return {
      // flex: 1,
      padding: padding,
      paddingX: paddingX,
      paddingY: paddingY,
      paddingTop: paddingTop,
      paddingBottom: paddingBottom,
      paddingLeft: paddingLeft,
      paddingRight: paddingRight
    };
  }, [padding, paddingX, paddingY, paddingTop, paddingBottom, paddingLeft, paddingRight]);
  return /*#__PURE__*/React__default["default"].createElement(Root$v, _extends({
    "data-ui": "Button"
  }, restProps, {
    "$mode": mode,
    "$radius": radius,
    "$tone": tone,
    "data-disabled": Boolean(loading || disabled),
    "data-selected": selected ? '' : undefined,
    disabled: Boolean(loading || disabled),
    ref: ref,
    type: type
  }), Boolean(loading) && /*#__PURE__*/React__default["default"].createElement(LoadingBox, null, /*#__PURE__*/React__default["default"].createElement(Spinner, null)), (icon || text || iconRight) && /*#__PURE__*/React__default["default"].createElement(Box, _extends({
    as: "span"
  }, boxProps), /*#__PURE__*/React__default["default"].createElement(Flex, {
    as: "span",
    justify: justify
  }, icon && /*#__PURE__*/React__default["default"].createElement(Text, {
    size: fontSize
  }, /*#__PURE__*/React.isValidElement(icon) && icon, ReactIs.isValidElementType(icon) && /*#__PURE__*/React.createElement(icon)), text && /*#__PURE__*/React__default["default"].createElement(Box, {
    flex: iconRight ? 1 : undefined,
    marginLeft: icon ? space : undefined,
    marginRight: iconRight ? space : undefined
  }, /*#__PURE__*/React__default["default"].createElement(Text, {
    align: textAlign,
    size: fontSize,
    textOverflow: "ellipsis",
    weight: theme.sanity.button.textWeight
  }, text)), iconRight && /*#__PURE__*/React__default["default"].createElement(Text, {
    size: fontSize
  }, /*#__PURE__*/React.isValidElement(iconRight) && iconRight, ReactIs.isValidElementType(iconRight) && /*#__PURE__*/React.createElement(iconRight)))), children && /*#__PURE__*/React__default["default"].createElement(Box, _extends({
    as: "span"
  }, boxProps), children));
});

var _templateObject$t, _templateObject2$j, _templateObject3$b;
function cardStyle(props) {
  return [cardBaseStyle(props), cardColorStyle(props)];
}
function cardBaseStyle(props) {
  var $checkered = props.$checkered,
      theme = props.theme;
  var space = theme.sanity.space;
  return styled.css(_templateObject$t || (_templateObject$t = _taggedTemplateLiteralLoose(["\n    ", "\n\n    &[data-as='button'] {\n      -webkit-font-smoothing: inherit;\n      appearance: none;\n      outline: none;\n      font: inherit;\n      text-align: inherit;\n      border: 0;\n      width: stretch;\n    }\n\n    /* &:is(a) */\n    &[data-as='a'] {\n      outline: none;\n      text-decoration: none;\n    }\n\n    /* &:is(pre) */\n    &[data-as='pre'] {\n      font: inherit;\n    }\n  "])), $checkered && styled.css(_templateObject2$j || (_templateObject2$j = _taggedTemplateLiteralLoose(["\n      background-size: ", "px ", "px;\n      background-position: 50% 50%;\n      background-image: var(--card-bg-image);\n    "])), space[3], space[3]));
}
function cardColorStyle(props) {
  var _theme$sanity$styles, _theme$sanity$styles$;

  var $checkered = props.$checkered,
      $focusRing = props.$focusRing,
      theme = props.theme;
  var focusRing = theme.sanity.focusRing;
  var _theme$sanity$color = theme.sanity.color,
      base = _theme$sanity$color.base,
      card = _theme$sanity$color.card;
  var border = {
    width: 0,
    color: 'var(--card-border-color)'
  };
  return styled.css(_templateObject3$b || (_templateObject3$b = _taggedTemplateLiteralLoose(["\n    ", "\n\n    background-color: var(--card-bg-color);\n    color: var(--card-fg-color);\n\n    /* &:is(button) */\n    &[data-as='button'] {\n      --card-focus-ring-box-shadow: none;\n\n      cursor: default;\n      box-shadow: var(--card-focus-ring-box-shadow);\n\n      &:disabled {\n        ", "\n      }\n\n      &:not(:disabled) {\n        &[data-pressed] {\n          ", "\n        }\n\n        &[data-selected] {\n          ", "\n        }\n\n        @media (hover: hover) {\n          &:not([data-pressed]):not([data-selected]) {\n            &:hover {\n              ", "\n            }\n\n            &:active {\n              ", "\n            }\n          }\n        }\n\n        &:focus {\n          --card-focus-ring-box-shadow: ", ";\n        }\n\n        &:focus:not(:focus-visible) {\n          --card-focus-ring-box-shadow: ", ";\n        }\n      }\n    }\n\n    /* &:is(a) */\n    &[data-as='a'] {\n      cursor: pointer;\n      box-shadow: var(--card-focus-ring-box-shadow);\n\n      &[data-disabled] {\n        ", "\n      }\n\n      &:not([data-disabled]) {\n        &[data-pressed] {\n          ", "\n        }\n\n        &[data-selected] {\n          ", "\n        }\n\n        @media (hover: hover) {\n          &:not([data-pressed]):not([data-selected]) {\n            &:hover {\n              ", "\n            }\n\n            &:active {\n              ", "\n            }\n          }\n        }\n\n        &:focus {\n          --card-focus-ring-box-shadow: ", ";\n        }\n\n        &:focus:not(:focus-visible) {\n          --card-focus-ring-box-shadow: ", ";\n        }\n      }\n    }\n\n    ", "\n  "])), _colorVarsStyle(base, card.enabled, $checkered), _colorVarsStyle(base, card.disabled, $checkered), _colorVarsStyle(base, card.pressed, $checkered), _colorVarsStyle(base, card.selected, $checkered), _colorVarsStyle(base, card.hovered, $checkered), _colorVarsStyle(base, card.pressed, $checkered), $focusRing ? focusRingStyle({
    base: base,
    border: border,
    focusRing: focusRing
  }) : undefined, $focusRing ? focusRingBorderStyle(border) : undefined, _colorVarsStyle(base, card.disabled, $checkered), _colorVarsStyle(base, card.pressed, $checkered), _colorVarsStyle(base, card.selected, $checkered), _colorVarsStyle(base, card.hovered, $checkered), _colorVarsStyle(base, card.pressed, $checkered), $focusRing ? focusRingStyle({
    base: base,
    border: border,
    focusRing: focusRing
  }) : undefined, $focusRing ? focusRingBorderStyle(border) : undefined, (_theme$sanity$styles = theme.sanity.styles) == null ? void 0 : (_theme$sanity$styles$ = _theme$sanity$styles.card) == null ? void 0 : _theme$sanity$styles$.root);
}

var _excluded$y = ["pressed", "__unstable_checkered", "__unstable_focusRing", "as", "border", "borderTop", "borderRight", "borderBottom", "borderLeft", "radius", "scheme", "selected", "shadow", "tone"];
var Root$u = styled__default["default"](Box)(responsiveBorderStyle, responsiveRadiusStyle, responsiveShadowStyle, cardStyle);
/**
 * @public
 */

var Card = /*#__PURE__*/React.forwardRef(function Card(props, ref) {
  var _props$pressed = props.pressed,
      pressed = _props$pressed === void 0 ? false : _props$pressed,
      _props$__unstable_che = props.__unstable_checkered,
      checkered = _props$__unstable_che === void 0 ? false : _props$__unstable_che,
      _props$__unstable_foc = props.__unstable_focusRing,
      focusRing = _props$__unstable_foc === void 0 ? false : _props$__unstable_foc,
      asProp = props.as,
      border = props.border,
      borderTop = props.borderTop,
      borderRight = props.borderRight,
      borderBottom = props.borderBottom,
      borderLeft = props.borderLeft,
      _props$radius = props.radius,
      radius = _props$radius === void 0 ? 0 : _props$radius,
      scheme = props.scheme,
      selected = props.selected,
      shadow = props.shadow,
      _props$tone = props.tone,
      toneProp = _props$tone === void 0 ? 'default' : _props$tone,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$y);

  var as = ReactIs.isValidElementType(asProp) ? asProp : 'div';
  var rootTheme = useRootTheme();
  var tone = toneProp === 'inherit' ? rootTheme.tone : toneProp;
  return /*#__PURE__*/React__default["default"].createElement(ThemeColorProvider, {
    scheme: scheme,
    tone: tone
  }, /*#__PURE__*/React__default["default"].createElement(Root$u, _extends({
    "data-as": typeof as === 'string' ? as : undefined,
    "data-checkered": checkered ? '' : undefined,
    "data-pressed": pressed ? '' : undefined,
    "data-scheme": rootTheme.scheme,
    "data-selected": selected ? '' : undefined,
    "data-ui": "Card",
    "data-tone": tone
  }, restProps, {
    "$border": border,
    "$borderTop": borderTop,
    "$borderRight": borderRight,
    "$borderBottom": borderBottom,
    "$borderLeft": borderLeft,
    "$checkered": checkered,
    "$focusRing": focusRing,
    "$radius": radius,
    "$shadow": shadow,
    "$tone": tone,
    forwardedAs: as,
    ref: ref,
    selected: selected
  })));
});

var _templateObject$s, _templateObject2$i;
function checkboxBaseStyles() {
  return styled.css(_templateObject$s || (_templateObject$s = _taggedTemplateLiteralLoose(["\n    position: relative;\n    display: inline-block;\n  "])));
}
function inputElementStyles(props) {
  var theme = props.theme;
  var color = theme.sanity.color.input;
  var _theme$sanity = theme.sanity,
      focusRing = _theme$sanity.focusRing,
      input = _theme$sanity.input,
      radius = _theme$sanity.radius;
  return styled.css(_templateObject2$i || (_templateObject2$i = _taggedTemplateLiteralLoose(["\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    outline: none;\n    opacity: 0;\n    z-index: 1;\n    padding: 0;\n    margin: 0;\n\n    & + span {\n      position: relative;\n      display: block;\n      height: ", ";\n      width: ", ";\n      box-sizing: border-box;\n      box-shadow: ", ";\n      border-radius: ", ";\n      line-height: 1;\n      background-color: ", ";\n\n      & > svg {\n        display: block;\n        position: absolute;\n        opacity: 0;\n        height: 100%;\n        width: 100%;\n\n        & > path {\n          vector-effect: non-scaling-stroke;\n          stroke-width: 2 !important;\n        }\n      }\n    }\n\n    &:not(:disabled):focus + span {\n      box-shadow: ", ";\n    }\n\n    &:not(:disabled):focus:not(:focus-visible) + span {\n      box-shadow: ", ";\n    }\n\n    &:checked + span > svg:first-child {\n      opacity: 1;\n    }\n\n    &[data-read-only] + span {\n      background-color: ", ";\n      box-shadow: ", ";\n      color: ", ";\n    }\n\n    &:not([data-read-only]):disabled + span {\n      background-color: ", ";\n      box-shadow: ", ";\n      color: ", ";\n    }\n\n    &:indeterminate + span > svg:last-child {\n      opacity: 1;\n    }\n  "])), rem(input.checkbox.size), rem(input.checkbox.size), focusRingBorderStyle({
    color: color["default"].enabled.border,
    width: input.border.width
  }), rem(radius[2]), color["default"].enabled.bg, focusRingStyle({
    border: {
      width: input.border.width,
      color: color["default"].enabled.border
    },
    focusRing: focusRing
  }), focusRingBorderStyle({
    color: color["default"].enabled.border,
    width: input.border.width
  }), color["default"].readOnly.bg, focusRingBorderStyle({
    width: input.border.width,
    color: color["default"].readOnly.border
  }), color["default"].readOnly.fg, color["default"].disabled.bg, focusRingBorderStyle({
    width: input.border.width,
    color: color["default"].disabled.border
  }), color["default"].disabled.fg);
}

var _excluded$x = ["checked", "className", "disabled", "indeterminate", "customValidity", "readOnly", "style"];
var Root$t = styled__default["default"].div(checkboxBaseStyles);
var Input$5 = styled__default["default"].input(inputElementStyles);
/**
 * @public
 */

var Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(props, forwardedRef) {
  var checked = props.checked,
      className = props.className,
      disabled = props.disabled,
      indeterminate = props.indeterminate,
      customValidity = props.customValidity,
      readOnly = props.readOnly,
      style = props.style,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$x);

  var ref = useForwardedRef(forwardedRef);
  useCustomValidity(ref, customValidity);
  React.useEffect(function () {
    if (ref.current) {
      // Set the indeterminate state
      ref.current.indeterminate = indeterminate || false;
    }
  }, [indeterminate, ref]);
  return /*#__PURE__*/React__default["default"].createElement(Root$t, {
    className: className,
    "data-ui": "Checkbox",
    style: style
  }, /*#__PURE__*/React__default["default"].createElement(Input$5, _extends({
    "data-read-only": !disabled && readOnly ? '' : undefined
  }, restProps, {
    checked: checked,
    disabled: disabled || readOnly,
    type: "checkbox",
    readOnly: readOnly,
    ref: ref
  })), /*#__PURE__*/React__default["default"].createElement("span", null, /*#__PURE__*/React__default["default"].createElement(icons.CheckmarkIcon, null), /*#__PURE__*/React__default["default"].createElement(icons.RemoveIcon, null)));
});

var _templateObject$r;

function codeSyntaxHighlightingStyle(_ref) {
  var theme = _ref.theme;
  var color = theme.sanity.color.syntax;
  return {
    '&.atrule': {
      color: color.atrule
    },
    '&.attr-name': {
      color: color.attrName
    },
    '&.attr-value': {
      color: color.attrValue
    },
    '&.attribute': {
      color: color.attribute
    },
    '&.boolean': {
      color: color["boolean"]
    },
    '&.builtin': {
      color: color.builtin
    },
    '&.cdata': {
      color: color.cdata
    },
    '&.char': {
      color: color["char"]
    },
    '&.class': {
      color: color["class"]
    },
    '&.class-name': {
      color: color.className
    },
    '&.comment': {
      color: color.comment
    },
    '&.constant': {
      color: color.constant
    },
    '&.deleted': {
      color: color.deleted
    },
    '&.doctype': {
      color: color.doctype
    },
    '&.entity': {
      color: color.entity
    },
    '&.function': {
      color: color["function"]
    },
    '&.hexcode': {
      color: color.hexcode
    },
    '&.id': {
      color: color.id
    },
    '&.important': {
      color: color.important
    },
    '&.inserted': {
      color: color.inserted
    },
    '&.keyword': {
      color: color.keyword
    },
    '&.number': {
      color: color.number
    },
    '&.operator': {
      color: color.operator
    },
    '&.prolog': {
      color: color.prolog
    },
    '&.property': {
      color: color.property
    },
    '&.pseudo-class': {
      color: color.pseudoClass
    },
    '&.pseudo-element': {
      color: color.pseudoElement
    },
    '&.punctuation': {
      color: color.punctuation
    },
    '&.regex': {
      color: color.regex
    },
    '&.selector': {
      color: color.selector
    },
    '&.string': {
      color: color.string
    },
    '&.symbol': {
      color: color.symbol
    },
    '&.tag': {
      color: color.tag
    },
    '&.unit': {
      color: color.unit
    },
    '&.url': {
      color: color.url
    },
    '&.variable': {
      color: color.variable
    }
  };
}

function codeBaseStyle() {
  return styled.css(_templateObject$r || (_templateObject$r = _taggedTemplateLiteralLoose(["\n    color: var(--card-code-fg-color);\n\n    & code {\n      font-family: inherit;\n\n      &.refractor .token {\n        ", "\n      }\n    }\n\n    & a {\n      color: inherit;\n      text-decoration: underline;\n      border-radius: 1px;\n    }\n\n    & [data-sanity-icon] {\n      vertical-align: baseline;\n    }\n  "])), codeSyntaxHighlightingStyle);
}

var _excluded$w = ["children", "language", "size", "weight"];
var Root$s = styled__default["default"].pre(codeBaseStyle, responsiveCodeFontStyle);
/**
 * @public
 */

var Code = /*#__PURE__*/React.forwardRef(function Code(props, ref) {
  var children = props.children,
      languageProp = props.language,
      _props$size = props.size,
      size = _props$size === void 0 ? 2 : _props$size,
      weight = props.weight,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$w);

  var language = typeof languageProp === 'string' ? languageProp : undefined;
  var registered = language ? Refractor__default["default"].hasLanguage(language) : false;
  return /*#__PURE__*/React__default["default"].createElement(Root$s, _extends({
    "data-ui": "Code"
  }, restProps, {
    "$size": size,
    "$weight": weight,
    ref: ref
  }), !(language && registered) && /*#__PURE__*/React__default["default"].createElement("code", null, children), language && registered && /*#__PURE__*/React__default["default"].createElement(Refractor__default["default"], {
    inline: true,
    language: language,
    value: String(children)
  }));
});

var BASE_STYLE$1 = {
  width: '100%',
  margin: '0 auto'
};
function containerBaseStyle() {
  return BASE_STYLE$1;
}
function responsiveContainerWidthStyle(props) {
  var theme = props.theme;
  var _theme$sanity = theme.sanity,
      container = _theme$sanity.container,
      media = _theme$sanity.media;
  return responsive(media, getResponsiveProp(props.$width), function (val) {
    return {
      maxWidth: val === 'auto' ? 'none' : rem(container[val])
    };
  });
}

var _excluded$v = ["as", "width"];
var Root$r = styled__default["default"](Box)(containerBaseStyle, responsiveContainerWidthStyle);
/**
 * @public
 */

var Container = /*#__PURE__*/React.forwardRef(function Container(props, ref) {
  var as = props.as,
      _props$width = props.width,
      width = _props$width === void 0 ? 2 : _props$width,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$v);

  return /*#__PURE__*/React__default["default"].createElement(Root$r, _extends({
    "data-ui": "Container"
  }, restProps, {
    "$width": width,
    forwardedAs: as,
    ref: ref
  }));
});

var _excluded$u = ["as", "autoRows", "autoCols", "autoFlow", "columns", "gap", "gapX", "gapY", "rows", "children"];
var Root$q = styled__default["default"](Box)(responsiveGridStyle);
/**
 * @public
 */

var Grid = /*#__PURE__*/React.forwardRef(function Grid(props, ref) {
  var as = props.as,
      autoRows = props.autoRows,
      autoCols = props.autoCols,
      autoFlow = props.autoFlow,
      columns = props.columns,
      gap = props.gap,
      gapX = props.gapX,
      gapY = props.gapY,
      rows = props.rows,
      children = props.children,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$u);

  return /*#__PURE__*/React__default["default"].createElement(Root$q, _extends({
    "data-as": typeof as === 'string' ? as : undefined,
    "data-ui": "Grid"
  }, restProps, {
    "$autoRows": autoRows,
    "$autoCols": autoCols,
    "$autoFlow": autoFlow,
    "$columns": columns,
    "$gap": gap,
    "$gapX": gapX,
    "$gapY": gapY,
    "$rows": rows,
    forwardedAs: as,
    ref: ref
  }), children);
});

var _templateObject$q, _templateObject2$h, _templateObject3$a;
function headingBaseStyle(props) {
  var $accent = props.$accent,
      $muted = props.$muted,
      theme = props.theme;
  return styled.css(_templateObject$q || (_templateObject$q = _taggedTemplateLiteralLoose(["\n    ", "\n\n    ", "\n\n    & code {\n      font-family: ", ";\n      border-radius: 1px;\n    }\n\n    & a {\n      text-decoration: none;\n      border-radius: 1px;\n      color: var(--card-link-color);\n      outline: none;\n\n      @media (hover: hover) {\n        &:hover {\n          text-decoration: underline;\n        }\n      }\n\n      &:focus {\n        box-shadow: 0 0 0 1px var(--card-bg-color), 0 0 0 3px var(--card-focus-ring-color);\n      }\n\n      &:focus:not(:focus-visible) {\n        box-shadow: none;\n      }\n    }\n\n    & [data-sanity-icon] {\n      vertical-align: baseline;\n    }\n  "])), $accent && styled.css(_templateObject2$h || (_templateObject2$h = _taggedTemplateLiteralLoose(["\n      color: var(--card-accent-fg-color);\n    "]))), $muted && styled.css(_templateObject3$a || (_templateObject3$a = _taggedTemplateLiteralLoose(["\n      color: var(--card-muted-fg-color);\n    "]))), theme.sanity.fonts.code.family);
}

var _excluded$t = ["accent", "align", "children", "muted", "size", "textOverflow", "weight"];

var _templateObject$p;
var Root$p = styled__default["default"].div(headingBaseStyle, responsiveTextAlignStyle, responsiveHeadingFont);
var SpanWithTextOverflow = styled__default["default"].span(_templateObject$p || (_templateObject$p = _taggedTemplateLiteralLoose(["\n  display: block;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n"])));
/**
 * @public
 */

var Heading = /*#__PURE__*/React.forwardRef(function Heading(props, ref) {
  var _props$accent = props.accent,
      accent = _props$accent === void 0 ? false : _props$accent,
      align = props.align,
      childrenProp = props.children,
      _props$muted = props.muted,
      muted = _props$muted === void 0 ? false : _props$muted,
      _props$size = props.size,
      size = _props$size === void 0 ? 2 : _props$size,
      textOverflow = props.textOverflow,
      weight = props.weight,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$t);

  var children = childrenProp;

  if (textOverflow === 'ellipsis') {
    children = /*#__PURE__*/React__default["default"].createElement(SpanWithTextOverflow, null, children);
  }

  return /*#__PURE__*/React__default["default"].createElement(Root$p, _extends({
    "data-ui": "Heading"
  }, restProps, {
    "$accent": accent,
    "$align": align,
    "$muted": muted,
    "$size": size,
    "$weight": weight,
    ref: ref
  }), /*#__PURE__*/React__default["default"].createElement("span", null, children));
});

function inlineBaseStyle() {
  return {
    lineHeight: 0,
    '&&:not([hidden])': {
      display: 'block'
    },
    '& > div': {
      display: 'inline-block',
      verticalAlign: 'middle'
    }
  };
}
function inlineSpaceStyle(props) {
  var theme = props.theme;
  return responsive(theme.sanity.media, getResponsiveProp(props.$space), function (spaceIndex) {
    var space = rem(theme.sanity.space[spaceIndex]);
    return {
      margin: "-" + space + " 0 0 -" + space,
      '& > div': {
        padding: space + " 0 0 " + space
      }
    };
  });
}

var _excluded$s = ["as", "children", "space"];
var Root$o = styled__default["default"](Box)(inlineBaseStyle, inlineSpaceStyle);
/**
 * @public
 */

var Inline = /*#__PURE__*/React.forwardRef(function Inline(props, ref) {
  var as = props.as,
      childrenProp = props.children,
      space = props.space,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$s);

  var children = childrenToElementArray(childrenProp).filter(Boolean);
  return /*#__PURE__*/React__default["default"].createElement(Root$o, _extends({
    "data-ui": "Inline"
  }, restProps, {
    "$space": space,
    forwardedAs: as,
    ref: ref
  }), children.map(function (child, idx) {
    return /*#__PURE__*/React__default["default"].createElement("div", {
      key: idx
    }, child);
  }));
});

var _excluded$r = ["children", "fontSize", "padding", "radius"];

var _templateObject$o;

function kbdStyle() {
  return styled.css(_templateObject$o || (_templateObject$o = _taggedTemplateLiteralLoose(["\n    background: var(--card-bg-color);\n    font: inherit;\n    box-shadow: inset 0 0 0 1px var(--card-hairline-hard-color);\n\n    &:not([hidden]) {\n      display: inline-block;\n    }\n  "])));
}

var Root$n = styled__default["default"].kbd(responsiveRadiusStyle, kbdStyle);
/**
 * @public
 */

var KBD = /*#__PURE__*/React.forwardRef(function KBD(props, ref) {
  var children = props.children,
      _props$fontSize = props.fontSize,
      fontSize = _props$fontSize === void 0 ? 1 : _props$fontSize,
      _props$padding = props.padding,
      padding = _props$padding === void 0 ? 1 : _props$padding,
      _props$radius = props.radius,
      radius = _props$radius === void 0 ? 2 : _props$radius,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$r);

  return /*#__PURE__*/React__default["default"].createElement(Root$n, _extends({
    "data-ui": "KBD"
  }, restProps, {
    "$radius": radius,
    ref: ref
  }), /*#__PURE__*/React__default["default"].createElement(Box, {
    as: "span",
    padding: padding
  }, /*#__PURE__*/React__default["default"].createElement(Code, {
    as: "span",
    muted: true,
    size: fontSize
  }, children)));
});

var key$6 = Symbol["for"]('@sanity/ui/context/boundaryElement');
globalScope[key$6] = globalScope[key$6] || /*#__PURE__*/React.createContext(null);
var BoundaryElementContext = globalScope[key$6];

/**
 * @public
 */

function BoundaryElementProvider(props) {
  var children = props.children,
      element = props.element;
  var value = React.useMemo(function () {
    return {
      version: 0.0,
      element: element
    };
  }, [element]);
  return /*#__PURE__*/React__default["default"].createElement(BoundaryElementContext.Provider, {
    value: value
  }, children);
}

var DEFAULT_VALUE = {
  version: 0.0,
  element: null
};
/**
 * @public
 */

function useBoundaryElement() {
  var value = React.useContext(BoundaryElementContext); // NOTE: This check is for future-compatiblity
  // - If the value is not an object, itâs not compatible with the current version
  // - If the value is an object, but doesnât have `version: 0.0`, itâs not compatible with the current version

  if (value && (!isRecord(value) || value.version !== 0.0)) {
    throw new Error('useBoundaryElement(): the context value is not compatible');
  }

  return value || DEFAULT_VALUE;
}

/**
 * @internal
 */

var RO = typeof window !== 'undefined' && window.ResizeObserver ? window.ResizeObserver : resizeObserver.ResizeObserver;

function findMaxBreakpoints(media, width) {
  var ret = [];

  for (var i = 0; i < media.length; i += 1) {
    var bp = media[i];

    if (bp > width) {
      ret.push(i);
    }
  }

  return ret;
}
function findMinBreakpoints(media, width) {
  var ret = [];

  for (var i = 0; i < media.length; i += 1) {
    var bp = media[i];

    if (bp <= width) {
      ret.push(i);
    }
  }

  return ret;
}

var _excluded$q = ["children", "media"];
/**
 * DO NOT USE IN PRODUCTION.
 * @beta
 */

var ElementQuery = /*#__PURE__*/React.forwardRef(function ElementQuery(props, ref) {
  var theme = useTheme();

  var children = props.children,
      _props$media = props.media,
      media = _props$media === void 0 ? theme.sanity.media : _props$media,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$q);

  var _useState = React.useState(function () {
    return window.innerWidth;
  }),
      width = _useState[0],
      setWidth = _useState[1];

  var forwardedRef = useForwardedRef(ref);

  var _useState2 = React.useState(null),
      element = _useState2[0],
      setElement = _useState2[1];

  React.useEffect(function () {
    if (!element) return;

    var handleResizeEntries = function handleResizeEntries(entries) {
      setWidth(entries[0].contentRect.width);
    };

    var ro = new RO(handleResizeEntries);
    ro.observe(element);
    return function () {
      return ro.disconnect();
    };
  }, [element]);
  var max = React.useMemo(function () {
    return findMaxBreakpoints(media, width);
  }, [media, width]);
  var min = React.useMemo(function () {
    return findMinBreakpoints(media, width);
  }, [media, width]);
  var setRef = React.useCallback(function (el) {
    forwardedRef.current = el;
    setElement(el);
  }, [forwardedRef]);
  return /*#__PURE__*/React__default["default"].createElement("div", _extends({
    "data-ui": "ElementQuery"
  }, restProps, {
    "data-eq-max": max.length ? max.join(' ') : undefined,
    "data-eq-min": min.length ? min.join(' ') : undefined,
    ref: setRef
  }), children);
});

/**
 * DO NOT USE IN PRODUCTION
 * @beta
 */

var ErrorBoundary = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(ErrorBoundary, _React$Component);

  function ErrorBoundary() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      error: null
    };
    return _this;
  }

  ErrorBoundary.getDerivedStateFromError = function getDerivedStateFromError(error) {
    // Update state so the next render will show the fallback UI.
    return {
      error: error
    };
  };

  var _proto = ErrorBoundary.prototype;

  _proto.componentDidCatch = function componentDidCatch(error, info) {
    this.props.onCatch({
      error: error,
      info: info
    });
  };

  _proto.render = function render() {
    var error = this.state.error;

    if (error) {
      var message = typeof (error == null ? void 0 : error.message) === 'string' ? error.message : 'Error';
      return /*#__PURE__*/React__default["default"].createElement(Code, null, message);
    }

    return this.props.children;
  };

  return ErrorBoundary;
}(React__default["default"].Component);

var key$5 = Symbol["for"]('@sanity/ui/context/layer');
globalScope[key$5] = globalScope[key$5] || /*#__PURE__*/React.createContext(null);
var LayerContext = globalScope[key$5];

/**
 * @public
 */

function useLayer() {
  var value = React.useContext(LayerContext);

  if (!value) {
    throw new Error('useLayer(): missing context value');
  } // NOTE: This check is for future-compatiblity
  // - If the value is not an object, itâs not compatible with the current version
  // - If the value is an object, but doesnât have `version: 0.0`, itâs not compatible with the current version


  if (!isRecord(value) || value.version !== 0.0) {
    throw new Error('useLayer(): the context value is not compatible');
  }

  return value;
}

/**
 * @public
 */

function LayerProvider(props) {
  var children = props.children,
      _props$zOffset = props.zOffset,
      zOffsetProp = _props$zOffset === void 0 ? 0 : _props$zOffset;
  var parent = React.useContext(LayerContext);
  var zOffset = useResponsiveProp(zOffsetProp);
  var maxMediaIndex = zOffset.length - 1;
  var mediaIndex = Math.min(useMediaIndex(), maxMediaIndex);
  var zIndex = parent ? parent.zIndex + zOffset[mediaIndex] : zOffset[mediaIndex];

  var _useState = React.useState(0),
      size = _useState[0],
      setSize = _useState[1];

  var registerChild = React.useCallback(function () {
    setSize(function (v) {
      return v + 1;
    });
    return function () {
      return setSize(function (v) {
        return v - 1;
      });
    };
  }, []);
  var parentRegisterChild = parent == null ? void 0 : parent.registerChild;
  React.useEffect(function () {
    if (!parentRegisterChild) return;
    return parentRegisterChild();
  }, [parentRegisterChild]);
  var value = React.useMemo(function () {
    return {
      version: 0.0,
      isTopLayer: size === 0,
      registerChild: registerChild,
      size: size,
      zIndex: zIndex
    };
  }, [size, registerChild, zIndex]);
  return /*#__PURE__*/React__default["default"].createElement(LayerContext.Provider, {
    value: value
  }, children);
}

var _excluded$p = ["children", "style"],
    _excluded2$1 = ["children", "zOffset"];

var _templateObject$n;
var Root$m = styled__default["default"].div(_templateObject$n || (_templateObject$n = _taggedTemplateLiteralLoose(["\n  position: relative;\n"])));
var LayerChildren = /*#__PURE__*/React.forwardRef(function LayerChildren(props, ref) {
  var children = props.children,
      _props$style = props.style,
      style = _props$style === void 0 ? EMPTY_RECORD$1 : _props$style,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$p);

  var _useLayer = useLayer(),
      zIndex = _useLayer.zIndex;

  return /*#__PURE__*/React__default["default"].createElement(Root$m, _extends({}, restProps, {
    ref: ref,
    style: _extends({}, style, {
      zIndex: zIndex
    })
  }), children);
});
/**
 * @public
 */

var Layer = /*#__PURE__*/React.forwardRef(function Layer(props, ref) {
  var children = props.children,
      _props$zOffset = props.zOffset,
      zOffset = _props$zOffset === void 0 ? 1 : _props$zOffset,
      restProps = _objectWithoutPropertiesLoose(props, _excluded2$1);

  return /*#__PURE__*/React__default["default"].createElement(LayerProvider, {
    zOffset: zOffset
  }, /*#__PURE__*/React__default["default"].createElement(LayerChildren, _extends({}, restProps, {
    ref: ref
  }), children));
});

var key$4 = Symbol["for"]('@sanity/ui/context/portal');
var elementKey = Symbol["for"]('@sanity/ui/context/portal/element');
globalScope[elementKey] = null;
var defaultContextValue = {
  version: 0.0,
  boundaryElement: null,

  get element() {
    if (typeof window === 'undefined') {
      return null;
    }

    if (globalScope[elementKey]) {
      return globalScope[elementKey];
    }

    globalScope[elementKey] = document.createElement('div');
    globalScope[elementKey].setAttribute('data-portal', '');
    document.body.appendChild(globalScope[elementKey]);
    return globalScope[elementKey];
  }

};
globalScope[key$4] = globalScope[key$4] || /*#__PURE__*/React.createContext(defaultContextValue);
var PortalContext = globalScope[key$4];

/**
 * @public
 */

function usePortal() {
  var value = React.useContext(PortalContext);

  if (!value) {
    throw new Error('usePortal(): missing context value');
  } // NOTE: This check is for future-compatiblity
  // - If the value is not an object, itâs not compatible with the current version
  // - If the value is an object, but doesnât have `version: 0.0`, itâs not compatible with the current version


  if (!isRecord(value) || value.version !== 0.0) {
    throw new Error('usePortal(): the context value is not compatible');
  }

  return value;
}

/**
 * @public
 */

function Portal(props) {
  var _portal$elements;

  var children = props.children,
      name = props.__unstable_name;
  var portal = usePortal();
  var portalElement = (name ? portal.elements && portal.elements[name] : portal.element) || ((_portal$elements = portal.elements) == null ? void 0 : _portal$elements["default"]);

  if (!portalElement) {
    return null;
  }

  return /*#__PURE__*/ReactDOM__default["default"].createPortal(children, portalElement);
}

function useUnique(value) {
  var valueRef = React.useRef(value);

  if (!isEqual(valueRef.current, value)) {
    valueRef.current = value;
  }

  return valueRef.current;
}

function isEqual(objA, objB) {
  if (!objA || !objB) {
    return objA === objB;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  return keysA.every(function (key) {
    return objA[key] === objB[key];
  });
}

var __BROWSER__ = typeof window !== 'undefined';
/**
 * @public
 */


function PortalProvider(props) {
  var boundaryElement = props.boundaryElement,
      children = props.children,
      element = props.element,
      elementsProp = props.__unstable_elements;
  var elements = useUnique(elementsProp);
  var value = React.useMemo(function () {
    return {
      version: 0.0,
      boundaryElement: boundaryElement || null,
      element: element || __BROWSER__ && document.body || null,
      elements: elements
    };
  }, [boundaryElement, element, elements]);
  return /*#__PURE__*/React__default["default"].createElement(PortalContext.Provider, {
    value: value
  }, children);
}

var _templateObject$m;
var Root$l = styled__default["default"].div(_templateObject$m || (_templateObject$m = _taggedTemplateLiteralLoose(["\n  display: block;\n  width: 0;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n"])));
/**
 * @public
 */

var SrOnly = /*#__PURE__*/React.forwardRef(function SrOnly(props, ref) {
  var as = props.as,
      children = props.children;
  return /*#__PURE__*/React__default["default"].createElement(Root$l, {
    "aria-hidden": true,
    as: as,
    "data-ui": "SrOnly",
    ref: ref
  }, children);
});

/**
 * @internal
 */
function _raf(fn) {
  var frameId = requestAnimationFrame(fn);
  return function () {
    cancelAnimationFrame(frameId);
  };
}
/**
 * @internal
 */

function _raf2(fn) {
  var innerDispose = null;

  var outerDispose = _raf(function () {
    innerDispose = _raf(fn);
  });

  return function () {
    if (innerDispose) innerDispose();
    outerDispose();
  };
}

/**
 * @internal
 */
function _isEnterToClickElement(element) {
  return isHTMLAnchorElement(element) || isHTMLButtonElement(element);
}
/**
 * @internal
 */

function isHTMLElement(node) {
  return node instanceof Node && node.nodeType === Node.ELEMENT_NODE;
}
/**
 * @internal
 */

function isHTMLAnchorElement(element) {
  return isHTMLElement(element) && element.nodeName === 'A';
}
/**
 * @internal
 */

function isHTMLInputElement(element) {
  return isHTMLElement(element) && element.nodeName === 'INPUT';
}
/**
 * @internal
 */

function isHTMLButtonElement(element) {
  return isHTMLElement(element) && element.nodeName === 'BUTTON';
}
/**
 * @internal
 */

function isHTMLSelectElement(element) {
  return isHTMLElement(element) && element.nodeName === 'SELECT';
}
/**
 * @internal
 */

function isHTMLTextAreaElement(element) {
  return isHTMLElement(element) && element.nodeName === 'TEXTAREA';
}

//   IgnoreUtilFocusChanges: false,
// }

/**
 * @internal
 */

function _hasFocus(element) {
  return Boolean(document.activeElement) && element.contains(document.activeElement);
}
/**
 * @internal
 */

function isFocusable(element) {
  if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute('tabIndex') !== null) {
    return true;
  }

  if (isHTMLAnchorElement(element)) {
    return Boolean(element.href) && element.rel !== 'ignore';
  }

  if (isHTMLInputElement(element)) {
    return element.type !== 'hidden' && element.type !== 'file' && !element.disabled;
  }

  if (isHTMLButtonElement(element) || isHTMLSelectElement(element) || isHTMLTextAreaElement(element)) {
    return !element.disabled;
  }

  return false;
}
/**
 * @internal
 */

function attemptFocus(element) {
  if (!isFocusable(element)) {
    return false;
  } // globalFocusState.IgnoreUtilFocusChanges = true


  try {
    element.focus();
  } catch (_) {// ignore
  } // globalFocusState.IgnoreUtilFocusChanges = false


  return document.activeElement === element;
}
/**
 * @internal
 */

function focusFirstDescendant(element) {
  for (var i = 0; i < element.childNodes.length; i++) {
    var child = element.childNodes[i];

    if (isHTMLElement(child) && (attemptFocus(child) || focusFirstDescendant(child))) {
      return true;
    }
  }

  return false;
}
/**
 * @internal
 */

function focusLastDescendant(element) {
  for (var i = element.childNodes.length - 1; i >= 0; i--) {
    var child = element.childNodes[i];

    if (isHTMLElement(child) && (attemptFocus(child) || focusLastDescendant(child))) {
      return true;
    }
  }

  return false;
}

/**
 * @internal
 */
function _isScrollable(el) {
  if (!(el instanceof Element)) return false;
  var style = window.getComputedStyle(el);
  return style.overflowX.includes('auto') || style.overflowX.includes('scroll') || style.overflowY.includes('auto') || style.overflowY.includes('scroll');
}

var _excluded$o = ["as", "gap", "getItemKey", "items", "onChange", "renderItem"];

var _templateObject$l, _templateObject2$g;
var Root$k = styled__default["default"].div(_templateObject$l || (_templateObject$l = _taggedTemplateLiteralLoose(["\n  position: relative;\n"])));
var ItemWrapper = styled__default["default"].div(_templateObject2$g || (_templateObject2$g = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  left: 0;\n  right: 0;\n"])));
/**
 * @beta
 */

var VirtualList = /*#__PURE__*/React.forwardRef(function VirtualList(props, ref) {
  var _props$as = props.as,
      as = _props$as === void 0 ? 'div' : _props$as,
      _props$gap = props.gap,
      gap = _props$gap === void 0 ? 0 : _props$gap,
      getItemKey = props.getItemKey,
      _props$items = props.items,
      items = _props$items === void 0 ? [] : _props$items,
      onChange = props.onChange,
      renderItem = props.renderItem,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$o);

  var space = useTheme().sanity.space;
  var forwardedRef = useForwardedRef(ref);
  var wrapperRef = React.useRef(null);

  var _useState = React.useState(0),
      scrollTop = _useState[0],
      setScrollTop = _useState[1];

  var _useState2 = React.useState(0),
      scrollHeight = _useState2[0],
      setScrollHeight = _useState2[1];

  var _useState3 = React.useState(-1),
      itemHeight = _useState3[0],
      setItemHeight = _useState3[1];

  React.useEffect(function () {
    if (!wrapperRef.current) return;
    var firstElement = wrapperRef.current.firstChild;

    if (firstElement instanceof HTMLElement) {
      setItemHeight(firstElement.offsetHeight);
    }
  }, [renderItem]);
  React.useEffect(function () {
    if (!forwardedRef.current) return;
    var _scrollEl = forwardedRef.current.parentNode;

    while (_scrollEl && !_isScrollable(_scrollEl)) {
      _scrollEl = _scrollEl.parentNode;
    }

    if (_scrollEl) {
      var scrollEl = _scrollEl;
      if (!(scrollEl instanceof HTMLElement)) return;

      var _handleScroll = function _handleScroll() {
        setScrollTop(scrollEl.scrollTop);
      };

      scrollEl.addEventListener('scroll', _handleScroll, {
        passive: true
      });
      var ro = new ResizeObserver(function (entries) {
        setScrollHeight(entries[0].contentRect.height);
      });
      ro.observe(scrollEl);

      _handleScroll();

      return function () {
        scrollEl.removeEventListener('scroll', _handleScroll);
        ro.unobserve(scrollEl);
        ro.disconnect();
      };
    }

    var handleScroll = function handleScroll() {
      setScrollTop(window.scrollY);
    };

    var handleResize = function handleResize() {
      setScrollHeight(window.innerHeight);
    };

    window.addEventListener('scroll', handleScroll, {
      passive: true
    });
    window.addEventListener('resize', handleResize);
    setScrollHeight(window.innerHeight);
    handleScroll();
    return function () {
      window.removeEventListener('scroll', handleScroll);
      window.removeEventListener('resize', handleResize);
    };
  }, [forwardedRef]);
  var len = items.length;
  var height = itemHeight ? len * (itemHeight + space[gap]) - space[gap] : 0;
  var fromIndex = height ? Math.max(Math.floor(scrollTop / height * len) - 2, 0) : 0;
  var toIndex = height ? Math.ceil((scrollTop + scrollHeight) / height * len) + 1 : 0;
  React.useEffect(function () {
    if (!onChange) return;
    onChange({
      fromIndex: fromIndex,
      gap: space[gap],
      itemHeight: itemHeight,
      scrollHeight: scrollHeight,
      scrollTop: scrollTop,
      toIndex: toIndex
    });
  }, [fromIndex, gap, itemHeight, onChange, scrollHeight, scrollTop, space, toIndex]);
  var children = React.useMemo(function () {
    if (!renderItem || items.length === 0) return null;

    if (itemHeight === -1) {
      return [/*#__PURE__*/React__default["default"].createElement(ItemWrapper, {
        key: 0
      }, renderItem(items[0]))];
    }

    return items.slice(fromIndex, toIndex).map(function (item, _itemIndex) {
      var itemIndex = fromIndex + _itemIndex;
      var node = renderItem(item);
      var key = getItemKey ? getItemKey(item, itemIndex) : itemIndex;
      return /*#__PURE__*/React__default["default"].createElement(ItemWrapper, {
        key: key,
        style: {
          top: itemIndex * (itemHeight + space[gap])
        }
      }, node);
    });
  }, [fromIndex, gap, getItemKey, itemHeight, items, renderItem, space, toIndex]);
  var wrapperStyle = React.useMemo(function () {
    return {
      height: height
    };
  }, [height]);
  return /*#__PURE__*/React__default["default"].createElement(Root$k, _extends({
    as: as,
    "data-ui": "VirtualList"
  }, restProps, {
    ref: forwardedRef
  }), /*#__PURE__*/React__default["default"].createElement("div", {
    ref: wrapperRef,
    style: wrapperStyle
  }, children));
});

var _templateObject$k, _templateObject2$f, _templateObject3$9;
var Root$j = styled__default["default"].div(_templateObject$k || (_templateObject$k = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  pointer-events: none;\n  width: 27px;\n  height: 27px;\n  fill: none;\n\n  :empty + & {\n    display: none;\n  }\n\n  & > svg {\n    display: block;\n    transform-origin: 13.5px 13.5px;\n  }\n\n  [data-popper-placement^='top'] > div > & {\n    bottom: -27px;\n  }\n\n  [data-popper-placement^='right'] > div > & {\n    left: -27px;\n\n    & > svg {\n      transform: rotate(90deg);\n    }\n  }\n\n  [data-popper-placement^='left'] > div > & {\n    right: -27px;\n\n    & > svg {\n      transform: rotate(-90deg);\n    }\n  }\n\n  [data-popper-placement^='bottom'] > div > & {\n    top: -27px;\n\n    & > svg {\n      transform: rotate(180deg);\n    }\n  }\n"])));
var BorderPath = styled__default["default"].path(_templateObject2$f || (_templateObject2$f = _taggedTemplateLiteralLoose(["\n  fill: var(--card-shadow-outline-color);\n"])));
var ShapePath = styled__default["default"].path(_templateObject3$9 || (_templateObject3$9 = _taggedTemplateLiteralLoose(["\n  fill: var(--card-bg-color);\n"])));
var PopoverArrow = /*#__PURE__*/React.forwardRef(function PopoverArrow(props, ref) {
  return /*#__PURE__*/React__default["default"].createElement(Root$j, _extends({
    "data-ui": "PopoverArrow"
  }, props, {
    ref: ref
  }), /*#__PURE__*/React__default["default"].createElement("svg", {
    width: "27",
    height: "11",
    viewBox: "0 0 27 11",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React__default["default"].createElement(BorderPath, {
    d: "M1.18708 1C3.29803 1.0011 5.29585 1.95479 6.62414 3.59561L11.1683 9.20895C12.369 10.6922 14.631 10.6922 15.8317 9.20894L20.3759 3.59561C21.7042 1.95478 23.702 1.0011 25.8129 1H21.9436C21.0533 1.49255 20.2545 2.15618 19.5986 2.96641L15.0545 8.57975C14.254 9.56855 12.746 9.56855 11.9455 8.57975L7.40139 2.96642C6.74548 2.15618 5.94673 1.49255 5.05643 1H1.18708Z"
  }), /*#__PURE__*/React__default["default"].createElement(ShapePath, {
    d: "M1.18342 0C3.59749 0 5.88246 1.0901 7.40138 2.96642L11.9455 8.57975C12.746 9.56855 14.254 9.56855 15.0545 8.57975L19.5986 2.96641C21.1175 1.0901 23.4025 0 25.8166 0H27H0H1.18342Z"
  })));
});

/*

The order of popper phases:

- beforeRead
- read
- afterRead
- beforeMain
- main
- afterMain
- beforeWrite
- write
- afterWrite

*/

function getPopoverModifiers(props) {
  var allowedAutoPlacements = props.allowedAutoPlacements,
      arrow = props.arrow,
      arrowElement = props.arrowElement,
      boundaryElement = props.boundaryElement,
      constrainSize = props.constrainSize,
      distance = props.distance,
      fallbackPlacements = props.fallbackPlacements,
      margins = props.margins,
      matchReferenceWidth = props.matchReferenceWidth,
      open = props.open,
      preventOverflow = props.preventOverflow,
      skidding = props.skidding,
      tether = props.tether,
      tetherOffset = props.tetherOffset; // NOTE: For later viewers:
  // Prior to adding this change, the popover would get `maxWidth: 0` the 2nd time it
  // was opened, when used with `constrainSize`. I was looking for a way to "reset"
  // the size of the popover as measured by Popper.js, and this seems to be a workaround.

  if (!open) {
    return [];
  }

  var detectOverflowOptions = {
    altAxis: !constrainSize,
    boundary: boundaryElement || undefined,
    padding: 8,
    tether: tether,
    tetherOffset: tetherOffset
  };
  return [constrainSize && _extends({}, maxSizeModifier__default["default"], {
    options: detectOverflowOptions
  }), constrainSize && {
    name: 'applyMaxSize',
    enabled: true,
    phase: 'beforeWrite',
    requires: ['maxSize'],
    fn: function fn(_ref) {
      var state = _ref.state;
      var _state$modifiersData$ = state.modifiersData.maxSize,
          width = _state$modifiersData$.width,
          height = _state$modifiersData$.height;
      state.styles.popper = _extends({}, state.styles.popper, {
        maxWidth: width + "px",
        maxHeight: height + "px"
      });
    }
  }, arrow && {
    name: 'arrow',
    options: {
      element: arrowElement,
      padding: 4
    }
  }, (constrainSize || preventOverflow) && {
    name: 'preventOverflow',
    options: detectOverflowOptions
  }, {
    name: 'offset',
    options: {
      offset: [skidding, distance]
    }
  }, margins && {
    name: 'margins',
    enabled: true,
    phase: 'beforeRead',
    fn: function fn(_ref2) {
      var state = _ref2.state;
      var rects = state.rects;

      if (rects.reference) {
        rects.reference.x += margins[3];
        rects.reference.y += margins[1];
        rects.reference.width -= margins[1] + margins[3];
        rects.reference.height -= margins[0] + margins[2];
      }
    }
  }, {
    name: 'flip',
    options: {
      allowedAutoPlacements: allowedAutoPlacements,
      boundary: boundaryElement || undefined,
      fallbackPlacements: fallbackPlacements,
      padding: 8
    }
  }, matchReferenceWidth && {
    name: 'matchWidth',
    enabled: true,
    phase: 'beforeWrite',
    requires: ['computeStyles'],
    fn: function fn(_ref3) {
      var state = _ref3.state;
      var width = state.rects.reference.width;
      state.styles.popper.width = width + "px";
    },
    effect: function effect(_ref4) {
      var state = _ref4.state;
      var refElement = state.elements.reference;

      if (refElement instanceof HTMLElement) {
        state.elements.popper.style.width = refElement.offsetWidth - (margins ? margins[1] + margins[3] : 0) + "px";
      }
    }
  }].filter(Boolean);
}

function usePopoverModifiers(props) {
  var allowedAutoPlacements = props.allowedAutoPlacements,
      arrow = props.arrow,
      arrowElement = props.arrowElement,
      boundaryElement = props.boundaryElement,
      constrainSize = props.constrainSize,
      distance = props.distance,
      fallbackPlacements = props.fallbackPlacements,
      margins = props.margins,
      matchReferenceWidth = props.matchReferenceWidth,
      open = props.open,
      preventOverflow = props.preventOverflow,
      skidding = props.skidding,
      tether = props.tether,
      tetherOffset = props.tetherOffset;
  return React.useMemo(function () {
    return getPopoverModifiers({
      allowedAutoPlacements: allowedAutoPlacements,
      arrow: arrow,
      arrowElement: arrowElement,
      boundaryElement: boundaryElement,
      constrainSize: constrainSize,
      distance: distance,
      fallbackPlacements: fallbackPlacements,
      margins: margins,
      matchReferenceWidth: matchReferenceWidth,
      open: open,
      preventOverflow: preventOverflow,
      skidding: skidding,
      tether: tether,
      tetherOffset: tetherOffset
    });
  }, [allowedAutoPlacements, arrow, arrowElement, boundaryElement, constrainSize, distance, fallbackPlacements, margins, matchReferenceWidth, open, preventOverflow, skidding, tether, tetherOffset]);
}

var _excluded$n = ["__unstable_margins", "allowedAutoPlacements", "arrow", "boundaryElement", "children", "content", "constrainSize", "disabled", "fallbackPlacements", "open", "padding", "placement", "portal", "preventOverflow", "radius", "referenceElement", "matchReferenceWidth", "shadow", "scheme", "style", "tether", "tetherOffset", "tone", "width", "zOffset"];

var _templateObject$j, _templateObject2$e, _templateObject3$8;
var Root$i = styled__default["default"](Layer)(function (_ref) {
  var $preventOverflow = _ref.$preventOverflow;
  return styled.css(_templateObject$j || (_templateObject$j = _taggedTemplateLiteralLoose(["\n    pointer-events: none;\n    display: flex;\n    flex-direction: column;\n    max-width: calc(100% - 16px);\n\n    & > * {\n      min-height: 0;\n    }\n\n    /* Hide the popover when the reference element is out of bounds */\n    ", "\n  "])), $preventOverflow && styled.css(_templateObject2$e || (_templateObject2$e = _taggedTemplateLiteralLoose(["\n      &[data-popper-reference-hidden='true'] {\n        display: none;\n      }\n    "]))));
});
var PopoverCard = styled__default["default"](Card)(function (_ref2) {
  var $constrainSize = _ref2.$constrainSize;
  return styled.css(_templateObject3$8 || (_templateObject3$8 = _taggedTemplateLiteralLoose(["\n    flex: 1;\n    max-height: ", ";\n    pointer-events: all;\n\n    && {\n      display: flex;\n    }\n\n    flex-direction: column;\n\n    & > * {\n      min-height: 0;\n    }\n\n    ", "\n  "])), $constrainSize && '100%', responsiveContainerWidthStyle);
});
/**
 * @public
 */

var Popover = /*#__PURE__*/React.forwardRef(function Popover(props, ref) {
  var _theme$sanity$layer;

  var boundaryElementContext = useBoundaryElement();
  var theme = useTheme();

  var margins = props.__unstable_margins,
      allowedAutoPlacements = props.allowedAutoPlacements,
      _props$arrow = props.arrow,
      arrow = _props$arrow === void 0 ? true : _props$arrow,
      _props$boundaryElemen = props.boundaryElement,
      boundaryElementProp = _props$boundaryElemen === void 0 ? boundaryElementContext.element : _props$boundaryElemen,
      child = props.children,
      content = props.content,
      constrainSize = props.constrainSize,
      disabled = props.disabled,
      fallbackPlacements = props.fallbackPlacements,
      _props$open = props.open,
      open = _props$open === void 0 ? false : _props$open,
      padding = props.padding,
      _props$placement = props.placement,
      placement = _props$placement === void 0 ? 'bottom' : _props$placement,
      _props$portal = props.portal,
      portalProp = _props$portal === void 0 ? false : _props$portal,
      preventOverflow = props.preventOverflow,
      _props$radius = props.radius,
      radius = _props$radius === void 0 ? 3 : _props$radius,
      referenceElementProp = props.referenceElement,
      matchReferenceWidth = props.matchReferenceWidth,
      _props$shadow = props.shadow,
      shadow = _props$shadow === void 0 ? 3 : _props$shadow,
      scheme = props.scheme,
      _props$style = props.style,
      style = _props$style === void 0 ? EMPTY_RECORD$1 : _props$style,
      tether = props.tether,
      tetherOffset = props.tetherOffset,
      _props$tone = props.tone,
      tone = _props$tone === void 0 ? 'inherit' : _props$tone,
      _props$width = props.width,
      width = _props$width === void 0 ? 0 : _props$width,
      _props$zOffset = props.zOffset,
      zOffset = _props$zOffset === void 0 ? (_theme$sanity$layer = theme.sanity.layer) == null ? void 0 : _theme$sanity$layer.popover.zOffset : _props$zOffset,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$n);

  var forwardedRef = useForwardedRef(ref);
  var portal = usePortal();

  var _useState = React.useState(null),
      referenceElement = _useState[0],
      setReferenceElement = _useState[1];

  var _useState2 = React.useState(null),
      popperElement = _useState2[0],
      setPopperElement = _useState2[1];

  var _useState3 = React.useState(null),
      arrowElement = _useState3[0],
      setArrowElement = _useState3[1];

  var popperReferenceElement = referenceElementProp || referenceElement;
  var modifiers = usePopoverModifiers({
    allowedAutoPlacements: allowedAutoPlacements,
    arrow: arrow,
    arrowElement: arrowElement,
    boundaryElement: boundaryElementProp || portal.boundaryElement,
    constrainSize: constrainSize,
    distance: arrow ? 4 : 0,
    fallbackPlacements: fallbackPlacements,
    margins: margins,
    matchReferenceWidth: matchReferenceWidth,
    open: open,
    preventOverflow: preventOverflow,
    skidding: 0,
    tether: tether,
    tetherOffset: tetherOffset
  });
  var popper = reactPopper.usePopper(popperReferenceElement, popperElement, {
    placement: placement,
    modifiers: modifiers
  });
  var attributes = popper.attributes,
      forceUpdate = popper.forceUpdate,
      styles = popper.styles;
  var setRef = React.useCallback(function (el) {
    var childRef = child.ref;
    setReferenceElement(el);

    if (typeof childRef === 'function') {
      childRef(el);
    } else if (childRef) {
      childRef.current = el;
    }
  }, [child]);
  var setRootRef = React.useCallback(function (el) {
    setPopperElement(el);
    forwardedRef.current = el;
  }, [forwardedRef]);
  var popoverStyle = React.useMemo(function () {
    return _extends({}, style, styles.popper);
  }, [style, styles]);
  React.useEffect(function () {
    if (forceUpdate) {
      try {
        forceUpdate();
      } catch (_) {// ignore caught error
      }
    }
  }, [content, forceUpdate, open, popperReferenceElement]);

  if (disabled) {
    return child || /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null);
  }

  var node = /*#__PURE__*/React__default["default"].createElement(Root$i, _extends({
    "data-ui": "Popover"
  }, restProps, {
    "$preventOverflow": preventOverflow,
    ref: setRootRef,
    style: popoverStyle,
    zOffset: zOffset
  }, attributes.popper), /*#__PURE__*/React__default["default"].createElement(PopoverCard, {
    "$constrainSize": constrainSize,
    "data-ui": "PopoverCard",
    padding: padding,
    radius: radius,
    scheme: scheme,
    shadow: shadow,
    tone: tone,
    width: width
  }, arrow && /*#__PURE__*/React__default["default"].createElement(PopoverArrow, {
    ref: setArrowElement,
    style: styles.arrow
  }), content));
  return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, child && !referenceElementProp ? /*#__PURE__*/React.cloneElement(child, {
    ref: setRef
  }) : child || /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null), open && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, portalProp && /*#__PURE__*/React__default["default"].createElement(Portal, {
    __unstable_name: typeof portalProp === 'string' ? portalProp : undefined
  }, node), !portalProp && node));
});

var _templateObject$i, _templateObject2$d;
function radioBaseStyle() {
  return styled.css(_templateObject$i || (_templateObject$i = _taggedTemplateLiteralLoose(["\n    position: relative;\n\n    &:not([hidden]) {\n      display: inline-block;\n    }\n\n    &[data-read-only] {\n      outline: 1px solid red;\n    }\n  "])));
}
function inputElementStyle(props) {
  var theme = props.theme;
  var _theme$sanity = theme.sanity,
      focusRing = _theme$sanity.focusRing,
      input = _theme$sanity.input;
  var color = theme.sanity.color.input;
  var dist = (input.radio.size - input.radio.markSize) / 2;
  return styled.css(_templateObject2$d || (_templateObject2$d = _taggedTemplateLiteralLoose(["\n    appearance: none;\n    position: absolute;\n    top: 0;\n    left: 0;\n    opacity: 0;\n    height: 100%;\n    width: 100%;\n    outline: none;\n    z-index: 1;\n    padding: 0;\n    margin: 0;\n    border-radius: ", ";\n    border: none;\n\n    /* enabled */\n    & + span {\n      display: block;\n      position: relative;\n      height: ", ";\n      width: ", ";\n      border-radius: ", ";\n      background: ", ";\n      box-shadow: ", ";\n\n      &::after {\n        content: '';\n        position: absolute;\n        top: ", ";\n        left: ", ";\n        height: ", ";\n        width: ", ";\n        border-radius: ", ";\n        background: ", ";\n        opacity: 0;\n      }\n    }\n\n    /* focused */\n    &:not(:disabled):focus + span {\n      box-shadow: ", ";\n    }\n\n    &:not(:disabled):focus:not(:focus-visible) + span {\n      box-shadow: ", ";\n    }\n\n    &:checked + span::after {\n      opacity: 1;\n    }\n\n    /* read only */\n    &[data-read-only] + span {\n      box-shadow: 0 0 0 1px ", ";\n      background: ", ";\n\n      &::after {\n        background: ", ";\n      }\n    }\n\n    /* disabled */\n    &:not([data-read-only]):disabled + span {\n      box-shadow: 0 0 0 1px ", ";\n      background: ", ";\n\n      &::after {\n        background: ", ";\n      }\n    }\n  "])), rem(input.radio.size / 2), rem(input.radio.size), rem(input.radio.size), rem(input.radio.size / 2), color["default"].enabled.bg, focusRingBorderStyle({
    color: color["default"].enabled.border,
    width: input.border.width
  }), rem(dist), rem(dist), rem(input.radio.markSize), rem(input.radio.markSize), rem(input.radio.markSize / 2), color["default"].enabled.fg, focusRingStyle({
    border: {
      width: input.border.width,
      color: color["default"].enabled.border
    },
    focusRing: focusRing
  }), focusRingBorderStyle({
    color: color["default"].enabled.border,
    width: input.border.width
  }), color["default"].readOnly.border, color["default"].readOnly.bg, color["default"].readOnly.fg, color["default"].disabled.border, color["default"].disabled.bg, color["default"].disabled.fg);
}

var _excluded$m = ["className", "disabled", "style", "customValidity", "readOnly"];
var Root$h = styled__default["default"].div(radioBaseStyle);
var Input$4 = styled__default["default"].input(inputElementStyle);
/**
 * @public
 */

var Radio = /*#__PURE__*/React.forwardRef(function Radio(props, forwardedRef) {
  var className = props.className,
      disabled = props.disabled,
      style = props.style,
      customValidity = props.customValidity,
      readOnly = props.readOnly,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$m);

  var ref = useForwardedRef(forwardedRef);
  useCustomValidity(ref, customValidity);
  return /*#__PURE__*/React__default["default"].createElement(Root$h, {
    className: className,
    "data-ui": "Radio",
    style: style
  }, /*#__PURE__*/React__default["default"].createElement(Input$4, _extends({
    "data-read-only": !disabled && readOnly ? '' : undefined
  }, restProps, {
    disabled: disabled || readOnly,
    readOnly: readOnly,
    ref: ref,
    type: "radio"
  })), /*#__PURE__*/React__default["default"].createElement("span", null));
});

var _templateObject$h, _templateObject2$c, _templateObject3$7, _templateObject4$5;

function rootStyle() {
  return styled.css(_templateObject$h || (_templateObject$h = _taggedTemplateLiteralLoose(["\n    position: relative;\n    width: stretch;\n\n    &:not([hidden]) {\n      display: inline-block;\n    }\n  "])));
}

function inputBaseStyle(props) {
  var theme = props.theme;
  var font = theme.sanity.fonts.text;
  return styled.css(_templateObject2$c || (_templateObject2$c = _taggedTemplateLiteralLoose(["\n    -webkit-font-smoothing: antialiased;\n    appearance: none;\n    border: 0;\n    font-family: ", ";\n    color: inherit;\n    width: 100%;\n    outline: none;\n    margin: 0;\n\n    &:disabled {\n      opacity: 1;\n    }\n  "])), font.family);
}

function inputColorStyle(props) {
  var theme = props.theme;
  var _theme$sanity = theme.sanity,
      focusRing = _theme$sanity.focusRing,
      input = _theme$sanity.input;
  var color = theme.sanity.color.input;
  return styled.css(_templateObject3$7 || (_templateObject3$7 = _taggedTemplateLiteralLoose(["\n    /* enabled */\n    background-color: ", ";\n    color: ", ";\n    box-shadow: ", ";\n\n    /* hovered */\n    @media (hover: hover) {\n      &:not(:disabled):hover {\n        background-color: ", ";\n        color: ", ";\n        box-shadow: ", ";\n      }\n    }\n\n    /* focused */\n    &:not(:disabled):focus {\n      box-shadow: ", ";\n    }\n\n    /* read-only */\n    &[data-read-only] {\n      background-color: ", ";\n      color: ", ";\n      box-shadow: ", ";\n    }\n\n    /* disabled */\n    &:not([data-read-only]):disabled {\n      background-color: ", ";\n      color: ", ";\n      box-shadow: ", ";\n    }\n  "])), color["default"].enabled.bg, color["default"].enabled.fg, focusRingBorderStyle({
    color: color["default"].enabled.border,
    width: input.border.width
  }), color["default"].hovered.bg, color["default"].hovered.fg, focusRingBorderStyle({
    color: color["default"].hovered.border,
    width: input.border.width
  }), focusRingStyle({
    border: {
      width: input.border.width,
      color: color["default"].enabled.border
    },
    focusRing: focusRing
  }), color["default"].readOnly.bg, color["default"].readOnly.fg, focusRingBorderStyle({
    color: color["default"].readOnly.border,
    width: input.border.width
  }), color["default"].disabled.bg, color["default"].disabled.fg, focusRingBorderStyle({
    color: color["default"].disabled.border,
    width: input.border.width
  }));
}

function textSize(size) {
  return {
    fontSize: rem(size.fontSize),
    lineHeight: rem(size.lineHeight)
  };
}

function inputTextSizeStyle(props) {
  var theme = props.theme,
      $fontSize = props.$fontSize;
  var sizes = theme.sanity.fonts.text.sizes;
  return responsive(theme.sanity.media, getResponsiveProp($fontSize), function (sizeIndex) {
    return textSize(sizes[sizeIndex] || sizes[2]);
  });
}

function inputStyle() {
  return [responsiveRadiusStyle, inputBaseStyle, inputColorStyle, inputTextSizeStyle, responsiveInputPaddingIconRightStyle];
}

function iconBoxStyle(props) {
  var theme = props.theme;
  var color = theme.sanity.color.input;
  return styled.css(_templateObject4$5 || (_templateObject4$5 = _taggedTemplateLiteralLoose(["\n    pointer-events: none;\n    position: absolute;\n    top: 0;\n    right: 0;\n\n    /* enabled */\n    --card-fg-color: ", ";\n\n    /* hover */\n    @media (hover: hover) {\n      select:not(disabled):not(:read-only):hover + && {\n        --card-fg-color: ", ";\n      }\n    }\n\n    /* disabled */\n    select:disabled + && {\n      --card-fg-color: ", ";\n    }\n\n    /* read-only */\n    select[data-read-only] + && {\n      --card-fg-color: ", ";\n    }\n  "])), color["default"].enabled.fg, color["default"].hovered.fg, color["default"].disabled.fg, color["default"].readOnly.fg);
}

var selectStyle = {
  root: rootStyle,
  input: inputStyle,
  iconBox: iconBoxStyle
};

var _excluded$l = ["children", "customValidity", "disabled", "fontSize", "padding", "radius", "readOnly", "space"];
var Root$g = styled__default["default"].div(selectStyle.root);
var Input$3 = styled__default["default"].select(selectStyle.input);
var IconBox = styled__default["default"](Box)(selectStyle.iconBox);
/**
 * @public
 */

var Select = /*#__PURE__*/React.forwardRef(function Select(props, forwardedRef) {
  var children = props.children,
      customValidity = props.customValidity,
      disabled = props.disabled,
      _props$fontSize = props.fontSize,
      fontSize = _props$fontSize === void 0 ? 2 : _props$fontSize,
      _props$padding = props.padding,
      padding = _props$padding === void 0 ? 3 : _props$padding,
      _props$radius = props.radius,
      radius = _props$radius === void 0 ? 1 : _props$radius,
      readOnly = props.readOnly,
      _props$space = props.space,
      space = _props$space === void 0 ? 3 : _props$space,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$l);

  var ref = useForwardedRef(forwardedRef);
  useCustomValidity(ref, customValidity);
  return /*#__PURE__*/React__default["default"].createElement(Root$g, {
    "data-ui": "Select"
  }, /*#__PURE__*/React__default["default"].createElement(Input$3, _extends({
    "data-read-only": !disabled && readOnly ? '' : undefined,
    "data-ui": "Select"
  }, restProps, {
    "$fontSize": fontSize,
    "$padding": padding,
    "$radius": radius,
    "$space": space,
    disabled: disabled || readOnly,
    ref: ref
  }), children), /*#__PURE__*/React__default["default"].createElement(IconBox, {
    padding: padding
  }, /*#__PURE__*/React__default["default"].createElement(Text, {
    size: fontSize
  }, /*#__PURE__*/React__default["default"].createElement(icons.SelectIcon, null))));
});

var BASE_STYLE = {
  '&&:not([hidden])': {
    display: 'grid'
  },
  '&[data-as="ul"],&[data-as="ol"]': {
    listStyle: 'none'
  },
  gridTemplateColumns: 'minmax(0, 1fr)',
  gridAutoRows: 'min-content'
};
function stackBaseStyle() {
  return BASE_STYLE;
}
function responsiveStackSpaceStyle(props) {
  var theme = props.theme;
  var _theme$sanity = theme.sanity,
      media = _theme$sanity.media,
      space = _theme$sanity.space;
  return responsive(media, getResponsiveProp(props.$space), function (spaceIndex) {
    return {
      gridGap: rem(space[spaceIndex])
    };
  });
}

var _excluded$k = ["as", "space"];
var Root$f = styled__default["default"](Box)(stackBaseStyle, responsiveStackSpaceStyle);
/**
 * @public
 */

var Stack = /*#__PURE__*/React.forwardRef(function Stack(props, ref) {
  var as = props.as,
      space = props.space,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$k);

  return /*#__PURE__*/React__default["default"].createElement(Root$f, _extends({
    "data-as": typeof as === 'string' ? as : undefined,
    "data-ui": "Stack"
  }, restProps, {
    "$space": space,
    forwardedAs: as,
    ref: ref
  }));
});

var _templateObject$g, _templateObject2$b, _templateObject3$6, _templateObject4$4, _templateObject5$3, _templateObject6$1, _templateObject7;
/* Root */

function switchBaseStyles() {
  return styled.css(_templateObject$g || (_templateObject$g = _taggedTemplateLiteralLoose(["\n    position: relative;\n    &:not([hidden]) {\n      display: inline-block;\n    }\n  "])));
}
/* Input */

function switchInputStyles() {
  // Visually hide the input element while keeping it interactive
  return styled.css(_templateObject2$b || (_templateObject2$b = _taggedTemplateLiteralLoose(["\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    opacity: 0;\n    height: 100%;\n    width: 100%;\n    outline: none;\n    padding: 0;\n    margin: 0;\n\n    /* Place the input element above the representation element */\n    z-index: 1;\n  "])));
}
/* Representation */

function switchRepresentationStyles(props) {
  var theme = props.theme;
  var _theme$sanity = theme.sanity,
      focusRing = _theme$sanity.focusRing,
      input = _theme$sanity.input;
  var color = theme.sanity.color.button["default"];
  return styled.css(_templateObject3$6 || (_templateObject3$6 = _taggedTemplateLiteralLoose(["\n    --switch-bg-color: ", ";\n    --switch-fg-color: ", ";\n    --switch-box-shadow: none;\n\n    &:not([hidden]) {\n      display: block;\n    }\n    position: relative;\n    width: ", ";\n    height: ", ";\n    border-radius: ", ";\n\n    /* Make sure it\u2019s not possible to interact with the wrapper element */\n    pointer-events: none;\n\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      z-index: 1;\n      box-shadow: var(--switch-box-shadow);\n      border-radius: inherit;\n    }\n\n    /* Focus styles */\n    input:focus + && {\n      --switch-box-shadow: ", ";\n    }\n\n    input:focus:not(:focus-visible) + && {\n      --switch-box-shadow: none;\n    }\n\n    input:checked + && {\n      --switch-bg-color: ", ";\n      --switch-fg-color: ", ";\n    }\n\n    @media (hover: hover) {\n      input:not(:disabled):hover + && {\n        --switch-bg-color: ", ";\n        --switch-fg-color: ", ";\n      }\n\n      input:not(:disabled):checked:hover + && {\n        --switch-bg-color: ", ";\n        --switch-fg-color: ", ";\n      }\n    }\n\n    input:not([data-read-only]):disabled + && {\n      --switch-bg-color: ", ";\n      --switch-fg-color: ", ";\n    }\n  "])), color["default"].enabled.bg, color["default"].enabled.fg, rem(input["switch"].width), rem(input["switch"].height), rem(input["switch"].height / 2), focusRingStyle({
    focusRing: focusRing
  }), color.positive.enabled.bg, color.positive.enabled.fg, color["default"].hovered.bg, color["default"].hovered.fg, color.positive.hovered.bg, color.positive.hovered.fg, color["default"].disabled.bg, color["default"].disabled.fg);
}
/* Track */

function switchTrackStyles(props) {
  var theme = props.theme;
  var input = theme.sanity.input;
  return styled.css(_templateObject4$4 || (_templateObject4$4 = _taggedTemplateLiteralLoose(["\n    &:not([hidden]) {\n      display: block;\n    }\n    background-color: var(--switch-bg-color);\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: ", ";\n    height: ", ";\n    border-radius: ", ";\n  "])), rem(input["switch"].width), rem(input["switch"].height), rem(input["switch"].height / 2));
}
/* Thumb */

function switchThumbStyles(props) {
  var $indeterminate = props.$indeterminate,
      theme = props.theme;
  var input = theme.sanity.input;
  var trackWidth = input["switch"].width;
  var trackHeight = input["switch"].height;
  var trackPadding = input["switch"].padding;
  var size = trackHeight - input["switch"].padding * 2;
  var checkedOffset = trackWidth - trackPadding * 2 - size;
  var indeterminateOffset = trackWidth / 2 - size / 2 - trackPadding;
  var checked = $indeterminate !== true && props.$checked === true;
  return styled.css(_templateObject5$3 || (_templateObject5$3 = _taggedTemplateLiteralLoose(["\n    &:not([hidden]) {\n      display: block;\n    }\n    position: absolute;\n    left: ", ";\n    top: ", ";\n    height: ", ";\n    width: ", ";\n    border-radius: ", ";\n    transition-property: transform;\n    transition-duration: ", "ms;\n    transition-timing-function: ", ";\n    background: var(--switch-fg-color);\n    transform: translate3d(0, 0, 0);\n\n    ", "\n\n    ", "\n  "])), rem(trackPadding), rem(trackPadding), rem(size), rem(size), rem(size / 2), input["switch"].transitionDurationMs, input["switch"].transitionTimingFunction, checked && styled.css(_templateObject6$1 || (_templateObject6$1 = _taggedTemplateLiteralLoose(["\n      transform: translate3d(", "px, 0, 0);\n    "])), checkedOffset), $indeterminate && styled.css(_templateObject7 || (_templateObject7 = _taggedTemplateLiteralLoose(["\n      transform: translate3d(", "px, 0, 0);\n    "])), indeterminateOffset));
}

var _excluded$j = ["checked", "className", "disabled", "indeterminate", "readOnly", "style"];
var Root$e = styled__default["default"].span(switchBaseStyles);
var Input$2 = styled__default["default"].input(switchInputStyles);
var Representation = styled__default["default"].span(switchRepresentationStyles);
var Track = styled__default["default"].span(switchTrackStyles);
var Thumb = styled__default["default"].span(switchThumbStyles);
/**
 * @public
 */

var Switch = /*#__PURE__*/React.forwardRef(function Switch(props, forwardedRef) {
  var checked = props.checked,
      className = props.className,
      disabled = props.disabled,
      indeterminate = props.indeterminate,
      readOnly = props.readOnly,
      style = props.style,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$j);

  var ref = useForwardedRef(forwardedRef);
  React.useEffect(function () {
    if (ref.current) {
      // Set the indeterminate state
      ref.current.indeterminate = indeterminate || false;
    }
  }, [indeterminate, ref]);
  return /*#__PURE__*/React__default["default"].createElement(Root$e, {
    className: className,
    "data-ui": "Switch",
    style: style
  }, /*#__PURE__*/React__default["default"].createElement(Input$2, _extends({
    "data-read-only": !disabled && readOnly ? '' : undefined
  }, restProps, {
    checked: indeterminate !== true && checked,
    disabled: disabled || readOnly,
    type: "checkbox",
    ref: ref
  })), /*#__PURE__*/React__default["default"].createElement(Representation, {
    "aria-hidden": true,
    "data-name": "representation"
  }, /*#__PURE__*/React__default["default"].createElement(Track, null), /*#__PURE__*/React__default["default"].createElement(Thumb, {
    "$checked": checked,
    "$indeterminate": indeterminate
  })));
});

var _excluded$i = ["border", "customValidity", "disabled", "fontSize", "padding", "radius"];

var _templateObject$f;
var Root$d = styled__default["default"].span(textInputRootStyle);
var InputRoot$1 = styled__default["default"].span(_templateObject$f || (_templateObject$f = _taggedTemplateLiteralLoose(["\n  flex: 1;\n  min-width: 0;\n  display: block;\n  position: relative;\n"])));
var Input$1 = styled__default["default"].textarea(responsiveInputPaddingStyle, textInputBaseStyle, textInputFontSizeStyle);
var Presentation$1 = styled__default["default"].div(responsiveRadiusStyle, textInputRepresentationStyle);
/**
 * @public
 */

var TextArea = /*#__PURE__*/React.forwardRef(function TextArea(props, forwardedRef) {
  var _props$border = props.border,
      border = _props$border === void 0 ? true : _props$border,
      customValidity = props.customValidity,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$fontSize = props.fontSize,
      fontSize = _props$fontSize === void 0 ? 2 : _props$fontSize,
      _props$padding = props.padding,
      padding = _props$padding === void 0 ? 3 : _props$padding,
      _props$radius = props.radius,
      radius = _props$radius === void 0 ? 1 : _props$radius,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$i);

  var ref = useForwardedRef(forwardedRef);
  useCustomValidity(ref, customValidity);
  return /*#__PURE__*/React__default["default"].createElement(Root$d, {
    "data-ui": "TextArea"
  }, /*#__PURE__*/React__default["default"].createElement(InputRoot$1, null, /*#__PURE__*/React__default["default"].createElement(Input$1, _extends({
    "data-as": "textarea"
  }, restProps, {
    "$fontSize": fontSize,
    "$padding": padding,
    disabled: disabled,
    ref: ref
  })), /*#__PURE__*/React__default["default"].createElement(Presentation$1, {
    "$border": border,
    "$radius": radius
  })));
});

var _excluded$h = ["border", "clearButton", "disabled", "fontSize", "icon", "iconRight", "onClear", "padding", "prefix", "radius", "readOnly", "space", "suffix", "customValidity", "type"];

var _templateObject$e, _templateObject2$a, _templateObject3$5, _templateObject4$3, _templateObject5$2;
var CLEAR_BUTTON_BOX_STYLE = {
  zIndex: 2
};
var Root$c = styled__default["default"].span(textInputRootStyle);
var InputRoot = styled__default["default"].span(_templateObject$e || (_templateObject$e = _taggedTemplateLiteralLoose(["\n  flex: 1;\n  min-width: 0;\n  display: block;\n  position: relative;\n"])));
var Prefix = styled__default["default"](Card).attrs({
  forwardedAs: 'span'
})(_templateObject2$a || (_templateObject2$a = _taggedTemplateLiteralLoose(["\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n\n  & > span {\n    display: block;\n    margin: -1px;\n  }\n"])));
var Suffix = styled__default["default"](Card).attrs({
  forwardedAs: 'span'
})(_templateObject3$5 || (_templateObject3$5 = _taggedTemplateLiteralLoose(["\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n\n  & > span {\n    display: block;\n    margin: -1px;\n  }\n"])));
var Input = styled__default["default"].input(responsiveInputPaddingStyle, textInputBaseStyle, textInputFontSizeStyle);
var Presentation = styled__default["default"].span(responsiveRadiusStyle, textInputRepresentationStyle);
var LeftBox = styled__default["default"](Box)(_templateObject4$3 || (_templateObject4$3 = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  top: 0;\n  left: 0;\n"])));
var RightCard = styled__default["default"](Card)(_templateObject5$2 || (_templateObject5$2 = _taggedTemplateLiteralLoose(["\n  background-color: transparent;\n  position: absolute;\n  top: 0;\n  right: 0;\n"])));
/**
 * @public
 */

var TextInput = /*#__PURE__*/React.forwardRef(function TextInput(props, forwardedRef) {
  var _props$border = props.border,
      border = _props$border === void 0 ? true : _props$border,
      clearButton = props.clearButton,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$fontSize = props.fontSize,
      fontSize = _props$fontSize === void 0 ? 2 : _props$fontSize,
      icon = props.icon,
      iconRight = props.iconRight,
      onClear = props.onClear,
      _props$padding = props.padding,
      paddingProp = _props$padding === void 0 ? 3 : _props$padding,
      prefix = props.prefix,
      _props$radius = props.radius,
      radiusProp = _props$radius === void 0 ? 1 : _props$radius,
      readOnly = props.readOnly,
      _props$space = props.space,
      space = _props$space === void 0 ? 3 : _props$space,
      suffix = props.suffix,
      customValidity = props.customValidity,
      _props$type = props.type,
      type = _props$type === void 0 ? 'text' : _props$type,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$h);

  var ref = useForwardedRef(forwardedRef);
  var padding = useResponsiveProp(paddingProp);
  var radius = useResponsiveProp(radiusProp); // Transient properties

  var $hasClearButton = Boolean(clearButton);
  var $hasIcon = Boolean(icon);
  var $hasIconRight = Boolean(iconRight);
  var $hasSuffix = Boolean(suffix);
  var $hasPrefix = Boolean(prefix);
  useCustomValidity(ref, customValidity); // Prevent the clear button from taking the focus away from the input

  var handleClearMouseDown = React.useCallback(function (event) {
    event.preventDefault();
    event.stopPropagation();
  }, []);
  var handleClearClick = React.useCallback(function (event) {
    var _ref$current;

    event.preventDefault();
    event.stopPropagation();
    if (onClear) onClear(); // Focus the input, in case focus has been lost when clicking the clear button

    (_ref$current = ref.current) == null ? void 0 : _ref$current.focus();
  }, [onClear, ref]); // Render prefix (memoized)

  var prefixNode = React.useMemo(function () {
    return prefix && /*#__PURE__*/React__default["default"].createElement(Prefix, {
      borderTop: true,
      borderLeft: true,
      borderBottom: true,
      radius: radius,
      sizing: "border",
      tone: "inherit"
    }, /*#__PURE__*/React__default["default"].createElement("span", null, prefix));
  }, [prefix, radius]); // Render presentation (memoized)

  var presentationNode = React.useMemo(function () {
    return /*#__PURE__*/React__default["default"].createElement(Presentation, {
      "$border": border,
      "$hasPrefix": $hasPrefix,
      "$hasSuffix": $hasSuffix,
      "$radius": radius
    }, icon && /*#__PURE__*/React__default["default"].createElement(LeftBox, {
      padding: padding
    }, /*#__PURE__*/React__default["default"].createElement(Text, {
      size: fontSize
    }, /*#__PURE__*/React.isValidElement(icon) && icon, ReactIs.isValidElementType(icon) && /*#__PURE__*/React.createElement(icon))), !$hasClearButton && iconRight && /*#__PURE__*/React__default["default"].createElement(RightCard, {
      padding: padding
    }, /*#__PURE__*/React__default["default"].createElement(Text, {
      size: fontSize
    }, /*#__PURE__*/React.isValidElement(iconRight) && iconRight, ReactIs.isValidElementType(iconRight) && /*#__PURE__*/React.createElement(iconRight))));
  }, [border, fontSize, icon, iconRight, padding, radius, $hasClearButton, $hasPrefix, $hasSuffix]); // Render clear button (memoized)

  var clearButtonBoxPadding = React.useMemo(function () {
    return padding.map(function (v) {
      if (v === 0) return 0;
      if (v === 1) return 1;
      if (v === 2) return 1;
      return v - 2;
    });
  }, [padding]);
  var clearButtonPadding = React.useMemo(function () {
    return padding.map(function (v) {
      if (v === 0) return 0;
      if (v === 1) return 0;
      if (v === 2) return 1;
      return v - 1;
    });
  }, [padding]);
  var clearButtonProps = React.useMemo(function () {
    return typeof clearButton === 'object' ? clearButton : EMPTY_RECORD$1;
  }, [clearButton]);
  var clearButtonNode = React.useMemo(function () {
    return !disabled && !readOnly && clearButton && /*#__PURE__*/React__default["default"].createElement(RightCard, {
      forwardedAs: "span",
      padding: clearButtonBoxPadding,
      style: CLEAR_BUTTON_BOX_STYLE,
      tone: customValidity ? 'critical' : 'inherit'
    }, /*#__PURE__*/React__default["default"].createElement(Button, _extends({
      "data-qa": "clear-button",
      fontSize: fontSize,
      icon: icons.CloseIcon,
      mode: "bleed",
      padding: clearButtonPadding,
      radius: radius
    }, clearButtonProps, {
      onClick: handleClearClick,
      onMouseDown: handleClearMouseDown
    })));
  }, [clearButton, clearButtonBoxPadding, clearButtonPadding, clearButtonProps, customValidity, disabled, fontSize, handleClearClick, handleClearMouseDown, radius, readOnly]); // Render suffix (memoized)

  var suffixNode = React.useMemo(function () {
    return suffix && /*#__PURE__*/React__default["default"].createElement(Suffix, {
      borderTop: true,
      borderRight: true,
      borderBottom: true,
      radius: radius,
      sizing: "border",
      tone: "inherit"
    }, /*#__PURE__*/React__default["default"].createElement("span", null, suffix));
  }, [radius, suffix]);
  return /*#__PURE__*/React__default["default"].createElement(Root$c, {
    "data-ui": "TextInput"
  }, prefixNode, /*#__PURE__*/React__default["default"].createElement(InputRoot, null, /*#__PURE__*/React__default["default"].createElement(Input, _extends({
    "data-as": "input"
  }, restProps, {
    "$iconLeft": $hasIcon,
    "$iconRight": $hasIconRight || $hasClearButton,
    "$padding": padding,
    "$space": space,
    "$fontSize": fontSize,
    disabled: disabled,
    readOnly: readOnly,
    ref: ref,
    type: type
  })), presentationNode, clearButtonNode), suffixNode);
});

var _templateObject$d, _templateObject2$9, _templateObject3$4;
var Root$b = styled__default["default"].div(_templateObject$d || (_templateObject$d = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  width: 15px;\n  height: 15px;\n  fill: none;\n\n  :empty + & {\n    display: none;\n  }\n\n  & > svg {\n    &:not([hidden]) {\n      display: block;\n    }\n    transform-origin: 7.5px 7.5px;\n  }\n\n  [data-popper-placement^='top'] > div > & {\n    bottom: -15px;\n  }\n\n  [data-popper-placement^='right'] > div > & {\n    left: -15px;\n\n    & > svg {\n      transform: rotate(90deg);\n    }\n  }\n\n  [data-popper-placement^='left'] > div > & {\n    right: -15px;\n\n    & > svg {\n      transform: rotate(-90deg);\n    }\n  }\n\n  [data-popper-placement^='bottom'] > div > & {\n    top: -15px;\n\n    & > svg {\n      transform: rotate(180deg);\n    }\n  }\n"])));
var Border = styled__default["default"].path(_templateObject2$9 || (_templateObject2$9 = _taggedTemplateLiteralLoose(["\n  fill: var(--card-shadow-outline-color);\n"])));
var Shape = styled__default["default"].path(_templateObject3$4 || (_templateObject3$4 = _taggedTemplateLiteralLoose(["\n  fill: var(--card-bg-color);\n"])));
var TooltipArrow = /*#__PURE__*/React.forwardRef(function TooltipArrow(props, ref) {
  var restProps = _extends({}, props);

  return /*#__PURE__*/React__default["default"].createElement(Root$b, _extends({}, restProps, {
    ref: ref
  }), /*#__PURE__*/React__default["default"].createElement("svg", {
    width: "15",
    height: "15",
    viewBox: "0 0 15 15"
  }, /*#__PURE__*/React__default["default"].createElement(Border, {
    d: "M11.5266 1C11.032 1.32802 10.5837 1.73105 10.1995 2.20057L9.04792 3.6081C8.24771 4.58614 6.7523 4.58614 5.95209 3.6081L4.80047 2.20057C4.41632 1.73105 3.96796 1.32802 3.47341 1H0.156727C1.65639 1 3.07687 1.67313 4.02651 2.83381L5.17813 4.24134C6.37844 5.70839 8.62156 5.70839 9.82187 4.24134L10.9735 2.83381C11.9231 1.67313 13.3436 1 14.8433 1H11.5266Z"
  }), /*#__PURE__*/React__default["default"].createElement(Shape, {
    d: "M0.156725 0C1.95632 0 3.66089 0.80776 4.80047 2.20057L5.95209 3.6081C6.75229 4.58614 8.24771 4.58614 9.04791 3.6081L10.1995 2.20057C11.3391 0.80776 13.0437 0 14.8433 0H15H0H0.156725Z"
  })));
});

var _excluded$g = ["allowedAutoPlacements", "boundaryElement", "children", "content", "disabled", "fallbackPlacements", "placement", "portal", "scheme", "zOffset"];

var _templateObject$c;
var Root$a = styled__default["default"](Layer)(_templateObject$c || (_templateObject$c = _taggedTemplateLiteralLoose(["\n  pointer-events: none;\n"])));
/**
 * @public
 */

var Tooltip = /*#__PURE__*/React.forwardRef(function Tooltip(props, ref) {
  var _theme$sanity$layer;

  var boundaryElementContext = useBoundaryElement();
  var theme = useTheme();

  var allowedAutoPlacements = props.allowedAutoPlacements,
      _props$boundaryElemen = props.boundaryElement,
      boundaryElement = _props$boundaryElemen === void 0 ? boundaryElementContext == null ? void 0 : boundaryElementContext.element : _props$boundaryElemen,
      children = props.children,
      content = props.content,
      disabled = props.disabled,
      fallbackPlacements = props.fallbackPlacements,
      _props$placement = props.placement,
      placement = _props$placement === void 0 ? 'bottom' : _props$placement,
      portal = props.portal,
      scheme = props.scheme,
      _props$zOffset = props.zOffset,
      zOffset = _props$zOffset === void 0 ? (_theme$sanity$layer = theme.sanity.layer) == null ? void 0 : _theme$sanity$layer.tooltip.zOffset : _props$zOffset,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$g);

  var forwardedRef = useForwardedRef(ref);

  var _useState = React.useState(null),
      referenceElement = _useState[0],
      setReferenceElement = _useState[1];

  var _useState2 = React.useState(null),
      popperElement = _useState2[0],
      setPopperElement = _useState2[1];

  var _useState3 = React.useState(null),
      arrowElement = _useState3[0],
      setArrowElement = _useState3[1];

  var popper = reactPopper.usePopper(referenceElement, popperElement, {
    placement: placement,
    modifiers: [{
      name: 'arrow',
      options: {
        element: arrowElement,
        padding: 4
      }
    }, {
      name: 'preventOverflow',
      options: {
        altAxis: true,
        boundary: boundaryElement || undefined,
        padding: 4
      }
    }, {
      name: 'offset',
      options: {
        offset: [0, 3]
      }
    }, {
      name: 'flip',
      options: {
        allowedAutoPlacements: allowedAutoPlacements,
        fallbackPlacements: fallbackPlacements
      }
    }]
  });
  var forceUpdate = popper.forceUpdate;

  var _useState4 = React.useState(false),
      isOpen = _useState4[0],
      setIsOpen = _useState4[1];

  var handleBlur = React.useCallback(function () {
    return setIsOpen(false);
  }, []);
  var handleFocus = React.useCallback(function () {
    return setIsOpen(true);
  }, []);
  var handleMouseEnter = React.useCallback(function () {
    return setIsOpen(true);
  }, []);
  var handleMouseLeave = React.useCallback(function () {
    return setIsOpen(false);
  }, []); // Detect whether the mouse is moving outside of the reference element. This is sometimes
  // necessary, because the tooltip might not always close as it should (e.g. when clicking
  // the reference element triggers a CPU-heavy operation.)

  React.useEffect(function () {
    if (!isOpen) return;

    function handleWindowMouseMove(event) {
      if (!referenceElement) return;
      var isHoveringReference = referenceElement === event.target || event.target instanceof Node && referenceElement.contains(event.target);

      if (!isHoveringReference) {
        setIsOpen(false);
        window.removeEventListener('mousemove', handleWindowMouseMove);
      }
    }

    window.addEventListener('mousemove', handleWindowMouseMove);
    return function () {
      window.removeEventListener('mousemove', handleWindowMouseMove);
    };
  }, [isOpen, referenceElement]);
  React.useEffect(function () {
    if (forceUpdate) forceUpdate();
  }, [forceUpdate, content]); // Close when `disabled` changes to `true`

  React.useEffect(function () {
    if (disabled) setIsOpen(false);
  }, [disabled]); // Close when `content` changes to falsy

  React.useEffect(function () {
    if (!content) setIsOpen(false);
  }, [content]);

  var setRef = function setRef(el) {
    setPopperElement(el);
    forwardedRef.current = el;
  };

  if (!children) return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null);
  if (disabled) return children;
  var referenceProps = {
    onBlur: handleBlur,
    onFocus: handleFocus,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    ref: setReferenceElement
  };
  var referenceNode = /*#__PURE__*/React.cloneElement(children, referenceProps);
  var popperNode = /*#__PURE__*/React__default["default"].createElement(Root$a, _extends({
    "data-ui": "Tooltip"
  }, restProps, popper.attributes.popper, {
    ref: setRef,
    style: popper.styles.popper,
    zOffset: zOffset
  }), /*#__PURE__*/React__default["default"].createElement(Card, {
    radius: 2,
    scheme: scheme,
    shadow: 3
  }, content, /*#__PURE__*/React__default["default"].createElement(TooltipArrow, {
    ref: setArrowElement,
    style: popper.styles.arrow
  })));
  return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, referenceNode, isOpen && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, portal && /*#__PURE__*/React__default["default"].createElement(Portal, {
    __unstable_name: typeof portal === 'string' ? portal : undefined
  }, popperNode), !portal && popperNode));
});

var _templateObject$b, _templateObject2$8, _templateObject3$3, _templateObject4$2, _templateObject5$1;
/**
 * @internal
 */

var Root$9 = styled__default["default"].div(_templateObject$b || (_templateObject$b = _taggedTemplateLiteralLoose(["\n  /* position: relative; */\n  line-height: 0;\n"])));
/**
 * @internal
 */

var ListBox = styled__default["default"](Box)(_templateObject2$8 || (_templateObject2$8 = _taggedTemplateLiteralLoose(["\n  & > ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n  }\n"])));
/**
 * @internal
 */

var ResultsPopover = styled__default["default"](Popover)(_templateObject3$3 || (_templateObject3$3 = _taggedTemplateLiteralLoose(["\n  & > div {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n  }\n\n  &[data-popper-reference-hidden='true'] {\n    display: none;\n  }\n"])));
var rotate = styled.keyframes(_templateObject4$2 || (_templateObject4$2 = _taggedTemplateLiteralLoose(["\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n"])));
/**
 * @internal
 */

var AnimatedSpinnerIcon = styled__default["default"](icons.SpinnerIcon)(_templateObject5$1 || (_templateObject5$1 = _taggedTemplateLiteralLoose(["\n  animation: ", " 500ms linear infinite;\n"])), rotate);

function AutocompleteOption(props) {
  var children = props.children,
      id = props.id,
      onSelect = props.onSelect,
      selected = props.selected,
      value = props.value;
  var handleClick = React.useCallback(function () {
    // Calling the `onSelect` in a timeout is a fix to
    // allow the `click` event to propagate in some cases
    setTimeout(function () {
      onSelect(value);
    }, 0);
  }, [onSelect, value]);
  var handleKeyDown = React.useCallback(function (event) {
    if (event.key === 'Enter' && !_isEnterToClickElement(event.currentTarget)) {
      handleClick();
    }
  }, [handleClick]);
  return /*#__PURE__*/React__default["default"].createElement("li", {
    "aria-selected": selected,
    "data-ui": "AutocompleteOption",
    id: id,
    role: "option",
    onClick: handleClick,
    onKeyDown: handleKeyDown
  }, children);
}

/**
 * @internal
 */
function autocompleteReducer(state, msg) {
  if (msg.type === 'input/change') {
    return _extends({}, state, {
      activeValue: null,
      focused: true,
      query: msg.query
    });
  }

  if (msg.type === 'input/focus') {
    return _extends({}, state, {
      focused: true
    });
  }

  if (msg.type === 'root/blur') {
    return _extends({}, state, {
      focused: false,
      query: null
    });
  }

  if (msg.type === 'root/clear') {
    return _extends({}, state, {
      activeValue: null,
      query: null,
      value: null
    });
  }

  if (msg.type === 'root/escape') {
    return _extends({}, state, {
      focused: false,
      query: null
    });
  }

  if (msg.type === 'root/open') {
    return _extends({}, state, {
      query: state.query || msg.query
    });
  }

  if (msg.type === 'root/setActiveValue') {
    return _extends({}, state, {
      activeValue: msg.value,
      listFocused: msg.listFocused || state.listFocused
    });
  }

  if (msg.type === 'root/setListFocused') {
    // prevent unnecessary re-render
    if (state.listFocused === msg.listFocused) return state;
    return _extends({}, state, {
      listFocused: msg.listFocused
    });
  }

  if (msg.type === 'value/change') {
    return _extends({}, state, {
      activeValue: msg.value,
      query: null,
      value: msg.value
    });
  }

  return state;
}

/**
 * @internal
 */
var EMPTY_RECORD = {};
/**
 * @internal
 */

var AUTOCOMPLETE_LISTBOX_IGNORE_KEYS = ['Control', 'Shift', 'Alt', 'Enter', 'Home', 'End', 'PageUp', 'PageDown', 'Meta', 'Tab', 'CapsLock'];
/**
 * @internal
 */

var AUTOCOMPLETE_POPOVER_MARGINS = [0, 1, 1, 1];
/**
 * @internal
 */

var AUTOCOMPLETE_POPOVER_PLACEMENT = 'bottom-start';
/**
 * @internal
 */

var AUTOCOMPLETE_POPOVER_FALLBACK_PLACEMENTS = ['top-start'];

var _excluded$f = ["border", "customValidity", "disabled", "filterOption", "fontSize", "icon", "id", "listBox", "loading", "onBlur", "onChange", "onFocus", "onQueryChange", "onSelect", "openButton", "options", "padding", "popover", "prefix", "radius", "readOnly", "relatedElements", "renderOption", "renderPopover", "renderValue", "suffix", "value"];

var defaultRenderValue = function defaultRenderValue(value, option) {
  return option ? option.value : value;
};

var defaultFilterOption = function defaultFilterOption(query, option) {
  return option.value.toLowerCase().indexOf(query.toLowerCase()) > -1;
};

var InnerAutocomplete = /*#__PURE__*/React.forwardRef(function InnerAutocomplete(props, ref) {
  var _props$border = props.border,
      border = _props$border === void 0 ? true : _props$border,
      customValidity = props.customValidity,
      disabled = props.disabled,
      filterOptionProp = props.filterOption,
      _props$fontSize = props.fontSize,
      fontSize = _props$fontSize === void 0 ? 2 : _props$fontSize,
      icon = props.icon,
      id = props.id,
      _props$listBox = props.listBox,
      listBox = _props$listBox === void 0 ? {} : _props$listBox,
      loading = props.loading,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onFocus = props.onFocus,
      onQueryChange = props.onQueryChange,
      onSelect = props.onSelect,
      openButton = props.openButton,
      optionsProp = props.options,
      _props$padding = props.padding,
      paddingProp = _props$padding === void 0 ? 3 : _props$padding,
      _props$popover = props.popover,
      popover = _props$popover === void 0 ? {} : _props$popover,
      prefix = props.prefix,
      _props$radius = props.radius,
      radius = _props$radius === void 0 ? 3 : _props$radius,
      readOnly = props.readOnly,
      relatedElements = props.relatedElements,
      renderOptionProp = props.renderOption,
      renderPopover = props.renderPopover,
      _props$renderValue = props.renderValue,
      renderValue = _props$renderValue === void 0 ? defaultRenderValue : _props$renderValue,
      suffix = props.suffix,
      valueProp = props.value,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$f);

  var _useReducer = React.useReducer(autocompleteReducer, {
    activeValue: valueProp || null,
    focused: false,
    listFocused: false,
    query: null,
    value: valueProp || null
  }),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  var activeValue = state.activeValue,
      focused = state.focused,
      listFocused = state.listFocused,
      query = state.query,
      value = state.value;
  var defaultRenderOption = React.useCallback(function (_ref) {
    var value = _ref.value;
    return /*#__PURE__*/React__default["default"].createElement(Card, {
      "data-as": "button",
      padding: paddingProp,
      radius: 2,
      tone: "inherit"
    }, /*#__PURE__*/React__default["default"].createElement(Text, {
      size: fontSize,
      textOverflow: "ellipsis"
    }, value));
  }, [fontSize, paddingProp]);
  var renderOption = typeof renderOptionProp === 'function' ? renderOptionProp : defaultRenderOption;
  var filterOption = typeof filterOptionProp === 'function' ? filterOptionProp : defaultFilterOption;

  var _useState = React.useState(null),
      rootElement = _useState[0],
      setRootElement = _useState[1];

  var _useState2 = React.useState(null),
      resultsPopoverElement = _useState2[0],
      setResultsPopoverElement = _useState2[1];

  var inputElementRef = React.useRef(null);
  var listBoxElementRef = React.useRef(null);
  var focusedElementRef = React.useRef(null);
  var valueRef = React.useRef(value);
  var valuePropRef = React.useRef(valueProp);
  var forwardedRef = useForwardedRef(ref);
  var popoverMouseWithinRef = React.useRef(false);
  var listBoxId = id + "-listbox";
  var options = Array.isArray(optionsProp) ? optionsProp : EMPTY_ARRAY;
  var padding = useResponsiveProp(paddingProp);
  var currentOption = React.useMemo(function () {
    return value !== null ? options.find(function (o) {
      return o.value === value;
    }) : undefined;
  }, [options, value]);
  var filteredOptions = React.useMemo(function () {
    return options.filter(function (option) {
      return query ? filterOption(query, option) : true;
    });
  }, [filterOption, options, query]);
  var filteredOptionsLen = filteredOptions.length;
  var activeItemId = activeValue ? id + "-option-" + activeValue : undefined;
  var expanded = query !== null && loading || focused && query !== null;
  var handleRootBlur = React.useCallback(function (event) {
    setTimeout(function () {
      // NOTE: This is a workaround for a bug that may happen in Chrome (clicking the scrollbar
      // closes the results in certain situations):
      // - Do not handle blur if the mouse is within the popover
      if (popoverMouseWithinRef.current) {
        return;
      }

      var elements = (relatedElements || []).concat(rootElement ? [rootElement] : [], resultsPopoverElement ? [resultsPopoverElement] : []);
      var focusInside = false;

      if (document.activeElement) {
        for (var _iterator = _createForOfIteratorHelperLoose(elements), _step; !(_step = _iterator()).done;) {
          var e = _step.value;

          if (e === document.activeElement || e.contains(document.activeElement)) {
            focusInside = true;
            break;
          }
        }
      }

      if (focusInside === false) {
        dispatch({
          type: 'root/blur'
        });
        popoverMouseWithinRef.current = false;
        if (onQueryChange) onQueryChange(null);
        if (onBlur) onBlur(event);
      }
    }, 0);
  }, [onBlur, onQueryChange, relatedElements, resultsPopoverElement, rootElement]);
  var handleRootFocus = React.useCallback(function (event) {
    var listBoxElement = listBoxElementRef.current;
    var focusedElement = event.target instanceof HTMLElement ? event.target : null;
    focusedElementRef.current = focusedElement;
    var nextListFocused = Boolean(listBoxElement && focusedElement && listBoxElement.contains(focusedElement));
    dispatch({
      type: 'root/setListFocused',
      listFocused: nextListFocused
    });
  }, []);
  var handleOptionSelect = React.useCallback(function (v) {
    var _inputElementRef$curr;

    dispatch({
      type: 'value/change',
      value: v
    });
    popoverMouseWithinRef.current = false;
    if (onSelect) onSelect(v);
    valueRef.current = v;
    if (onChange) onChange(v);
    if (onQueryChange) onQueryChange(null);
    (_inputElementRef$curr = inputElementRef.current) == null ? void 0 : _inputElementRef$curr.focus();
  }, [onChange, onSelect, onQueryChange]);
  var handleRootKeyDown = React.useCallback(function (event) {
    if (event.key === 'ArrowDown') {
      event.preventDefault();
      if (!filteredOptionsLen) return;
      var activeOption = filteredOptions.find(function (o) {
        return o.value === activeValue;
      });
      var activeIndex = activeOption ? filteredOptions.indexOf(activeOption) : -1;
      var nextActiveOption = filteredOptions[(activeIndex + 1) % filteredOptionsLen];

      if (nextActiveOption) {
        dispatch({
          type: 'root/setActiveValue',
          value: nextActiveOption.value,
          listFocused: true
        });
      }

      return;
    }

    if (event.key === 'ArrowUp') {
      event.preventDefault();
      if (!filteredOptionsLen) return;

      var _activeOption = filteredOptions.find(function (o) {
        return o.value === activeValue;
      });

      var _activeIndex = _activeOption ? filteredOptions.indexOf(_activeOption) : -1;

      var _nextActiveOption = filteredOptions[_activeIndex === -1 ? filteredOptionsLen - 1 : (filteredOptionsLen + _activeIndex - 1) % filteredOptionsLen];

      if (_nextActiveOption) {
        dispatch({
          type: 'root/setActiveValue',
          value: _nextActiveOption.value,
          listFocused: true
        });
      }

      return;
    }

    if (event.key === 'Escape') {
      var _inputElementRef$curr2;

      dispatch({
        type: 'root/escape'
      });
      popoverMouseWithinRef.current = false;
      if (onQueryChange) onQueryChange(null);
      (_inputElementRef$curr2 = inputElementRef.current) == null ? void 0 : _inputElementRef$curr2.focus();
      return;
    }

    var target = event.target;
    var listEl = listBoxElementRef.current;

    if ((listEl === target || listEl != null && listEl.contains(target)) && !AUTOCOMPLETE_LISTBOX_IGNORE_KEYS.includes(event.key)) {
      var _inputElementRef$curr3;

      (_inputElementRef$curr3 = inputElementRef.current) == null ? void 0 : _inputElementRef$curr3.focus();
      return;
    }
  }, [activeValue, filteredOptions, filteredOptionsLen, onQueryChange]);
  var handleInputChange = React.useCallback(function (event) {
    var nextQuery = event.currentTarget.value;
    dispatch({
      type: 'input/change',
      query: nextQuery
    });
    if (onQueryChange) onQueryChange(nextQuery);
  }, [onQueryChange]);
  var handleInputFocus = React.useCallback(function (event) {
    if (!focused) {
      dispatch({
        type: 'input/focus'
      });
      if (onFocus) onFocus(event);
    }
  }, [focused, onFocus]);
  var handlePopoverMouseEnter = React.useCallback(function () {
    popoverMouseWithinRef.current = true;
  }, []);
  var handlePopoverMouseLeave = React.useCallback(function () {
    popoverMouseWithinRef.current = false;
  }, []);
  var handleClearButtonClick = React.useCallback(function () {
    var _inputElementRef$curr4;

    dispatch({
      type: 'root/clear'
    });
    valueRef.current = '';
    if (onChange) onChange('');
    if (onQueryChange) onQueryChange(null);
    (_inputElementRef$curr4 = inputElementRef.current) == null ? void 0 : _inputElementRef$curr4.focus();
  }, [onChange, onQueryChange]);
  var handleClearButtonFocus = React.useCallback(function () {
    dispatch({
      type: 'input/focus'
    });
  }, []); // Change the value when `value` prop changes

  React.useEffect(function () {
    if (valueProp !== valuePropRef.current) {
      valuePropRef.current = valueProp;

      if (valueProp !== undefined) {
        dispatch({
          type: 'value/change',
          value: valueProp
        });
        valueRef.current = valueProp;
      }

      return;
    }

    if (valueProp !== value) {
      dispatch({
        type: 'value/change',
        value: valueProp || null
      });
    }
  }, [valueProp, value]); // Reset active item when closing

  React.useEffect(function () {
    if (!focused) {
      if (valueRef.current) {
        dispatch({
          type: 'root/setActiveValue',
          value: valueRef.current
        });
      }
    }
  }, [focused]); // Focus the selected item

  React.useEffect(function () {
    var listElement = listBoxElementRef.current;
    if (!listElement) return;
    var activeOption = filteredOptions.find(function (o) {
      return o.value === activeValue;
    });

    if (activeOption) {
      var activeIndex = filteredOptions.indexOf(activeOption);
      var activeItemElement = listElement.childNodes[activeIndex];

      if (activeItemElement) {
        if (_hasFocus(activeItemElement)) {
          // already focused
          return;
        }

        focusFirstDescendant(activeItemElement);
      }
    }
  }, [activeValue, filteredOptions]);
  var setRef = React.useCallback(function (el) {
    inputElementRef.current = el;
    forwardedRef.current = el;
  }, [forwardedRef]);
  var clearButton = React.useMemo(function () {
    if (!loading && !disabled && value) {
      return {
        'aria-label': 'Clear',
        onFocus: handleClearButtonFocus
      };
    }

    return undefined;
  }, [disabled, handleClearButtonFocus, loading, value]);
  var openButtonBoxPadding = React.useMemo(function () {
    return padding.map(function (v) {
      if (v === 0) return 0;
      if (v === 1) return 1;
      if (v === 2) return 1;
      return v - 2;
    });
  }, [padding]);
  var openButtonPadding = React.useMemo(function () {
    return padding.map(function (v) {
      if (v === 0) return 0;
      if (v === 1) return 0;
      if (v === 2) return 1;
      return v - 1;
    });
  }, [padding]);
  var openButtonProps = React.useMemo(function () {
    return typeof openButton === 'object' ? openButton : EMPTY_RECORD;
  }, [openButton]);
  var handleOpenClick = React.useCallback(function (event) {
    dispatch({
      type: 'root/open',
      query: value ? renderValue(value, currentOption) : ''
    });
    if (openButtonProps.onClick) openButtonProps.onClick(event);

    _raf(function () {
      var _inputElementRef$curr5;

      return (_inputElementRef$curr5 = inputElementRef.current) == null ? void 0 : _inputElementRef$curr5.focus();
    });
  }, [currentOption, openButtonProps, renderValue, value]);
  var openButtonNode = React.useMemo(function () {
    return !disabled && !readOnly && openButton ? /*#__PURE__*/React__default["default"].createElement(Box, {
      "aria-hidden": expanded,
      padding: openButtonBoxPadding
    }, /*#__PURE__*/React__default["default"].createElement(Button, _extends({
      "aria-label": "Open",
      disabled: expanded,
      fontSize: fontSize,
      icon: icons.ChevronDownIcon,
      mode: "bleed",
      padding: openButtonPadding
    }, openButtonProps, {
      onClick: handleOpenClick
    }))) : undefined;
  }, [disabled, expanded, fontSize, handleOpenClick, openButton, openButtonBoxPadding, openButtonPadding, openButtonProps, readOnly]);
  var inputValue = React.useMemo(function () {
    if (query === null) {
      if (value !== null) {
        return renderValue(value, currentOption);
      }

      return '';
    }

    return query;
  }, [currentOption, query, renderValue, value]);
  var input = /*#__PURE__*/React__default["default"].createElement(TextInput, _extends({}, restProps, {
    "aria-activedescendant": activeItemId,
    "aria-autocomplete": "list",
    "aria-expanded": expanded,
    "aria-owns": listBoxId,
    autoCapitalize: "off",
    autoComplete: "off",
    autoCorrect: "off",
    border: border,
    clearButton: clearButton,
    customValidity: customValidity,
    disabled: disabled,
    fontSize: fontSize,
    icon: icon,
    iconRight: loading && AnimatedSpinnerIcon,
    id: id,
    inputMode: "search",
    onChange: handleInputChange,
    onClear: handleClearButtonClick,
    onFocus: handleInputFocus,
    padding: padding,
    prefix: prefix,
    radius: radius,
    readOnly: readOnly,
    ref: setRef,
    role: "combobox",
    spellCheck: false,
    suffix: suffix || openButtonNode,
    value: inputValue
  }));
  var handleListBoxKeyDown = React.useCallback(function (event) {
    // If the focus is currently in the list, move focus to the input element
    if (event.key === 'Tab') {
      var _inputElementRef$curr6;

      if (listFocused) (_inputElementRef$curr6 = inputElementRef.current) == null ? void 0 : _inputElementRef$curr6.focus();
    }
  }, [listFocused]);
  var content = React.useMemo(function () {
    if (filteredOptions.length === 0) return null;
    return /*#__PURE__*/React__default["default"].createElement(ListBox, _extends({
      onKeyDown: handleListBoxKeyDown,
      padding: 1
    }, listBox, {
      tabIndex: -1
    }), /*#__PURE__*/React__default["default"].createElement(Stack, {
      as: "ul",
      "aria-multiselectable": false,
      id: listBoxId,
      ref: listBoxElementRef,
      role: "listbox",
      space: 1
    }, filteredOptions.map(function (option) {
      var active = activeValue !== null ? option.value === activeValue : currentOption === option;
      return /*#__PURE__*/React__default["default"].createElement(AutocompleteOption, {
        id: id + "-option-" + option.value,
        key: option.value,
        onSelect: handleOptionSelect,
        selected: active,
        value: option.value
      }, /*#__PURE__*/React.cloneElement(renderOption(option), {
        disabled: loading,
        selected: active,
        tabIndex: listFocused && active ? 0 : -1
      }));
    })));
  }, [activeValue, currentOption, filteredOptions, handleOptionSelect, handleListBoxKeyDown, id, listBox, listBoxId, listFocused, loading, renderOption]);
  var results = React.useMemo(function () {
    if (renderPopover) {
      return renderPopover({
        content: content,
        hidden: !expanded,
        inputElement: inputElementRef.current,
        onMouseEnter: handlePopoverMouseEnter,
        onMouseLeave: handlePopoverMouseLeave
      }, setResultsPopoverElement);
    }

    if (filteredOptionsLen === 0) {
      return null;
    }

    return /*#__PURE__*/React__default["default"].createElement(ResultsPopover, _extends({
      __unstable_margins: AUTOCOMPLETE_POPOVER_MARGINS,
      arrow: false,
      constrainSize: true,
      content: content,
      fallbackPlacements: AUTOCOMPLETE_POPOVER_FALLBACK_PLACEMENTS,
      matchReferenceWidth: true,
      onMouseEnter: handlePopoverMouseEnter,
      onMouseLeave: handlePopoverMouseLeave,
      open: expanded,
      placement: AUTOCOMPLETE_POPOVER_PLACEMENT,
      portal: true,
      radius: radius,
      ref: setResultsPopoverElement,
      referenceElement: inputElementRef.current
    }, popover));
  }, [content, expanded, filteredOptionsLen, handlePopoverMouseEnter, handlePopoverMouseLeave, popover, radius, renderPopover]);
  return /*#__PURE__*/React__default["default"].createElement(Root$9, {
    "data-ui": "Autocomplete",
    onBlur: handleRootBlur,
    onFocus: handleRootFocus,
    onKeyDown: handleRootKeyDown,
    ref: setRootElement
  }, input, results);
});
/**
 * @public
 */

var Autocomplete = InnerAutocomplete;

var _templateObject$a, _templateObject2$7;
var Root$8 = styled__default["default"].ol(_templateObject$a || (_templateObject$a = _taggedTemplateLiteralLoose(["\n  margin: 0;\n  padding: 0;\n  display: flex;\n  list-style: none;\n  align-items: center;\n  white-space: nowrap;\n  line-height: 0;\n"])));
var ExpandButton = styled__default["default"](Button)(_templateObject2$7 || (_templateObject2$7 = _taggedTemplateLiteralLoose(["\n  appearance: none;\n  margin: -4px;\n"])));

var _excluded$e = ["children", "maxLength", "separator", "space"];
/**
 * @beta
 */

var Breadcrumbs = /*#__PURE__*/React.forwardRef(function Breadcrumbs(props, ref) {
  var children = props.children,
      maxLength = props.maxLength,
      separator = props.separator,
      _props$space = props.space,
      space = _props$space === void 0 ? 2 : _props$space,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$e);

  var _useState = React.useState(false),
      open = _useState[0],
      setOpen = _useState[1];

  var _useState2 = React.useState(null),
      expandElement = _useState2[0],
      setExpandElement = _useState2[1];

  var _useState3 = React.useState(null),
      popoverElement = _useState3[0],
      setPopoverElement = _useState3[1];

  var collapse = React.useCallback(function () {
    return setOpen(false);
  }, []);
  var expand = React.useCallback(function () {
    return setOpen(true);
  }, []);
  useClickOutside(collapse, [expandElement, popoverElement]);
  var rawItems = React.useMemo(function () {
    return React.Children.toArray(children).filter(function (child) {
      return /*#__PURE__*/React.isValidElement(child);
    });
  }, [children]);
  var items = React.useMemo(function () {
    var len = rawItems.length;

    if (maxLength && len > maxLength) {
      var beforeLength = Math.ceil(maxLength / 2);
      var afterLength = Math.floor(maxLength / 2);
      return [].concat(rawItems.slice(0, beforeLength - 1), [/*#__PURE__*/React__default["default"].createElement(Popover, {
        constrainSize: true,
        content: /*#__PURE__*/React__default["default"].createElement(Stack, {
          as: "ol",
          overflow: "auto",
          padding: space,
          space: space
        }, rawItems.slice(beforeLength - 1, len - afterLength)),
        key: "button",
        open: open,
        placement: "top",
        portal: true,
        ref: setPopoverElement
      }, /*#__PURE__*/React__default["default"].createElement(ExpandButton, {
        fontSize: 1,
        mode: "bleed",
        onClick: open ? collapse : expand,
        padding: 1,
        ref: setExpandElement,
        selected: open,
        text: "\u2026"
      }))], rawItems.slice(len - afterLength));
    }

    return rawItems;
  }, [collapse, expand, maxLength, open, rawItems, space]);
  return /*#__PURE__*/React__default["default"].createElement(Root$8, _extends({
    "data-ui": "Breadcrumbs"
  }, restProps, {
    ref: ref
  }), items.map(function (item, itemIndex) {
    return /*#__PURE__*/React__default["default"].createElement(React.Fragment, {
      key: itemIndex
    }, itemIndex > 0 && /*#__PURE__*/React__default["default"].createElement(Box, {
      "aria-hidden": true,
      as: "li",
      paddingX: space
    }, separator || /*#__PURE__*/React__default["default"].createElement(Text, {
      muted: true
    }, "/")), /*#__PURE__*/React__default["default"].createElement(Box, {
      as: "li"
    }, item));
  }));
});

function dialogStyle(_ref) {
  var theme = _ref.theme;
  var color = theme.sanity.color.base;
  return {
    '&:not([hidden])': {
      display: 'flex'
    },
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    alignItems: 'center',
    justifyContent: 'center',
    outline: 'none',
    background: color.shadow.penumbra
  };
}
function responsiveDialogPositionStyle(props) {
  var theme = props.theme;
  var media = theme.sanity.media;
  return responsive(media, getResponsiveProp(props.$position), function (position) {
    return {
      '&&': {
        position: position
      }
    };
  });
}

var key$3 = Symbol["for"]('@sanity/ui/context/dialog');
globalScope[key$3] = globalScope[key$3] || /*#__PURE__*/React.createContext({
  version: 0.0
});
/**
 * @internal
 */

var DialogContext = globalScope[key$3];

/**
 * This API might change. DO NOT USE IN PRODUCTION.
 * @beta
 */

function useDialog() {
  return React.useContext(DialogContext);
}

var _excluded$d = ["__unstable_autoFocus", "__unstable_hideCloseButton", "cardRadius", "cardShadow", "children", "contentRef", "footer", "header", "id", "onClickOutside", "onClose", "padding", "portal", "position", "scheme", "width", "zOffset"];

var _templateObject$9, _templateObject2$6, _templateObject3$2, _templateObject4$1, _templateObject5, _templateObject6;
var Root$7 = styled__default["default"](Layer)(responsivePaddingStyle, dialogStyle, responsiveDialogPositionStyle);
var DialogContainer = styled__default["default"](Container)(_templateObject$9 || (_templateObject$9 = _taggedTemplateLiteralLoose(["\n  &:not([hidden]) {\n    display: flex;\n  }\n  width: 100%;\n  height: 100%;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n"])));
var DialogCardRoot = styled__default["default"](Card)(_templateObject2$6 || (_templateObject2$6 = _taggedTemplateLiteralLoose(["\n  &:not([hidden]) {\n    display: flex;\n  }\n  width: 100%;\n  min-height: 0;\n  max-height: 100%;\n  overflow: hidden;\n"])));
var DialogLayout = styled__default["default"](Flex)(_templateObject3$2 || (_templateObject3$2 = _taggedTemplateLiteralLoose(["\n  flex: 1;\n  min-height: 0;\n  width: 100%;\n"])));
var DialogHeader = styled__default["default"](Card)(_templateObject4$1 || (_templateObject4$1 = _taggedTemplateLiteralLoose(["\n  position: relative;\n  z-index: 2;\n\n  &:after {\n    content: '';\n    display: block;\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: -1px;\n    border-bottom: 1px solid var(--card-hairline-soft-color);\n  }\n"])));
var DialogContent = styled__default["default"](Box)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteralLoose(["\n  position: relative;\n  z-index: 1;\n  overflow: auto;\n  outline: none;\n"])));
var DialogFooter = styled__default["default"](Box)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteralLoose(["\n  position: relative;\n  z-index: 3;\n  border-top: 1px solid var(--card-hairline-soft-color);\n"])));
var DialogCard = /*#__PURE__*/React.forwardRef(function DialogCard(props, ref) {
  var autoFocus = props.__unstable_autoFocus,
      hideCloseButton = props.__unstable_hideCloseButton,
      children = props.children,
      contentRef = props.contentRef,
      footer = props.footer,
      header = props.header,
      id = props.id,
      onClickOutside = props.onClickOutside,
      onClose = props.onClose,
      radius = props.radius,
      scheme = props.scheme,
      shadow = props.shadow,
      width = props.width;
  var forwardedRef = useForwardedRef(ref);

  var _useState = React.useState(null),
      rootElement = _useState[0],
      setRootElement = _useState[1];

  var localContentRef = React.useRef(null);
  var layer = useLayer();
  var isTopLayer = layer.isTopLayer;
  var labelId = id + "_label";
  var showCloseButton = Boolean(onClose) && hideCloseButton === false;
  var showHeader = Boolean(header) || showCloseButton;
  React.useEffect(function () {
    if (!autoFocus) return; // On mount: focus the first interactive element in the contents

    if (forwardedRef.current) {
      focusFirstDescendant(forwardedRef.current);
    }
  }, [autoFocus, forwardedRef]);
  useGlobalKeyDown(React.useCallback(function (event) {
    if (!isTopLayer || !onClose) return;

    if (event.key === 'Escape') {
      event.preventDefault();
      event.stopPropagation();
      onClose();
    }
  }, [isTopLayer, onClose]));
  useClickOutside(React.useCallback(function () {
    if (!isTopLayer || !onClickOutside) return;
    onClickOutside();
  }, [isTopLayer, onClickOutside]), [rootElement]);
  var setRef = React.useCallback(function (el) {
    setRootElement(el);
    forwardedRef.current = el;
  }, [forwardedRef]);
  var setContentRef = React.useCallback(function (el) {
    localContentRef.current = el;
    if (typeof contentRef === 'function') contentRef(el);else if (contentRef) contentRef.current = el;
  }, [contentRef]);
  return /*#__PURE__*/React__default["default"].createElement(DialogContainer, {
    "data-ui": "DialogCard",
    width: width
  }, /*#__PURE__*/React__default["default"].createElement(DialogCardRoot, {
    radius: radius,
    ref: setRef,
    scheme: scheme,
    shadow: shadow
  }, /*#__PURE__*/React__default["default"].createElement(DialogLayout, {
    direction: "column"
  }, showHeader && /*#__PURE__*/React__default["default"].createElement(DialogHeader, null, /*#__PURE__*/React__default["default"].createElement(Flex, null, /*#__PURE__*/React__default["default"].createElement(Box, {
    flex: 1,
    padding: 4
  }, header && /*#__PURE__*/React__default["default"].createElement(Text, {
    id: labelId,
    weight: "semibold"
  }, header)), showCloseButton && /*#__PURE__*/React__default["default"].createElement(Box, {
    padding: 2
  }, /*#__PURE__*/React__default["default"].createElement(Button, {
    "aria-label": "Close dialog",
    disabled: !onClose,
    icon: icons.CloseIcon,
    mode: "bleed",
    onClick: onClose,
    padding: 3
  })))), /*#__PURE__*/React__default["default"].createElement(DialogContent, {
    flex: 1,
    ref: setContentRef,
    tabIndex: -1
  }, children), footer && /*#__PURE__*/React__default["default"].createElement(DialogFooter, null, footer))));
});
/**
 * @public
 */

var Dialog = /*#__PURE__*/React.forwardRef(function Dialog(props, ref) {
  var _theme$sanity$layer;

  var dialog = useDialog();
  var theme = useTheme();

  var _props$__unstable_aut = props.__unstable_autoFocus,
      autoFocus = _props$__unstable_aut === void 0 ? true : _props$__unstable_aut,
      _props$__unstable_hid = props.__unstable_hideCloseButton,
      hideCloseButton = _props$__unstable_hid === void 0 ? false : _props$__unstable_hid,
      _props$cardRadius = props.cardRadius,
      cardRadius = _props$cardRadius === void 0 ? 3 : _props$cardRadius,
      _props$cardShadow = props.cardShadow,
      cardShadow = _props$cardShadow === void 0 ? 4 : _props$cardShadow,
      children = props.children,
      contentRef = props.contentRef,
      footer = props.footer,
      header = props.header,
      id = props.id,
      onClickOutside = props.onClickOutside,
      onClose = props.onClose,
      _props$padding = props.padding,
      padding = _props$padding === void 0 ? 4 : _props$padding,
      portal = props.portal,
      _props$position = props.position,
      position = _props$position === void 0 ? dialog.position || 'fixed' : _props$position,
      scheme = props.scheme,
      _props$width = props.width,
      width = _props$width === void 0 ? 0 : _props$width,
      _props$zOffset = props.zOffset,
      zOffset = _props$zOffset === void 0 ? dialog.zOffset || ((_theme$sanity$layer = theme.sanity.layer) == null ? void 0 : _theme$sanity$layer.dialog.zOffset) : _props$zOffset,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$d);

  var preDivRef = React.useRef(null);
  var postDivRef = React.useRef(null);
  var cardRef = React.useRef(null);
  var handleFocus = React.useCallback(function (event) {
    var target = event.target;
    var cardElement = cardRef.current;

    if (!cardElement) {
      return;
    }

    if (target === preDivRef.current) {
      focusLastDescendant(cardElement);
      return;
    }

    if (target === postDivRef.current) {
      focusFirstDescendant(cardElement);
      return;
    }
  }, []);
  var labelId = id + "_label";
  return /*#__PURE__*/React__default["default"].createElement(Portal, {
    __unstable_name: portal
  }, /*#__PURE__*/React__default["default"].createElement(Root$7, _extends({}, restProps, {
    "$padding": padding,
    "$position": position,
    "aria-labelledby": labelId,
    "aria-modal": true,
    "data-ui": "Dialog",
    id: id,
    onFocus: handleFocus,
    ref: ref,
    role: "dialog",
    zOffset: zOffset
  }), /*#__PURE__*/React__default["default"].createElement("div", {
    ref: preDivRef,
    tabIndex: 0
  }), /*#__PURE__*/React__default["default"].createElement(DialogCard, {
    __unstable_autoFocus: autoFocus,
    __unstable_hideCloseButton: hideCloseButton,
    contentRef: contentRef,
    footer: footer,
    header: header,
    id: id,
    onClickOutside: onClickOutside,
    onClose: onClose,
    radius: cardRadius,
    ref: cardRef,
    scheme: scheme,
    shadow: cardShadow,
    width: width
  }, children), /*#__PURE__*/React__default["default"].createElement("div", {
    ref: postDivRef,
    tabIndex: 0
  })));
});

/**
 * This API might change. DO NOT USE IN PRODUCTION.
 * @beta
 */

function DialogProvider(props) {
  var children = props.children,
      position = props.position,
      zOffset = props.zOffset;
  var contextValue = React.useMemo(function () {
    return {
      version: 0.0,
      position: position,
      zOffset: zOffset
    };
  }, [position, zOffset]);
  return /*#__PURE__*/React__default["default"].createElement(DialogContext.Provider, {
    value: contextValue
  }, children);
}

var _excluded$c = ["fontSize", "keys", "padding", "radius", "space"];

var _templateObject$8, _templateObject2$5;
var Root$6 = styled__default["default"].kbd(_templateObject$8 || (_templateObject$8 = _taggedTemplateLiteralLoose(["\n  &:not([hidden]) {\n    display: block;\n  }\n  font: inherit;\n"])));
var Key = styled__default["default"](KBD)(_templateObject2$5 || (_templateObject2$5 = _taggedTemplateLiteralLoose(["\n  &:not([hidden]) {\n    display: block;\n  }\n"])));
/**
 * @public
 */

var Hotkeys = /*#__PURE__*/React.forwardRef(function Hotkeys(props, ref) {
  var fontSize = props.fontSize,
      keys = props.keys,
      padding = props.padding,
      radius = props.radius,
      _props$space = props.space,
      space = _props$space === void 0 ? 1 : _props$space,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$c);

  if (!keys || keys.length === 0) {
    return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null);
  }

  return /*#__PURE__*/React__default["default"].createElement(Root$6, _extends({
    "data-ui": "Hotkeys"
  }, restProps, {
    ref: ref
  }), /*#__PURE__*/React__default["default"].createElement(Inline, {
    as: "span",
    space: space
  }, keys.map(function (key, i) {
    return /*#__PURE__*/React__default["default"].createElement(Key, {
      fontSize: fontSize,
      key: i,
      padding: padding,
      radius: radius
    }, key);
  })));
});

var key$2 = Symbol["for"]('@sanity/ui/context/menu');
globalScope[key$2] = globalScope[key$2] || /*#__PURE__*/React.createContext(null);
var MenuContext = globalScope[key$2];

/**
 * @internal
 */

function _isFocusable(element) {
  return isHTMLAnchorElement(element) && element.getAttribute('data-disabled') !== 'true' || isHTMLButtonElement(element) && !element.disabled;
}
/**
 * @internal
 */


function _getFocusableElements(elements) {
  return elements.filter(_isFocusable);
}
/**
 * @internal
 */

function _getDOMPath(rootElement, el) {
  var path = [];
  var e = el;

  while (e !== rootElement) {
    var parentElement = e.parentElement;
    if (!parentElement) return path;
    var children = Array.from(parentElement.childNodes);
    var index = children.indexOf(e);
    path.unshift(index);

    if (parentElement === rootElement) {
      return path;
    }

    e = parentElement;
  }

  return path;
}
var EMPTY_PATH = [];
/**
 * @internal
 */

function _sortElements(rootElement, elements) {
  if (!rootElement) return;
  var map = new WeakMap();

  for (var _iterator = _createForOfIteratorHelperLoose(elements), _step; !(_step = _iterator()).done;) {
    var el = _step.value;
    map.set(el, _getDOMPath(rootElement, el));
  }

  var _sort = function _sort(a, b) {
    var _a = map.get(a) || EMPTY_PATH;

    var _b = map.get(b) || EMPTY_PATH;

    var len = Math.max(_a.length, _b.length); // Loop until there are different indexes

    for (var i = 0; i < len; i += 1) {
      var aIndex = _a[i] || -1;
      var bIndex = _b[i] || -1;

      if (aIndex !== bIndex) {
        return aIndex - bIndex;
      }
    }

    return 0;
  };

  elements.sort(_sort);
}

/**
 * This controller is responsible for controlling UI menu state.
 *
 * @internal
 */

function useMenuController(props) {
  var onKeyDown = props.onKeyDown,
      originElement = props.originElement,
      shouldFocus = props.shouldFocus;
  var elementsRef = React.useRef([]);

  var _useState = React.useState(null),
      rootElement = _useState[0],
      setRootElement = _useState[1];

  var _useState2 = React.useState(-1),
      activeIndex = _useState2[0],
      _setActiveIndex = _useState2[1];

  var activeIndexRef = React.useRef(activeIndex);
  var activeElement = elementsRef.current[activeIndex] || null;
  var mounted = Boolean(rootElement);
  var setActiveIndex = React.useCallback(function (nextActiveIndex) {
    _setActiveIndex(nextActiveIndex);

    activeIndexRef.current = nextActiveIndex;
  }, []);
  var mount = React.useCallback(function (element, selected) {
    if (!element) return function () {
      return undefined;
    };

    if (elementsRef.current.indexOf(element) === -1) {
      elementsRef.current.push(element);

      _sortElements(rootElement, elementsRef.current);
    }

    if (selected) {
      var selectedIndex = elementsRef.current.indexOf(element);
      setActiveIndex(selectedIndex);
    }

    return function () {
      var idx = elementsRef.current.indexOf(element);

      if (idx > -1) {
        elementsRef.current.splice(idx, 1);
      }
    };
  }, [rootElement, setActiveIndex]);
  var handleKeyDown = React.useCallback(function (event) {
    // Move focus to the element that opened the menu before handling the `Tab` press
    if (event.key === 'Tab') {
      if (originElement) {
        originElement.focus();
      }

      return;
    } // Move focus to the first focusable menuitem


    if (event.key === 'Home') {
      event.preventDefault();
      event.stopPropagation();

      var focusableElements = _getFocusableElements(elementsRef.current);

      var el = focusableElements[0];
      if (!el) return;
      var currentIndex = elementsRef.current.indexOf(el);
      setActiveIndex(currentIndex);
      return;
    } // Move focus to the last focusable menuitem


    if (event.key === 'End') {
      event.preventDefault();
      event.stopPropagation();

      var _focusableElements = _getFocusableElements(elementsRef.current);

      var _el = _focusableElements[_focusableElements.length - 1];
      if (!_el) return;

      var _currentIndex = elementsRef.current.indexOf(_el);

      setActiveIndex(_currentIndex);
      return;
    }

    if (event.key === 'ArrowUp') {
      event.preventDefault();
      event.stopPropagation();

      var _focusableElements2 = _getFocusableElements(elementsRef.current);

      var focusableLen = _focusableElements2.length;
      if (focusableLen === 0) return;
      var focusedElement = elementsRef.current[activeIndexRef.current];

      var focusedIndex = _focusableElements2.indexOf(focusedElement);

      focusedIndex = (focusedIndex - 1 + focusableLen) % focusableLen;
      var _el2 = _focusableElements2[focusedIndex];

      var _currentIndex2 = elementsRef.current.indexOf(_el2);

      setActiveIndex(_currentIndex2);
      return;
    }

    if (event.key === 'ArrowDown') {
      event.preventDefault();
      event.stopPropagation();

      var _focusableElements3 = _getFocusableElements(elementsRef.current);

      var _focusableLen = _focusableElements3.length;
      if (_focusableLen === 0) return;
      var _focusedElement = elementsRef.current[activeIndexRef.current];

      var _focusedIndex = _focusableElements3.indexOf(_focusedElement);

      _focusedIndex = (_focusedIndex + 1) % _focusableLen;
      var _el3 = _focusableElements3[_focusedIndex];

      var _currentIndex3 = elementsRef.current.indexOf(_el3);

      setActiveIndex(_currentIndex3);
      return;
    }

    if (onKeyDown) {
      onKeyDown(event);
    }
  }, [onKeyDown, originElement, setActiveIndex]);
  var handleItemMouseEnter = React.useCallback(function (event) {
    var element = event.currentTarget;
    var currentIndex = elementsRef.current.indexOf(element);
    setActiveIndex(currentIndex);
  }, [setActiveIndex]);
  var handleItemMouseLeave = React.useCallback(function () {
    rootElement == null ? void 0 : rootElement.focus();
    setActiveIndex(-1);
  }, [rootElement, setActiveIndex]); // Set focus on the currently active element

  React.useEffect(function () {
    if (!mounted) return;
    var rafId = window.requestAnimationFrame(function () {
      var _activeIndex = activeIndexRef.current;

      if (_activeIndex === -1) {
        if (shouldFocus === 'first') {
          var focusableElements = _getFocusableElements(elementsRef.current);

          var el = focusableElements[0];

          if (el) {
            var currentIndex = elementsRef.current.indexOf(el);
            setActiveIndex(currentIndex);
            activeIndexRef.current = currentIndex;
          }
        }

        if (shouldFocus === 'last') {
          var _focusableElements4 = _getFocusableElements(elementsRef.current);

          var _el4 = _focusableElements4[_focusableElements4.length - 1];

          if (_el4) {
            var _currentIndex4 = elementsRef.current.indexOf(_el4);

            setActiveIndex(_currentIndex4);
            activeIndexRef.current = _currentIndex4;
          }
        }

        return;
      }

      var element = elementsRef.current[_activeIndex] || null;
      element == null ? void 0 : element.focus();
    });
    return function () {
      window.cancelAnimationFrame(rafId);
    };
  }, [activeIndex, mounted, setActiveIndex, shouldFocus]);
  return {
    activeElement: activeElement,
    activeIndex: activeIndex,
    handleItemMouseEnter: handleItemMouseEnter,
    handleItemMouseLeave: handleItemMouseLeave,
    handleKeyDown: handleKeyDown,
    mount: mount,
    rootElement: rootElement,
    setRootElement: setRootElement
  };
}

var _excluded$b = ["children", "focusFirst", "focusLast", "onClickOutside", "onEscape", "onItemClick", "onItemSelect", "onKeyDown", "originElement", "padding", "registerElement", "shouldFocus", "space"];

var _templateObject$7;
var Root$5 = styled__default["default"](Box)(_templateObject$7 || (_templateObject$7 = _taggedTemplateLiteralLoose(["\n  outline: none;\n  overflow: auto;\n"])));
/**
 * @public
 */

var Menu = /*#__PURE__*/React.forwardRef(function Menu(props, ref) {
  var children = props.children,
      onClickOutside = props.onClickOutside,
      onEscape = props.onEscape,
      onItemClick = props.onItemClick,
      onItemSelect = props.onItemSelect,
      onKeyDown = props.onKeyDown,
      originElement = props.originElement,
      _props$padding = props.padding,
      padding = _props$padding === void 0 ? 1 : _props$padding,
      registerElement = props.registerElement,
      _props$shouldFocus = props.shouldFocus,
      shouldFocus = _props$shouldFocus === void 0 ? props.focusFirst && 'first' || props.focusLast && 'last' || null : _props$shouldFocus,
      _props$space = props.space,
      space = _props$space === void 0 ? 1 : _props$space,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$b);

  var forwardedRef = useForwardedRef(ref);

  var _useLayer = useLayer(),
      isTopLayer = _useLayer.isTopLayer;

  var _useMenuController = useMenuController({
    onKeyDown: onKeyDown,
    originElement: originElement,
    shouldFocus: shouldFocus
  }),
      activeElement = _useMenuController.activeElement,
      activeIndex = _useMenuController.activeIndex,
      handleItemMouseEnter = _useMenuController.handleItemMouseEnter,
      handleItemMouseLeave = _useMenuController.handleItemMouseLeave,
      handleKeyDown = _useMenuController.handleKeyDown,
      mount = _useMenuController.mount,
      rootElement = _useMenuController.rootElement,
      setRootElement = _useMenuController.setRootElement;

  var handleRefChange = React.useCallback(function (el) {
    setRootElement(el);
    forwardedRef.current = el;
  }, [forwardedRef, setRootElement]); // Trigger `onItemSelect` when active index changes

  React.useEffect(function () {
    if (onItemSelect) onItemSelect(activeIndex);
  }, [activeIndex, onItemSelect]); // Close menu when clicking outside

  useClickOutside(React.useCallback(function (event) {
    return isTopLayer && onClickOutside && onClickOutside(event);
  }, [isTopLayer, onClickOutside]), [rootElement]); // Close menu when pressing Escape

  useGlobalKeyDown(React.useCallback(function (event) {
    if (!isTopLayer) return;

    if (event.key === 'Escape') {
      event.stopPropagation();
      if (onEscape) onEscape();
    }
  }, [isTopLayer, onEscape])); // Register root element (for nested menus)

  React.useEffect(function () {
    if (!rootElement || !registerElement) return;
    return registerElement(rootElement);
  }, [registerElement, rootElement]);
  var value = React.useMemo(function () {
    return {
      version: 0.0,
      activeElement: activeElement,
      activeIndex: activeIndex,
      mount: mount,
      onClickOutside: onClickOutside,
      onEscape: onEscape,
      onItemClick: onItemClick,
      onItemMouseEnter: handleItemMouseEnter,
      onItemMouseLeave: handleItemMouseLeave,
      registerElement: registerElement,
      // deprecated
      onMouseEnter: handleItemMouseEnter,
      onMouseLeave: handleItemMouseLeave
    };
  }, [activeElement, activeIndex, mount, handleItemMouseEnter, handleItemMouseLeave, onClickOutside, onEscape, onItemClick, registerElement]);
  return /*#__PURE__*/React__default["default"].createElement(MenuContext.Provider, {
    value: value
  }, /*#__PURE__*/React__default["default"].createElement(Root$5, _extends({
    "data-ui": "Menu"
  }, restProps, {
    onKeyDown: handleKeyDown,
    padding: padding,
    ref: handleRefChange,
    role: "menu",
    tabIndex: -1
  }), /*#__PURE__*/React__default["default"].createElement(Stack, {
    space: space
  }, children)));
});

/**
 * @public
 */

var MenuButton = /*#__PURE__*/React.forwardRef(function MenuButton(props, ref) {
  var _props$__unstable_dis = props.__unstable_disableRestoreFocusOnClose,
      disableRestoreFocusOnClose = _props$__unstable_dis === void 0 ? false : _props$__unstable_dis,
      boundaryElement = props.boundaryElement,
      buttonProp = props.button,
      id = props.id,
      menuProp = props.menu,
      onClose = props.onClose,
      placement = props.placement,
      popoverScheme = props.popoverScheme,
      portal = props.portal,
      popover = props.popover,
      popoverRadius = props.popoverRadius,
      preventOverflow = props.preventOverflow;

  var _useState = React.useState(false),
      open = _useState[0],
      setOpen = _useState[1];

  var _useState2 = React.useState(null),
      shouldFocus = _useState2[0],
      setShouldFocus = _useState2[1];

  var _useState3 = React.useState(null),
      buttonElement = _useState3[0],
      setButtonElement = _useState3[1];

  var _useState4 = React.useState([]),
      menuElements = _useState4[0],
      setChildMenuElements = _useState4[1];

  var openRef = React.useRef(open);
  React.useEffect(function () {
    if (onClose && !open && openRef.current) {
      onClose();
    }
  }, [onClose, open]);
  React.useEffect(function () {
    openRef.current = open;
  }, [open]);
  var handleButtonClick = React.useCallback(function () {
    setOpen(function (v) {
      return !v;
    });
    setShouldFocus(null);
  }, []);
  var handleButtonKeyDown = React.useCallback(function (event) {
    // On `ArrowDown`, `Enter` and `Space`
    // - Opens menu and moves focus to first menuitem
    if (event.key === 'ArrowDown' || event.key === 'Enter' || event.key === ' ') {
      event.preventDefault();
      setOpen(true);
      setShouldFocus('first');
      return;
    } // On `ArrowUp`
    // - 	Opens menu and moves focus to last menuitem


    if (event.key === 'ArrowUp') {
      event.preventDefault();
      setOpen(true);
      setShouldFocus('last');
      return;
    }
  }, []);
  var handleMenuClickOutside = React.useCallback(function (event) {
    var target = event.target;

    if (!(target instanceof Node)) {
      return;
    }

    if (buttonElement && (target === buttonElement || buttonElement.contains(target))) {
      return;
    }

    for (var _iterator = _createForOfIteratorHelperLoose(menuElements), _step; !(_step = _iterator()).done;) {
      var el = _step.value;

      if (target === el || el.contains(target)) {
        return;
      }
    }

    setOpen(false);
  }, [buttonElement, menuElements]);
  var handleMenuEscape = React.useCallback(function () {
    setOpen(false);
    if (disableRestoreFocusOnClose) return;
    if (buttonElement) buttonElement.focus();
  }, [buttonElement, disableRestoreFocusOnClose]);
  var handleBlur = React.useCallback(function (event) {
    var target = event.relatedTarget;

    if (!(target instanceof Node)) {
      return;
    }

    for (var _iterator2 = _createForOfIteratorHelperLoose(menuElements), _step2; !(_step2 = _iterator2()).done;) {
      var el = _step2.value;

      if (el === target || el.contains(target)) {
        return;
      }
    }

    setOpen(false);
  }, [menuElements]);
  var handleItemClick = React.useCallback(function () {
    setOpen(false);
    if (disableRestoreFocusOnClose) return;
    if (buttonElement) buttonElement.focus();
  }, [buttonElement, disableRestoreFocusOnClose]);
  var registerElement = React.useCallback(function (el) {
    setChildMenuElements(function (els) {
      return els.concat([el]);
    });
    return function () {
      setChildMenuElements(function (els) {
        return els.filter(function (_el) {
          return _el !== el;
        });
      });
    };
  }, []);
  var menuProps = React.useMemo(function () {
    return {
      'aria-labelledby': id,
      onBlurCapture: handleBlur,
      onClickOutside: handleMenuClickOutside,
      onEscape: handleMenuEscape,
      onItemClick: handleItemClick,
      originElement: buttonElement,
      registerElement: registerElement,
      shouldFocus: shouldFocus
    };
  }, [buttonElement, handleMenuClickOutside, handleMenuEscape, handleItemClick, id, handleBlur, registerElement, shouldFocus]);
  var menu = ReactIs.isElement(menuProp) ? /*#__PURE__*/React.cloneElement(menuProp, menuProps) : null;
  var setButtonRef = React.useCallback(function (el) {
    if (typeof ref === 'function') {
      ref(el);
    } else if (ref) {
      ref.current = el;
    }

    setButtonElement(el);
  }, [ref]);
  var button = React.useMemo(function () {
    return ReactIs.isElement(buttonProp) ? /*#__PURE__*/React.cloneElement(buttonProp, {
      'data-ui': 'MenuButton',
      id: id,
      onClick: handleButtonClick,
      onKeyDown: handleButtonKeyDown,
      'aria-haspopup': true,
      'aria-expanded': open,
      ref: setButtonRef,
      selected: open
    }) : null;
  }, [buttonProp, handleButtonClick, handleButtonKeyDown, id, open, setButtonRef]);
  var popoverProps = React.useMemo(function () {
    return _extends({
      boundaryElement: boundaryElement,
      placement: placement,
      portal: portal,
      radius: popoverRadius,
      overflow: preventOverflow,
      scheme: popoverScheme
    }, popover || {});
  }, [boundaryElement, placement, popover, popoverRadius, portal, preventOverflow, popoverScheme]);
  return /*#__PURE__*/React__default["default"].createElement(Popover, _extends({}, popoverProps, {
    content: menu,
    "data-ui": "MenuButton__popover",
    open: open
  }), button || /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null));
});

var _templateObject$6;
/**
 * @public
 */

var MenuDivider = styled__default["default"].hr(_templateObject$6 || (_templateObject$6 = _taggedTemplateLiteralLoose(["\n  height: 1px;\n  border: 0;\n  background: var(--card-hairline-soft-color);\n  margin: 0;\n"])));

var _templateObject$5, _templateObject2$4;
function selectableBaseStyle() {
  return styled.css(_templateObject$5 || (_templateObject$5 = _taggedTemplateLiteralLoose(["\n    background-color: inherit;\n    color: inherit;\n\n    &[data-as='button'] {\n      -webkit-font-smoothing: inherit;\n      appearance: none;\n      outline: none;\n      font: inherit;\n      text-align: inherit;\n      border: 0;\n      width: stretch;\n    }\n\n    /* &:is(a) */\n    &[data-as='a'] {\n      text-decoration: none;\n    }\n  "])));
}
function selectableColorStyle(props) {
  var _theme$sanity$styles, _theme$sanity$styles$;

  var $tone = props.$tone,
      theme = props.theme;
  var _theme$sanity$color = theme.sanity.color,
      base = _theme$sanity$color.base,
      muted = _theme$sanity$color.muted,
      selectable = _theme$sanity$color.selectable; // @todo: remove use of `muted` here

  var tone = selectable ? selectable[$tone] || selectable["default"] : muted[$tone] || muted["default"];
  return styled.css(_templateObject2$4 || (_templateObject2$4 = _taggedTemplateLiteralLoose(["\n    ", "\n\n    background-color: var(--card-bg-color);\n    color: var(--card-fg-color);\n    outline: none;\n\n    /* &:is(button) */\n    &[data-as='button'] {\n      &:disabled {\n        ", "\n      }\n\n      &:not(:disabled) {\n        &[aria-pressed='true'] {\n          ", "\n        }\n\n        &[data-selected],\n        &[aria-selected='true'] > & {\n          ", "\n        }\n\n        @media (hover: hover) {\n          &:not([data-selected]) {\n            &:hover {\n              ", "\n            }\n\n            &:active {\n              ", "\n            }\n          }\n        }\n      }\n    }\n\n    /* &:is(a) */\n    &[data-as='a'] {\n      &[data-disabled] {\n        ", "\n      }\n\n      &:not([data-disabled]) {\n        &[data-pressed] {\n          ", "\n        }\n\n        &[data-selected] {\n          ", "\n        }\n\n        @media (hover: hover) {\n          &:not([data-selected]) {\n            &:hover {\n              ", "\n            }\n\n            &:active {\n              ", "\n            }\n          }\n        }\n      }\n    }\n\n    ", "\n  "])), _colorVarsStyle(base, tone.enabled), _colorVarsStyle(base, tone.disabled), _colorVarsStyle(base, tone.pressed), _colorVarsStyle(base, tone.selected), _colorVarsStyle(base, tone.hovered), _colorVarsStyle(base, tone.pressed), _colorVarsStyle(base, tone.disabled), _colorVarsStyle(base, tone.pressed), _colorVarsStyle(base, tone.selected), _colorVarsStyle(base, tone.hovered), _colorVarsStyle(base, tone.pressed), (_theme$sanity$styles = theme.sanity.styles) == null ? void 0 : (_theme$sanity$styles$ = _theme$sanity$styles.card) == null ? void 0 : _theme$sanity$styles$.root);
}

/**
 * @internal
 */

var Selectable = styled__default["default"](Box)(responsiveBorderStyle, responsiveRadiusStyle, selectableBaseStyle, selectableColorStyle);

function useMenu() {
  var value = React.useContext(MenuContext);

  if (!value) {
    throw new Error('useMenu(): missing context value');
  } // NOTE: This check is for future-compatiblity
  // - If the value is not an object, itâs not compatible with the current version
  // - If the value is an object, but doesnât have `version: 0.0`, itâs not compatible with the current version


  if (!isRecord(value) || value.version !== 0.0) {
    throw new Error('useMenu(): the context value is not compatible');
  }

  return value;
}

var _excluded$a = ["as", "children", "fontSize", "icon", "onClick", "padding", "popover", "radius", "space", "text", "tone"];
/**
 * @public
 */

function MenuGroup(props) {
  var _props$as = props.as,
      as = _props$as === void 0 ? 'button' : _props$as,
      children = props.children,
      fontSize = props.fontSize,
      icon = props.icon,
      onClick = props.onClick,
      _props$padding = props.padding,
      padding = _props$padding === void 0 ? 3 : _props$padding,
      _props$popover = props.popover,
      popover = _props$popover === void 0 ? {} : _props$popover,
      _props$radius = props.radius,
      radius = _props$radius === void 0 ? 2 : _props$radius,
      _props$space = props.space,
      space = _props$space === void 0 ? 3 : _props$space,
      text = props.text,
      _props$tone = props.tone,
      tone = _props$tone === void 0 ? 'default' : _props$tone,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$a);

  var menu = useMenu();
  var activeElement = menu.activeElement,
      mount = menu.mount,
      onClickOutside = menu.onClickOutside,
      onEscape = menu.onEscape,
      onItemClick = menu.onItemClick,
      _menu$onItemMouseEnte = menu.onItemMouseEnter,
      onItemMouseEnter = _menu$onItemMouseEnte === void 0 ? menu.onMouseEnter : _menu$onItemMouseEnte,
      registerElement = menu.registerElement;

  var _useState = React.useState(null),
      rootElement = _useState[0],
      setRootElement = _useState[1];

  var _useState2 = React.useState(false),
      open = _useState2[0],
      setOpen = _useState2[1];

  var shouldFocusRef = React.useRef(null);
  var active = Boolean(activeElement) && activeElement === rootElement;

  var _useState3 = React.useState(false),
      withinMenu = _useState3[0],
      setWithinMenu = _useState3[1];

  var handleMouseEnter = React.useCallback(function (event) {
    setWithinMenu(false);
    onItemMouseEnter(event);
    setOpen(true);
  }, [onItemMouseEnter]);
  var handleMenuKeyDown = React.useCallback(function (event) {
    if (event.key === 'ArrowLeft') {
      event.stopPropagation();
      setOpen(false);
      requestAnimationFrame(function () {
        rootElement == null ? void 0 : rootElement.focus();
      });
    }
  }, [rootElement]);
  var handleClick = React.useCallback(function (event) {
    if (onClick) onClick(event);
    shouldFocusRef.current = 'first';
    setOpen(true);
    requestAnimationFrame(function () {
      shouldFocusRef.current = null;
    });
  }, [onClick]);
  var handleChildItemClick = React.useCallback(function () {
    setOpen(false);
    if (onItemClick) onItemClick();
  }, [onItemClick]);
  var handleMenuMouseEnter = React.useCallback(function () {
    return setWithinMenu(true);
  }, []); // Register the menu item element

  React.useEffect(function () {
    return mount(rootElement);
  }, [mount, rootElement]); // Close child menu when a sibling item becomes active

  React.useEffect(function () {
    if (!active) setOpen(false);
  }, [active]); // Update state when child menu is no longer open

  React.useEffect(function () {
    if (!open) setWithinMenu(false);
  }, [open]);
  var childMenu = /*#__PURE__*/React__default["default"].createElement(Menu, {
    onClickOutside: onClickOutside,
    onEscape: onEscape,
    onItemClick: handleChildItemClick,
    onKeyDown: handleMenuKeyDown,
    onMouseEnter: handleMenuMouseEnter,
    registerElement: registerElement,
    shouldFocus: shouldFocusRef.current
  }, children);
  var handleKeyDown = React.useCallback(function (event) {
    var target = event.currentTarget;

    if (document.activeElement !== target) {
      return;
    }

    if (event.key === 'ArrowRight') {
      shouldFocusRef.current = 'first';
      setOpen(true);
      setWithinMenu(true);
      requestAnimationFrame(function () {
        shouldFocusRef.current = null;
      });
      return;
    }
  }, []);
  return /*#__PURE__*/React__default["default"].createElement(Popover, _extends({}, popover, {
    content: childMenu,
    "data-ui": "MenuGroup__popover",
    open: open
  }), /*#__PURE__*/React__default["default"].createElement(Selectable, _extends({
    "data-as": as,
    "data-ui": "MenuGroup",
    forwardedAs: as
  }, restProps, {
    "aria-pressed": as === 'button' ? withinMenu : undefined,
    "data-pressed": as !== 'button' ? withinMenu : undefined,
    "data-selected": !withinMenu && active ? '' : undefined,
    "$radius": radius,
    "$tone": tone,
    onClick: handleClick,
    onKeyDown: handleKeyDown,
    onMouseEnter: handleMouseEnter,
    ref: setRootElement,
    tabIndex: -1,
    type: as === 'button' ? 'button' : undefined
  }), /*#__PURE__*/React__default["default"].createElement(Box, {
    padding: padding
  }, /*#__PURE__*/React__default["default"].createElement(Flex, null, icon && /*#__PURE__*/React__default["default"].createElement(Text, {
    size: fontSize
  }, /*#__PURE__*/React.isValidElement(icon) && icon, ReactIs.isValidElementType(icon) && /*#__PURE__*/React.createElement(icon)), /*#__PURE__*/React__default["default"].createElement(Box, {
    flex: 1,
    marginLeft: icon ? space : undefined
  }, /*#__PURE__*/React__default["default"].createElement(Text, {
    size: fontSize,
    textOverflow: "ellipsis"
  }, text)), /*#__PURE__*/React__default["default"].createElement(Box, {
    marginLeft: space
  }, /*#__PURE__*/React__default["default"].createElement(Text, {
    size: fontSize
  }, /*#__PURE__*/React__default["default"].createElement(icons.ChevronRightIcon, null)))))));
}

var _excluded$9 = ["as", "children", "disabled", "fontSize", "hotkeys", "icon", "iconRight", "onClick", "padding", "paddingX", "paddingY", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "pressed", "radius", "selected", "space", "text", "tone"];
/**
 * @public
 */

var MenuItem = /*#__PURE__*/React.forwardRef(function MenuItem(props, forwardedRef) {
  var _props$as = props.as,
      as = _props$as === void 0 ? 'button' : _props$as,
      children = props.children,
      disabled = props.disabled,
      _props$fontSize = props.fontSize,
      fontSize = _props$fontSize === void 0 ? 2 : _props$fontSize,
      hotkeys = props.hotkeys,
      icon = props.icon,
      iconRight = props.iconRight,
      onClick = props.onClick,
      _props$padding = props.padding,
      padding = _props$padding === void 0 ? 3 : _props$padding,
      paddingX = props.paddingX,
      paddingY = props.paddingY,
      paddingTop = props.paddingTop,
      paddingRight = props.paddingRight,
      paddingBottom = props.paddingBottom,
      paddingLeft = props.paddingLeft,
      pressed = props.pressed,
      _props$radius = props.radius,
      radius = _props$radius === void 0 ? 2 : _props$radius,
      selectedProp = props.selected,
      _props$space = props.space,
      space = _props$space === void 0 ? 3 : _props$space,
      text = props.text,
      _props$tone = props.tone,
      tone = _props$tone === void 0 ? 'default' : _props$tone,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$9);

  var menu = useMenu();
  var activeElement = menu.activeElement,
      mount = menu.mount,
      onItemClick = menu.onItemClick,
      _menu$onItemMouseEnte = menu.onItemMouseEnter,
      onItemMouseEnter = _menu$onItemMouseEnte === void 0 ? menu.onMouseEnter : _menu$onItemMouseEnte,
      _menu$onItemMouseLeav = menu.onItemMouseLeave,
      onItemMouseLeave = _menu$onItemMouseLeav === void 0 ? menu.onMouseLeave : _menu$onItemMouseLeav;

  var _useState = React.useState(null),
      rootElement = _useState[0],
      setRootElement = _useState[1];

  var active = Boolean(activeElement) && activeElement === rootElement;
  React.useEffect(function () {
    return mount(rootElement, selectedProp);
  }, [mount, rootElement, selectedProp]);
  var ref = useForwardedRef(forwardedRef);
  var handleClick = React.useCallback(function (event) {
    if (disabled) return;
    if (onClick) onClick(event);
    if (onItemClick) onItemClick();
  }, [disabled, onClick, onItemClick]);
  var paddingProps = React.useMemo(function () {
    return {
      padding: padding,
      paddingX: paddingX,
      paddingY: paddingY,
      paddingTop: paddingTop,
      paddingRight: paddingRight,
      paddingBottom: paddingBottom,
      paddingLeft: paddingLeft
    };
  }, [padding, paddingX, paddingY, paddingTop, paddingRight, paddingBottom, paddingLeft]);
  var setRef = React.useCallback(function (el) {
    ref.current = el;
    setRootElement(el);
  }, [ref]);
  return /*#__PURE__*/React__default["default"].createElement(Selectable, _extends({
    "data-as": as,
    "data-ui": "MenuItem",
    forwardedAs: as
  }, restProps, {
    "aria-pressed": as === 'button' && pressed,
    "data-pressed": as !== 'button' && pressed ? '' : undefined,
    "data-selected": active ? '' : undefined,
    "data-disabled": disabled ? '' : undefined,
    "$radius": radius,
    "$tone": tone,
    disabled: disabled,
    onClick: handleClick,
    onMouseEnter: onItemMouseEnter,
    onMouseLeave: onItemMouseLeave,
    padding: 0,
    ref: setRef,
    role: "menuitem",
    tabIndex: -1,
    type: as === 'button' ? 'button' : undefined
  }), (icon || text || iconRight) && /*#__PURE__*/React__default["default"].createElement(Box, _extends({
    as: "span"
  }, paddingProps), /*#__PURE__*/React__default["default"].createElement(Flex, {
    as: "span"
  }, icon && /*#__PURE__*/React__default["default"].createElement(Text, {
    size: fontSize
  }, /*#__PURE__*/React.isValidElement(icon) && icon, ReactIs.isValidElementType(icon) && /*#__PURE__*/React.createElement(icon)), text && /*#__PURE__*/React__default["default"].createElement(Box, {
    flex: 1,
    marginLeft: icon ? space : undefined,
    marginRight: iconRight ? space : undefined
  }, /*#__PURE__*/React__default["default"].createElement(Text, {
    size: fontSize,
    textOverflow: "ellipsis"
  }, text)), hotkeys && /*#__PURE__*/React__default["default"].createElement(Box, {
    marginLeft: space,
    style: {
      marginTop: -4,
      marginBottom: -4
    }
  }, /*#__PURE__*/React__default["default"].createElement(Hotkeys, {
    fontSize: fontSize,
    keys: hotkeys
  })), iconRight && /*#__PURE__*/React__default["default"].createElement(Text, {
    size: fontSize
  }, /*#__PURE__*/React.isValidElement(iconRight) && iconRight, ReactIs.isValidElementType(iconRight) && /*#__PURE__*/React.createElement(iconRight)))), children && /*#__PURE__*/React__default["default"].createElement(Box, _extends({
    as: "span"
  }, paddingProps), children));
});

var _templateObject$4, _templateObject2$3, _templateObject3$1, _templateObject4;
var keyframe = styled.keyframes(_templateObject$4 || (_templateObject$4 = _taggedTemplateLiteralLoose(["\n  0% {\n    background-position: 100%;\n  }\n  100% {\n    background-position: -100%;\n  }\n"])));
var animation = styled.css(_templateObject2$3 || (_templateObject2$3 = _taggedTemplateLiteralLoose(["\n  background-image: linear-gradient(\n    to right,\n    var(--card-skeleton-color-from),\n    var(--card-skeleton-color-to),\n    var(--card-skeleton-color-from),\n    var(--card-skeleton-color-from),\n    var(--card-skeleton-color-from)\n  );\n  background-position: 100%;\n  background-size: 200% 100%;\n  background-attachment: fixed;\n  animation-name: ", ";\n  animation-timing-function: ease-in-out;\n  animation-iteration-count: infinite;\n  animation-duration: 2000ms;\n"])), keyframe);
/**
 * This API might change. DO NOT USE IN PRODUCTION.
 * @beta
 */

var skeletonStyle = styled.css(_templateObject3$1 || (_templateObject3$1 = _taggedTemplateLiteralLoose(["\n  opacity: ", ";\n  transition: opacity 200ms ease-in;\n\n  @media screen and (prefers-reduced-motion: no-preference) {\n    ", "\n  }\n\n  @media screen and (prefers-reduced-motion: reduce) {\n    background-color: var(--card-skeleton-color-from);\n  }\n"])), function (_ref) {
  var $visible = _ref.$visible;
  return $visible ? 1 : 0;
}, function (_ref2) {
  var $animated = _ref2.$animated;
  return $animated ? animation : styled.css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose(["\n            background-color: var(--card-skeleton-color-from);\n          "])));
});

var _excluded$8 = ["animated", "delay", "radius"];
var Root$4 = styled__default["default"](Box)(responsiveRadiusStyle, skeletonStyle);
/**
 * This API might change. DO NOT USE IN PRODUCTION.
 * @beta
 */

var Skeleton = /*#__PURE__*/React.forwardRef(function Skeleton(props, ref) {
  var _props$animated = props.animated,
      animated = _props$animated === void 0 ? false : _props$animated,
      delay = props.delay,
      radius = props.radius,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$8);

  var _useState = React.useState(delay ? false : true),
      visible = _useState[0],
      setVisible = _useState[1];

  React.useEffect(function () {
    if (!delay) {
      return setVisible(true);
    }

    var timeout = setTimeout(function () {
      setVisible(true);
    }, delay);
    return function () {
      clearTimeout(timeout);
    };
  }, [delay]);
  return /*#__PURE__*/React__default["default"].createElement(Root$4, _extends({}, restProps, {
    "$animated": animated,
    "$radius": radius,
    "$visible": visible,
    ref: ref
  }));
});

var _excluded$7 = ["size"],
    _excluded2 = ["size"],
    _excluded3 = ["size"],
    _excluded4 = ["size"];
var Root$3 = styled__default["default"](Skeleton)(function (_ref) {
  var $size = _ref.$size,
      $style = _ref.$style,
      theme = _ref.theme;
  var media = theme.sanity.media;
  var font = theme.sanity.fonts[$style];
  var styles = responsive(media, $size, function (sizeIndex) {
    var fontSize = font.sizes[sizeIndex];
    var capHeight = fontSize.lineHeight - fontSize.ascenderHeight - fontSize.descenderHeight;
    return {
      height: capHeight
    };
  });
  return styles;
});
/**
 * This API might change. DO NOT USE IN PRODUCTION.
 * @beta
 */

var TextSkeleton = /*#__PURE__*/React.forwardRef(function TextSkeleton(props, ref) {
  var _props$size = props.size,
      size = _props$size === void 0 ? 2 : _props$size,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$7);

  var $size = useResponsiveProp(size);
  return /*#__PURE__*/React__default["default"].createElement(Root$3, _extends({}, restProps, {
    "$size": $size,
    ref: ref,
    "$style": "text"
  }));
});
/**
 * This API might change. DO NOT USE IN PRODUCTION.
 * @beta
 */

var LabelSkeleton = /*#__PURE__*/React.forwardRef(function TextSkeleton(props, ref) {
  var _props$size2 = props.size,
      size = _props$size2 === void 0 ? 2 : _props$size2,
      restProps = _objectWithoutPropertiesLoose(props, _excluded2);

  var $size = useResponsiveProp(size);
  return /*#__PURE__*/React__default["default"].createElement(Root$3, _extends({}, restProps, {
    "$size": $size,
    ref: ref,
    "$style": "label"
  }));
});
/**
 * This API might change. DO NOT USE IN PRODUCTION.
 * @beta
 */

var HeadingSkeleton = /*#__PURE__*/React.forwardRef(function TextSkeleton(props, ref) {
  var _props$size3 = props.size,
      size = _props$size3 === void 0 ? 2 : _props$size3,
      restProps = _objectWithoutPropertiesLoose(props, _excluded3);

  var $size = useResponsiveProp(size);
  return /*#__PURE__*/React__default["default"].createElement(Root$3, _extends({}, restProps, {
    "$size": $size,
    ref: ref,
    "$style": "heading"
  }));
});
/**
 * This API might change. DO NOT USE IN PRODUCTION.
 * @beta
 */

var CodeSkeleton = /*#__PURE__*/React.forwardRef(function TextSkeleton(props, ref) {
  var _props$size4 = props.size,
      size = _props$size4 === void 0 ? 2 : _props$size4,
      restProps = _objectWithoutPropertiesLoose(props, _excluded4);

  var $size = useResponsiveProp(size);
  return /*#__PURE__*/React__default["default"].createElement(Root$3, _extends({}, restProps, {
    "$size": $size,
    ref: ref,
    "$style": "code"
  }));
});

var _excluded$6 = ["icon", "id", "focused", "fontSize", "label", "onClick", "onFocus", "padding", "selected"];
/**
 * @public
 */

var Tab = /*#__PURE__*/React.forwardRef(function Tab(props, forwardedRef) {
  var icon = props.icon,
      id = props.id,
      focused = props.focused,
      fontSize = props.fontSize,
      label = props.label,
      onClick = props.onClick,
      onFocus = props.onFocus,
      _props$padding = props.padding,
      padding = _props$padding === void 0 ? 2 : _props$padding,
      selected = props.selected,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$6);

  var elementRef = React.useRef(null);
  var focusedRef = React.useRef(false);
  var handleBlur = React.useCallback(function () {
    focusedRef.current = false;
  }, []);
  var handleFocus = React.useCallback(function (event) {
    focusedRef.current = true;
    if (onFocus) onFocus(event);
  }, [onFocus]);
  var ref = useForwardedRef(forwardedRef);
  React.useEffect(function () {
    if (focused && !focusedRef.current) {
      if (elementRef.current) elementRef.current.focus();
      focusedRef.current = true;
    }
  }, [focused]);

  var setRef = function setRef(el) {
    elementRef.current = el;
    ref.current = el;
  };

  return /*#__PURE__*/React__default["default"].createElement(Button, _extends({
    "data-ui": "Tab"
  }, restProps, {
    "aria-selected": selected ? 'true' : 'false',
    fontSize: fontSize,
    icon: icon,
    id: id,
    mode: "bleed",
    onClick: onClick,
    onBlur: handleBlur,
    onFocus: handleFocus,
    padding: padding,
    ref: setRef,
    role: "tab",
    selected: selected,
    tabIndex: selected ? 0 : -1,
    text: label,
    type: "button"
  }));
});

var _excluded$5 = ["children"];

function _isReactElement(node) {
  return Boolean(node);
}
/**
 * @public
 */


var TabList = /*#__PURE__*/React.forwardRef(function TabList(props, ref) {
  var childrenProp = props.children,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$5);

  var _useState = React.useState(-1),
      focusedIndex = _useState[0],
      setFocusedIndex = _useState[1];

  var children = React.useMemo(function () {
    return childrenProp.filter(_isReactElement);
  }, [childrenProp]);
  var tabs = children.map(function (child, childIndex) {
    return /*#__PURE__*/React.cloneElement(child, {
      focused: focusedIndex === childIndex,
      key: childIndex,
      onFocus: function onFocus() {
        return handleTabFocus(childIndex);
      }
    });
  });
  var numTabs = tabs.length;
  var handleTabFocus = React.useCallback(function (tabIdx) {
    setFocusedIndex(tabIdx);
  }, []);
  var handleKeyDown = React.useCallback(function (event) {
    if (event.key === 'ArrowLeft') {
      setFocusedIndex(function (prevIndex) {
        return (prevIndex + numTabs - 1) % numTabs;
      });
    }

    if (event.key === 'ArrowRight') {
      setFocusedIndex(function (prevIndex) {
        return (prevIndex + 1) % numTabs;
      });
    }
  }, [numTabs]);
  return /*#__PURE__*/React__default["default"].createElement(Inline, _extends({
    "data-ui": "TabList"
  }, restProps, {
    onKeyDown: handleKeyDown,
    ref: ref,
    role: "tablist"
  }), tabs);
});

var _excluded$4 = ["flex"];
/**
 * @public
 */

var TabPanel = /*#__PURE__*/React.forwardRef(function TabPanel(props, ref) {
  var flex = props.flex,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$4);

  return /*#__PURE__*/React__default["default"].createElement(Box, _extends({
    "data-ui": "TabPanel"
  }, restProps, {
    flex: flex,
    ref: ref,
    role: "tabpanel",
    tabIndex: props.tabIndex === undefined ? 0 : props.tabIndex
  }), props.children);
});

var _excluded$3 = ["closable", "description", "onClose", "title", "status"];

var _templateObject$3, _templateObject2$2;
var STATUS_CARD_TONE = {
  error: 'critical',
  warning: 'caution',
  success: 'positive',
  info: 'primary'
};
var ROLES = {
  error: 'alert',
  warning: 'alert',
  success: 'alert',
  info: 'alert'
};
var Root$2 = styled__default["default"](Card)(_templateObject$3 || (_templateObject$3 = _taggedTemplateLiteralLoose(["\n  pointer-events: all;\n"])));
var TextBox = styled__default["default"](Flex)(_templateObject2$2 || (_templateObject2$2 = _taggedTemplateLiteralLoose(["\n  overflow-x: auto;\n"])));
/**
 * @public
 */

function Toast(props) {
  var closable = props.closable,
      description = props.description,
      onClose = props.onClose,
      title = props.title,
      status = props.status,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$3);

  var cardTone = status ? STATUS_CARD_TONE[status] : 'default';
  var role = status ? ROLES[status] : 'status';
  return /*#__PURE__*/React__default["default"].createElement(Root$2, _extends({
    "data-ui": "Toast",
    role: role
  }, restProps, {
    marginTop: 3,
    radius: 2,
    shadow: 2,
    tone: cardTone
  }), /*#__PURE__*/React__default["default"].createElement(Flex, {
    align: "flex-start"
  }, /*#__PURE__*/React__default["default"].createElement(TextBox, {
    flex: 1,
    padding: 3
  }, /*#__PURE__*/React__default["default"].createElement(Stack, {
    space: 3
  }, title && /*#__PURE__*/React__default["default"].createElement(Text, {
    weight: "semibold"
  }, title), description && /*#__PURE__*/React__default["default"].createElement(Text, {
    muted: true,
    size: 1
  }, description))), closable && /*#__PURE__*/React__default["default"].createElement(Box, {
    padding: 1
  }, /*#__PURE__*/React__default["default"].createElement(Button, {
    as: "button",
    icon: icons.CloseIcon,
    mode: "bleed",
    padding: 2,
    onClick: onClose,
    style: {
      verticalAlign: 'top'
    }
  }))));
}

var key$1 = Symbol["for"]('@sanity/ui/context/toast');
globalScope[key$1] = globalScope[key$1] || /*#__PURE__*/React.createContext(null);
var ToastContext = globalScope[key$1];

var _templateObject$2, _templateObject2$1;
var Root$1 = styled__default["default"](Layer)(_templateObject$2 || (_templateObject$2 = _taggedTemplateLiteralLoose(["\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  pointer-events: none;\n"])));
var ToastContainer = styled__default["default"].div(_templateObject2$1 || (_templateObject2$1 = _taggedTemplateLiteralLoose(["\n  box-sizing: border-box;\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  max-width: 420px;\n  width: 100%;\n"])));
var toastId = 0;
/**
 * @public
 */

function ToastProvider(props) {
  var children = props.children,
      _props$padding = props.padding,
      padding = _props$padding === void 0 ? 4 : _props$padding,
      paddingX = props.paddingX,
      paddingY = props.paddingY,
      zOffset = props.zOffset;

  var _useState = React.useState({
    toasts: []
  }),
      state = _useState[0],
      setState = _useState[1];

  var toastsRef = React.useRef({});
  var push = React.useCallback(function (params) {
    var id = params.id || String(toastId++);
    var duration = params.duration || 5000;

    var dismiss = function dismiss() {
      var _toastsRef$current$id;

      var timeoutId = (_toastsRef$current$id = toastsRef.current[id]) == null ? void 0 : _toastsRef$current$id.timeoutId;
      setState(function (prevState) {
        var idx = prevState.toasts.findIndex(function (t) {
          return t.id === id;
        });

        if (idx > -1) {
          var toasts = prevState.toasts.slice(0);
          toasts.splice(idx, 1);
          return _extends({}, prevState, {
            toasts: toasts
          });
        }

        return prevState;
      });

      if (timeoutId !== undefined) {
        clearTimeout(timeoutId);
        delete toastsRef.current[id];
      }
    };

    setState(function (prevState) {
      return _extends({}, prevState, {
        toasts: prevState.toasts.filter(function (t) {
          return t.id !== id;
        }).concat([{
          dismiss: dismiss,
          id: id,
          params: _extends({}, params, {
            duration: duration
          })
        }])
      });
    });

    if (toastsRef.current[id]) {
      clearTimeout(toastsRef.current[id].timeoutId);
      delete toastsRef.current[id];
    }

    toastsRef.current[id] = {
      timeoutId: setTimeout(dismiss, duration)
    };
    return id;
  }, []); // clear timeouts on unmount

  React.useEffect(function () {
    return function () {
      for (var _i = 0, _Object$values = Object.values(toastsRef.current); _i < _Object$values.length; _i++) {
        var timeoutId = _Object$values[_i].timeoutId;
        clearTimeout(timeoutId);
      }

      toastsRef.current = {};
    };
  }, []);
  var value = React.useMemo(function () {
    return {
      version: 0.0,
      push: push
    };
  }, [push]);
  return /*#__PURE__*/React__default["default"].createElement(ToastContext.Provider, {
    value: value
  }, children, /*#__PURE__*/React__default["default"].createElement(Root$1, {
    "data-ui": "ToastProvider",
    zOffset: zOffset
  }, /*#__PURE__*/React__default["default"].createElement(ToastContainer, null, /*#__PURE__*/React__default["default"].createElement(Box, {
    padding: padding,
    paddingX: paddingX,
    paddingY: paddingY
  }, /*#__PURE__*/React__default["default"].createElement(framerMotion.AnimatePresence, {
    initial: false
  }, state.toasts.map(function (_ref) {
    var dismiss = _ref.dismiss,
        id = _ref.id,
        params = _ref.params;
    return /*#__PURE__*/React__default["default"].createElement(framerMotion.motion.div, {
      animate: {
        opacity: 1,
        y: 0,
        scale: 1
      },
      exit: {
        opacity: 0,
        scale: 0.5,
        transition: {
          duration: 0.2
        }
      },
      initial: {
        opacity: 0,
        y: 32,
        scale: 0.25
      },
      key: id,
      layout: "position",
      transition: {
        type: 'spring',
        damping: 30,
        stiffness: 400
      }
    }, /*#__PURE__*/React__default["default"].createElement(Toast, {
      closable: params.closable,
      description: params.description,
      onClose: dismiss,
      status: params.status,
      title: params.title
    }));
  }))))));
}

/**
 * @public
 */

function useToast() {
  var value = React.useContext(ToastContext);

  if (!value) {
    throw new Error('useToast(): missing context value');
  } // NOTE: This check is for future-compatiblity
  // - If the value is not an object, itâs not compatible with the current version
  // - If the value is an object, but doesnât have `version: 0.0`, itâs not compatible with the current version


  if (!isRecord(value) || value.version !== 0.0) {
    throw new Error('useToast(): the context value is not compatible');
  }

  return value;
}

function _findPrevItemElement(state, itemElements, focusedElement) {
  var idx = itemElements.indexOf(focusedElement);
  var els = itemElements.slice(0, idx);
  var len = els.length;

  for (var i = len - 1; i >= 0; i -= 1) {
    var itemKey = els[i].getAttribute('data-tree-key');

    if (!itemKey) {
      continue;
    }

    var segments = itemKey.split('/');
    segments.pop();
    var p = [];
    var expanded = true;

    for (var j = 0; j < segments.length; j += 1) {
      var _state$k;

      p.push(segments[j]);
      var k = p.join('/');

      if (!((_state$k = state[k]) != null && _state$k.expanded)) {
        expanded = false;
        break;
      }
    }

    if (expanded) {
      return els[i];
    }
  }

  return null;
}
function _findNextItemElement(state, itemElements, focusedElement) {
  var idx = itemElements.indexOf(focusedElement);
  var els = itemElements.slice(idx);
  var len = itemElements.length;

  for (var i = 1; i < len; i += 1) {
    if (!els[i]) {
      continue;
    }

    var itemKey = els[i].getAttribute('data-tree-key');

    if (!itemKey) {
      continue;
    }

    var segments = itemKey.split('/');
    segments.pop();
    var p = [];
    var expanded = true;

    for (var j = 0; j < segments.length; j += 1) {
      var _state$k2;

      p.push(segments[j]);
      var k = p.join('/');

      if (!((_state$k2 = state[k]) != null && _state$k2.expanded)) {
        expanded = false;
        break;
      }
    }

    if (expanded) {
      return els[i];
    }
  }

  return null;
}
function _focusItemElement(el) {
  if (el.getAttribute('role') === 'treeitem') {
    el.focus();
  }

  if (el.getAttribute('role') === 'none') {
    var firstChild = el.firstChild;

    if (firstChild && firstChild instanceof HTMLElement) {
      firstChild.focus();
    }
  }
}

var key = Symbol["for"]('@sanity/ui/context/tree');
globalScope[key] = globalScope[key] || /*#__PURE__*/React.createContext(null);
/**
 * @internal
 */

var TreeContext = globalScope[key];

var _excluded$2 = ["children", "space"];
/**
 * This API might change. DO NOT USE IN PRODUCTION.
 * @beta
 */

var Tree = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function Tree(props, ref) {
  var children = props.children,
      _props$space = props.space,
      space = _props$space === void 0 ? 1 : _props$space,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$2);

  var forwardedRef = useForwardedRef(ref);

  var _useState = React.useState(null),
      focusedElement = _useState[0],
      setFocusedElement = _useState[1];

  var focusedElementRef = React.useRef(focusedElement);
  var path = React.useMemo(function () {
    return [];
  }, []);

  var _useState2 = React.useState([]),
      itemElements = _useState2[0],
      setItemElements = _useState2[1];

  var _useState3 = React.useState({}),
      state = _useState3[0],
      setState = _useState3[1];

  var stateRef = React.useRef(state);
  React.useEffect(function () {
    focusedElementRef.current = focusedElement;
  }, [focusedElement]);
  React.useEffect(function () {
    stateRef.current = state;
  }, [state]);
  var registerItem = React.useCallback(function (element, path, expanded, selected) {
    setState(function (s) {
      var _extends2;

      return _extends({}, s, (_extends2 = {}, _extends2[path] = {
        element: element,
        expanded: expanded
      }, _extends2));
    });

    if (selected) {
      setFocusedElement(element);
    }

    return function () {
      setState(function (s) {
        var newState = _extends({}, s);

        delete newState[path];
        return newState;
      });
    };
  }, []);
  var setExpanded = React.useCallback(function (path, expanded) {
    setState(function (s) {
      var _extends3;

      var itemState = s[path];
      if (!itemState) return s;
      return _extends({}, s, (_extends3 = {}, _extends3[path] = _extends({}, itemState, {
        expanded: expanded
      }), _extends3));
    });
  }, []);
  var contextValue = React.useMemo(function () {
    return {
      version: 0.0,
      focusedElement: focusedElement || itemElements[0] || null,
      level: 0,
      path: path,
      registerItem: registerItem,
      setExpanded: setExpanded,
      setFocusedElement: setFocusedElement,
      space: space,
      state: state
    };
  }, [focusedElement, itemElements, path, registerItem, setExpanded, space, state]);
  var handleKeyDown = React.useCallback(function (event) {
    if (!focusedElementRef.current) return;

    if (event.key === 'ArrowDown') {
      event.preventDefault();

      var nextEl = _findNextItemElement(stateRef.current, itemElements, focusedElementRef.current);

      if (nextEl) {
        _focusItemElement(nextEl);

        setFocusedElement(nextEl);
      }

      return;
    }

    if (event.key === 'ArrowUp') {
      event.preventDefault();

      var prevEl = _findPrevItemElement(stateRef.current, itemElements, focusedElementRef.current);

      if (prevEl) {
        _focusItemElement(prevEl);

        setFocusedElement(prevEl);
      }

      return;
    }

    if (event.key === 'ArrowLeft') {
      event.preventDefault();
      var itemKey = focusedElementRef.current.getAttribute('data-tree-key');
      if (!itemKey) return;
      var itemState = stateRef.current[itemKey];
      if (!itemState) return;

      if (itemState.expanded) {
        setState(function (s) {
          var _extends4;

          var itemState = s[itemKey];
          if (!itemState) return s;
          return _extends({}, s, (_extends4 = {}, _extends4[itemKey] = _extends({}, itemState, {
            expanded: false
          }), _extends4));
        });
      } else {
        var itemPath = itemKey.split('/');
        itemPath.pop();
        var parentKey = itemPath.join('/');
        var parentState = parentKey && stateRef.current[parentKey];

        if (parentState) {
          parentState.element.focus();
          setFocusedElement(parentState.element);
        }
      }

      return;
    }

    if (event.key === 'ArrowRight') {
      var _stateRef$current$foc;

      event.preventDefault();
      var focusedKey = focusedElementRef.current.getAttribute('data-tree-key');
      if (!focusedKey) return;

      if (!((_stateRef$current$foc = stateRef.current[focusedKey]) != null && _stateRef$current$foc.expanded)) {
        setState(function (s) {
          var _extends5;

          var itemState = s[focusedKey];
          if (!itemState) return s;
          return _extends({}, s, (_extends5 = {}, _extends5[focusedKey] = _extends({}, itemState, {
            expanded: true
          }), _extends5));
        });
      }

      return;
    }
  }, [itemElements]);
  React.useEffect(function () {
    if (!forwardedRef.current) return;

    var _itemElements = Array.from(forwardedRef.current.querySelectorAll('[data-ui="TreeItem"]'));

    setItemElements(_itemElements);
  }, [children, forwardedRef]);
  return /*#__PURE__*/React__default["default"].createElement(TreeContext.Provider, {
    value: contextValue
  }, /*#__PURE__*/React__default["default"].createElement(Stack, _extends({
    as: "ul",
    "data-ui": "Tree"
  }, restProps, {
    onKeyDown: handleKeyDown,
    ref: forwardedRef,
    role: "tree",
    space: space
  }), children));
}));
Tree.displayName = 'Tree';

var _templateObject$1, _templateObject2, _templateObject3;
function treeItemRootStyle() {
  return styled.css(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteralLoose(["\n    &[role='none'] > [role='treeitem'] {\n      outline: none;\n      cursor: default;\n      border-radius: 3px;\n\n      &:focus {\n        position: relative;\n      }\n    }\n\n    &[role='treeitem'] {\n      outline: none;\n\n      & > div {\n        cursor: default;\n        border-radius: 3px;\n      }\n\n      &:focus > div {\n        position: relative;\n      }\n    }\n  "])));
}
function treeItemRootColorStyle(props) {
  var theme = props.theme;
  var $tone = 'default';
  var _theme$sanity$color = theme.sanity.color,
      base = _theme$sanity$color.base,
      muted = _theme$sanity$color.muted,
      selectable = _theme$sanity$color.selectable; // @todo: remove use of `muted` here

  var tone = selectable ? selectable[$tone] || selectable["default"] : muted[$tone] || muted["default"];
  return styled.css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose(["\n    /* <div role=\"none\"><a data-ui=\"TreeItem__box\" role=\"treeitem\" tabIndex=\"0\"></div> */\n    &[role='none'] {\n      & > [role='treeitem'] {\n        ", "\n\n        background-color: var(--card-bg-color);\n        color: var(--treeitem-fg-color);\n      }\n\n      &[data-selected] > [role='treeitem'] {\n        ", "\n      }\n\n      @media (hover: hover) {\n        &:not([data-selected]) > [role='treeitem']:not(:focus):hover {\n          ", "\n        }\n\n        & > [role='treeitem']:focus {\n          ", "\n        }\n      }\n    }\n\n    /* <div role=\"treeitem\" tabIndex=\"0\"><div data-ui=\"TreeItem__box\"></div> */\n    &[role='treeitem'] {\n      & > [data-ui='TreeItem__box'] {\n        ", "\n\n        background-color: var(--card-bg-color);\n        color: var(--card-fg-color);\n      }\n\n      &[data-selected] > [data-ui='TreeItem__box'] {\n        ", "\n      }\n\n      @media (hover: hover) {\n        &:not([data-selected]):not(:focus) > [data-ui='TreeItem__box']:hover {\n          ", "\n        }\n\n        &:focus > [data-ui='TreeItem__box'] {\n          ", "\n        }\n      }\n    }\n  "])), _colorVarsStyle(base, tone.enabled), _colorVarsStyle(base, tone.pressed), _colorVarsStyle(base, tone.hovered), _colorVarsStyle(base, tone.selected), _colorVarsStyle(base, tone.enabled), _colorVarsStyle(base, tone.pressed), _colorVarsStyle(base, tone.hovered), _colorVarsStyle(base, tone.selected));
}
function treeItemBoxStyle(props) {
  var $level = props.$level,
      theme = props.theme;
  var space = theme.sanity.space;
  return styled.css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose(["\n    padding-left: ", ";\n\n    &[data-as='a'] {\n      text-decoration: none;\n    }\n  "])), rem(space[2] * $level));
}

/**
 * @beta
 */

function useTree() {
  var tree = React.useContext(TreeContext);

  if (!tree) {
    throw new Error('Tree: missing context value');
  }

  return tree;
}

var _excluded$1 = ["children", "expanded"];
var TreeGroup = /*#__PURE__*/React.memo(function TreeGroup(props) {
  var children = props.children,
      _props$expanded = props.expanded,
      expanded = _props$expanded === void 0 ? false : _props$expanded,
      restProps = _objectWithoutPropertiesLoose(props, _excluded$1);

  var tree = useTree();
  return /*#__PURE__*/React__default["default"].createElement(Stack, _extends({
    as: "ul",
    "data-ui": "TreeGroup"
  }, restProps, {
    hidden: !expanded,
    marginTop: tree.space,
    role: "group",
    space: tree.space
  }), children);
});

var _excluded = ["children", "expanded", "fontSize", "href", "icon", "id", "muted", "onClick", "padding", "selected", "space", "text", "weight"];

var _templateObject;
var Root = /*#__PURE__*/React.memo(styled__default["default"].li(treeItemRootStyle, treeItemRootColorStyle));
var TreeItemBox = styled__default["default"](Box).attrs({
  forwardedAs: 'a'
})(treeItemBoxStyle);
var ToggleArrowText = styled__default["default"](Text)(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n  & > svg {\n    transition: transform 100ms;\n  }\n"])));
/**
 * This API might change. DO NOT USE IN PRODUCTION.
 * @beta
 */

var TreeItem = /*#__PURE__*/React.memo(function TreeItem(props) {
  var children = props.children,
      _props$expanded = props.expanded,
      expandedProp = _props$expanded === void 0 ? false : _props$expanded,
      fontSize = props.fontSize,
      href = props.href,
      icon = props.icon,
      idProp = props.id,
      muted = props.muted,
      onClick = props.onClick,
      _props$padding = props.padding,
      padding = _props$padding === void 0 ? 3 : _props$padding,
      _props$selected = props.selected,
      selected = _props$selected === void 0 ? false : _props$selected,
      _props$space = props.space,
      space = _props$space === void 0 ? 2 : _props$space,
      text = props.text,
      weight = props.weight,
      restProps = _objectWithoutPropertiesLoose(props, _excluded);

  var rootRef = React.useRef(null);
  var treeitemRef = React.useRef(null);
  var tree = useTree();
  var path = tree.path,
      registerItem = tree.registerItem,
      setExpanded = tree.setExpanded,
      setFocusedElement = tree.setFocusedElement;
  var id = autoId.useId(idProp) || idProp;
  var itemPath = React.useMemo(function () {
    return path.concat([id || '']);
  }, [id, path]);
  var itemKey = itemPath.join('/');
  var itemState = tree.state[itemKey];
  var focused = tree.focusedElement === rootRef.current;
  var expanded = (itemState == null ? void 0 : itemState.expanded) === undefined ? expandedProp : (itemState == null ? void 0 : itemState.expanded) || false;
  var tabIndex = tree.focusedElement && tree.focusedElement === rootRef.current ? 0 : -1;
  var contextValue = React.useMemo(function () {
    return _extends({}, tree, {
      level: tree.level + 1,
      path: itemPath
    });
  }, [itemPath, tree]);
  var handleClick = React.useCallback(function (event) {
    if (onClick) onClick(event);
    var target = event.target;

    if (target instanceof HTMLElement && (target.getAttribute('data-ui') === 'TreeItem__box' || target.closest('[data-ui="TreeItem__box"]'))) {
      event.stopPropagation();
      setExpanded(itemKey, !expanded);
      setFocusedElement(rootRef.current);
    }
  }, [expanded, itemKey, onClick, setExpanded, setFocusedElement]);
  var handleKeyDown = React.useCallback(function (event) {
    if (focused && event.key === 'Enter') {
      var el = treeitemRef.current || rootRef.current;
      el == null ? void 0 : el.click();
    }
  }, [focused]);
  React.useEffect(function () {
    if (!rootRef.current) return;
    return registerItem(rootRef.current, itemPath.join('/'), expanded, selected);
  }, [expanded, itemPath, registerItem, selected]);
  var content = /*#__PURE__*/React__default["default"].createElement(Flex, {
    padding: padding
  }, /*#__PURE__*/React__default["default"].createElement(Box, {
    marginRight: space,
    style: {
      visibility: icon || children ? 'visible' : 'hidden',
      pointerEvents: 'none'
    }
  }, icon && /*#__PURE__*/React__default["default"].createElement(Text, {
    muted: muted,
    size: fontSize,
    weight: weight
  }, /*#__PURE__*/React.createElement(icon)), !icon && /*#__PURE__*/React__default["default"].createElement(ToggleArrowText, {
    muted: muted,
    size: fontSize,
    weight: weight
  }, /*#__PURE__*/React__default["default"].createElement(icons.ToggleArrowRightIcon, {
    style: {
      transform: expanded ? 'rotate(90deg)' : undefined
    }
  }))), /*#__PURE__*/React__default["default"].createElement(Box, {
    flex: 1
  }, /*#__PURE__*/React__default["default"].createElement(Text, {
    muted: muted,
    size: fontSize,
    textOverflow: "ellipsis",
    weight: weight
  }, text)));

  if (href) {
    return /*#__PURE__*/React__default["default"].createElement(Root, _extends({
      "data-selected": selected ? '' : undefined,
      "data-tree-id": id,
      "data-tree-key": itemKey,
      "data-ui": "TreeItem"
    }, restProps, {
      onClick: handleClick,
      ref: rootRef,
      role: "none"
    }), /*#__PURE__*/React__default["default"].createElement(TreeItemBox, {
      "$level": tree.level,
      "aria-expanded": expanded,
      "data-ui": "TreeItem__box",
      href: href,
      ref: treeitemRef,
      role: "treeitem",
      tabIndex: tabIndex
    }, content), /*#__PURE__*/React__default["default"].createElement(TreeContext.Provider, {
      value: contextValue
    }, children && /*#__PURE__*/React__default["default"].createElement(TreeGroup, {
      hidden: !expanded
    }, children)));
  }

  return /*#__PURE__*/React__default["default"].createElement(Root, _extends({
    "data-selected": selected ? '' : undefined,
    "data-ui": "TreeItem",
    "data-tree-id": id,
    "data-tree-key": itemKey
  }, restProps, {
    "aria-expanded": expanded,
    onClick: handleClick,
    onKeyDown: handleKeyDown,
    ref: rootRef,
    role: "treeitem",
    tabIndex: tabIndex
  }), /*#__PURE__*/React__default["default"].createElement(TreeItemBox, {
    "$level": tree.level,
    as: "div",
    "data-ui": "TreeItem__box"
  }, content), /*#__PURE__*/React__default["default"].createElement(TreeContext.Provider, {
    value: contextValue
  }, children && /*#__PURE__*/React__default["default"].createElement(TreeGroup, {
    expanded: expanded
  }, children)));
});

exports.Autocomplete = Autocomplete;
exports.Avatar = Avatar;
exports.AvatarCounter = AvatarCounter;
exports.AvatarStack = AvatarStack;
exports.Badge = Badge;
exports.BoundaryElementProvider = BoundaryElementProvider;
exports.Box = Box;
exports.Breadcrumbs = Breadcrumbs;
exports.Button = Button;
exports.Card = Card;
exports.Checkbox = Checkbox;
exports.Code = Code;
exports.CodeSkeleton = CodeSkeleton;
exports.Container = Container;
exports.Dialog = Dialog;
exports.DialogContext = DialogContext;
exports.DialogProvider = DialogProvider;
exports.ElementQuery = ElementQuery;
exports.ErrorBoundary = ErrorBoundary;
exports.Flex = Flex;
exports.Grid = Grid;
exports.Heading = Heading;
exports.HeadingSkeleton = HeadingSkeleton;
exports.Hotkeys = Hotkeys;
exports.Inline = Inline;
exports.KBD = KBD;
exports.Label = Label;
exports.LabelSkeleton = LabelSkeleton;
exports.Layer = Layer;
exports.LayerProvider = LayerProvider;
exports.Menu = Menu;
exports.MenuButton = MenuButton;
exports.MenuDivider = MenuDivider;
exports.MenuGroup = MenuGroup;
exports.MenuItem = MenuItem;
exports.Popover = Popover;
exports.Portal = Portal;
exports.PortalProvider = PortalProvider;
exports.Radio = Radio;
exports.ResizeObserver = RO;
exports.Select = Select;
exports.Skeleton = Skeleton;
exports.Spinner = Spinner;
exports.SrOnly = SrOnly;
exports.Stack = Stack;
exports.Switch = Switch;
exports.Tab = Tab;
exports.TabList = TabList;
exports.TabPanel = TabPanel;
exports.Text = Text;
exports.TextArea = TextArea;
exports.TextInput = TextInput;
exports.TextSkeleton = TextSkeleton;
exports.ThemeColorProvider = ThemeColorProvider;
exports.ThemeProvider = ThemeProvider;
exports.Toast = Toast;
exports.ToastProvider = ToastProvider;
exports.Tooltip = Tooltip;
exports.Tree = Tree;
exports.TreeItem = TreeItem;
exports.VirtualList = VirtualList;
exports._hasFocus = _hasFocus;
exports._isEnterToClickElement = _isEnterToClickElement;
exports._isScrollable = _isScrollable;
exports._raf = _raf;
exports._raf2 = _raf2;
exports.attemptFocus = attemptFocus;
exports.createColorTheme = createColorTheme;
exports.fillCSSObject = fillCSSObject;
exports.focusFirstDescendant = focusFirstDescendant;
exports.focusLastDescendant = focusLastDescendant;
exports.getResponsiveProp = getResponsiveProp;
exports.getResponsiveSpace = getResponsiveSpace;
exports.hexToRgb = hexToRgb;
exports.hslToRgb = hslToRgb;
exports.isFocusable = isFocusable;
exports.isHTMLAnchorElement = isHTMLAnchorElement;
exports.isHTMLButtonElement = isHTMLButtonElement;
exports.isHTMLElement = isHTMLElement;
exports.isHTMLInputElement = isHTMLInputElement;
exports.isHTMLSelectElement = isHTMLSelectElement;
exports.isHTMLTextAreaElement = isHTMLTextAreaElement;
exports.multiply = multiply$1;
exports.parseColor = parseColor;
exports.rem = rem;
exports.responsive = responsive;
exports.responsiveCodeFontStyle = responsiveCodeFontStyle;
exports.responsiveHeadingFont = responsiveHeadingFont;
exports.responsiveLabelFont = responsiveLabelFont;
exports.responsiveTextAlignStyle = responsiveTextAlignStyle;
exports.responsiveTextFont = responsiveTextFont;
exports.rgbToHex = rgbToHex;
exports.rgbToHsl = rgbToHsl;
exports.rgba = rgba;
exports.screen = screen$1;
exports.studioTheme = studioTheme;
exports.useBoundaryElement = useBoundaryElement;
exports.useClickOutside = useClickOutside;
exports.useCustomValidity = useCustomValidity;
exports.useDialog = useDialog;
exports.useElementRect = useElementRect;
exports.useForwardedRef = useForwardedRef;
exports.useGlobalKeyDown = useGlobalKeyDown;
exports.useLayer = useLayer;
exports.useMediaIndex = useMediaIndex;
exports.usePortal = usePortal;
exports.usePrefersDark = usePrefersDark;
exports.useResponsiveProp = useResponsiveProp;
exports.useRootTheme = useRootTheme;
exports.useTheme = useTheme;
exports.useToast = useToast;
exports.useTree = useTree;
//# sourceMappingURL=sanity-ui.js.map
