import React from 'react';
import { BoxProps, PopoverProps } from '../../primitives';
import { AutocompleteOpenButtonProps, BaseAutocompleteOption } from './types';
/**
 * @public
 */
export interface AutocompleteProps<Option extends BaseAutocompleteOption> {
    border?: boolean;
    customValidity?: string;
    filterOption?: (query: string, option: Option) => boolean;
    fontSize?: number | number[];
    icon?: React.ComponentType | React.ReactNode;
    id: string;
    /**
     * @beta
     */
    listBox?: BoxProps;
    loading?: boolean;
    onChange?: (value: string) => void;
    onQueryChange?: (query: string | null) => void;
    onSelect?: (value: string) => void;
    /**
     * @beta
     */
    openButton?: boolean | AutocompleteOpenButtonProps;
    options?: Option[];
    padding?: number | number[];
    popover?: Omit<PopoverProps, 'content' | 'onMouseEnter' | 'onMouseLeave' | 'open'>;
    prefix?: React.ReactNode;
    radius?: number | number[];
    /**
     * @beta
     */
    relatedElements?: HTMLElement[];
    renderOption?: (option: Option) => React.ReactElement;
    /**
     * @beta
     */
    renderPopover?: (props: {
        content: React.ReactElement | null;
        hidden: boolean;
        inputElement: HTMLInputElement | null;
        onMouseEnter: () => void;
        onMouseLeave: () => void;
    }, ref: React.Ref<HTMLDivElement>) => React.ReactNode;
    renderValue?: (value: string, option?: Option) => string;
    suffix?: React.ReactNode;
    value?: string;
}
/**
 * @public
 */
export declare const Autocomplete: <Option extends BaseAutocompleteOption>(props: AutocompleteProps<Option> & Omit<React.HTMLProps<HTMLInputElement>, "as" | "type" | "ref" | "autoComplete" | "value" | "id" | "spellCheck" | "role" | "prefix" | "autoCapitalize" | "autoCorrect" | "inputMode" | "aria-activedescendant" | "aria-autocomplete" | "aria-expanded" | "aria-owns" | "onChange" | "onSelect"> & {
    ref?: React.Ref<HTMLInputElement> | undefined;
}) => React.ReactElement;
//# sourceMappingURL=autocomplete.d.ts.map