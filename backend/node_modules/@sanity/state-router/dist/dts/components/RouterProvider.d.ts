import React from 'react';
import PropTypes from 'prop-types';
import { Router } from '../types';
import { InternalRouter, NavigateOptions, RouterProviderContext, RouterState, IntentParameters } from './types';
declare type RouterProviderProps = {
    onNavigate: (nextPath: string, options?: NavigateOptions) => void;
    router: Router;
    state: RouterState;
    children: React.ReactNode;
};
export default class RouterProvider extends React.Component<RouterProviderProps> {
    static childContextTypes: {
        __internalRouter: PropTypes.Requireable<object>;
    };
    __internalRouter: InternalRouter;
    _state: RouterState;
    constructor(props: RouterProviderProps);
    navigateUrl: (url: string, options?: NavigateOptions) => void;
    navigateState: (nextState: Record<string, unknown>, options?: NavigateOptions) => void;
    getState: () => RouterState;
    resolvePathFromState: (state: Record<string, unknown>) => string;
    navigateIntent: (intentName: string, params?: IntentParameters | undefined, options?: NavigateOptions) => void;
    resolveIntentLink: (intentName: string, parameters?: IntentParameters | undefined) => string;
    getChildContext(): RouterProviderContext;
    componentDidUpdate(prevProps: any): void;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=RouterProvider.d.ts.map