"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SearchField = SearchField;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _icons = require("@sanity/icons");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _draftUtils = require("part:@sanity/base/util/draft-utils");

var _ = require(".");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var StyledText = (0, _styledComponents.default)(_ui.Text)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  word-break: break-word;\n"])));

function SearchField(props) {
  var fullScreen = props.fullScreen,
      inputElement = props.inputElement,
      onSearchItemClick = props.onSearchItemClick,
      portalElement = props.portalElement,
      relatedElements = props.relatedElements;

  var _useSearch = (0, _.useSearch)(),
      handleSearch = _useSearch.handleSearch,
      searchState = _useSearch.searchState;

  var hits = searchState.hits,
      loading = searchState.loading,
      searchString = searchState.searchString,
      error = searchState.error;
  var handleClickItem = (0, _react.useCallback)(() => {
    if (fullScreen && onSearchItemClick) {
      onSearchItemClick();
    }
  }, [fullScreen, onSearchItemClick]);
  var filterOption = (0, _react.useCallback)(() => true, []);
  var renderOption = (0, _react.useCallback)(option => {
    var data = option.payload.data;
    return /*#__PURE__*/_react.default.createElement(_.SearchItem, {
      data: data,
      key: data.hit._id,
      onClick: handleClickItem,
      padding: 2,
      documentId: (0, _draftUtils.getPublishedId)(data.hit._id) || ''
    });
  }, [handleClickItem]);
  var renderPopoverFullscreen = (0, _react.useCallback)((popoverProps, ref) => {
    if (!popoverProps.hidden && error) {
      return /*#__PURE__*/_react.default.createElement(_.SearchFullscreenContent, {
        tone: "critical"
      }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
        align: "center",
        flex: 1,
        height: "fill",
        justify: "center",
        padding: 4,
        sizing: "border"
      }, /*#__PURE__*/_react.default.createElement(StyledText, {
        align: "center",
        muted: true
      }, error.message)));
    }

    if (!popoverProps.hidden && searchString && !loading && hits.length === 0) {
      return /*#__PURE__*/_react.default.createElement(_.SearchFullscreenContent, null, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
        align: "center",
        flex: 1,
        height: "fill",
        justify: "center",
        padding: 4,
        sizing: "border"
      }, /*#__PURE__*/_react.default.createElement(StyledText, {
        align: "center",
        muted: true
      }, "No results for ", /*#__PURE__*/_react.default.createElement("strong", null, "\u2018", searchString, "\u2019"))));
    }

    return /*#__PURE__*/_react.default.createElement(_.SearchFullscreenContent, {
      hidden: popoverProps.hidden,
      ref: ref
    }, popoverProps.content);
  }, [error, searchString, loading, hits]);
  var renderPopover = (0, _react.useCallback)((popoverProps, ref) => {
    if (!popoverProps.hidden && error) {
      return /*#__PURE__*/_react.default.createElement(_.SearchPopoverContent, {
        open: !popoverProps.hidden,
        referenceElement: popoverProps.inputElement,
        ref: ref,
        content: /*#__PURE__*/_react.default.createElement(_ui.Box, {
          padding: 4
        }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
          align: "center",
          height: "fill",
          justify: "center"
        }, /*#__PURE__*/_react.default.createElement(StyledText, {
          align: "center",
          muted: true
        }, (error === null || error === void 0 ? void 0 : error.message) || 'Something went wrong while searching')))
      });
    }

    if (!popoverProps.hidden && searchString && !loading && hits.length === 0) {
      return /*#__PURE__*/_react.default.createElement(_.SearchPopoverContent, {
        open: !popoverProps.hidden,
        referenceElement: popoverProps.inputElement,
        ref: ref,
        content: /*#__PURE__*/_react.default.createElement(_ui.Box, {
          padding: 4
        }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
          align: "center",
          height: "fill",
          justify: "center"
        }, /*#__PURE__*/_react.default.createElement(StyledText, {
          align: "center",
          muted: true
        }, "No results for ", /*#__PURE__*/_react.default.createElement("strong", null, "\u201C", searchString, "\u201D"))))
      });
    }

    if (!popoverProps.hidden && hits.length > 0) {
      return /*#__PURE__*/_react.default.createElement(_.SearchPopoverContent, {
        open: !popoverProps.hidden,
        referenceElement: popoverProps.inputElement,
        ref: ref,
        content: popoverProps.content
      });
    }

    return undefined;
  }, [error, searchString, loading, hits]);
  var autoComplete = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(_ui.Autocomplete, {
    filterOption: filterOption,
    icon: _icons.SearchIcon,
    id: "studio-search",
    key: "studio-search",
    listBox: {
      padding: fullScreen ? 2 : 1
    },
    loading: loading,
    onQueryChange: handleSearch,
    options: hits.map(hit => {
      return {
        value: hit.hit._id,
        payload: {
          data: hit
        }
      };
    }),
    placeholder: "Search",
    radius: 2,
    ref: inputElement,
    relatedElements: relatedElements,
    renderOption: renderOption,
    renderPopover: fullScreen ? renderPopoverFullscreen : renderPopover
  }), [filterOption, fullScreen, handleSearch, hits, inputElement, loading, relatedElements, renderOption, renderPopover, renderPopoverFullscreen]);
  return /*#__PURE__*/_react.default.createElement(_ui.PortalProvider, {
    element: fullScreen ? portalElement : null
  }, autoComplete);
}