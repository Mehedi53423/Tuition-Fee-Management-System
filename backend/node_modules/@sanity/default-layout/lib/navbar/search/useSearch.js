"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSearch = useSearch;

var _react = require("react");

var _reactRx = require("react-rx");

var _operators = require("rxjs/operators");

var _rxjs = require("rxjs");

var _search = _interopRequireDefault(require("part:@sanity/base/search"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var INITIAL_SEARCH_STATE = {
  hits: [],
  loading: false,
  error: null,
  searchString: ''
};

function nonNullable(v) {
  return v !== null;
}

function useSearch() {
  var _useState = (0, _react.useState)(INITIAL_SEARCH_STATE),
      _useState2 = _slicedToArray(_useState, 2),
      searchState = _useState2[0],
      setSearchState = _useState2[1];

  var onSearch = (0, _react.useCallback)(query => {
    return query === '' ? (0, _rxjs.of)([]) : (0, _search.default)(query);
  }, []);
  var handleQueryChange = (0, _reactRx.useObservableCallback)(inputValue$ => {
    return inputValue$.pipe((0, _operators.distinctUntilChanged)(), (0, _operators.filter)(nonNullable), (0, _operators.switchMap)(searchString => (0, _rxjs.concat)((0, _rxjs.of)({
      hits: [],
      error: null,
      loading: true,
      searchString: searchString
    }), (0, _rxjs.timer)(100).pipe((0, _operators.mergeMapTo)(_rxjs.EMPTY)), onSearch(searchString).pipe((0, _operators.map)(hits => ({
      hits
    })), (0, _operators.catchError)(error => {
      return (0, _rxjs.of)({
        hits: [],
        error: error,
        loading: false,
        searchString: searchString
      });
    })), (0, _rxjs.of)({
      loading: false
    }))), (0, _operators.scan)((prevState, nextState) => {
      return _objectSpread(_objectSpread({}, prevState), nextState);
    }, INITIAL_SEARCH_STATE), (0, _operators.tap)(setSearchState));
  }, []);
  var handleClearSearch = (0, _react.useCallback)(() => {
    setSearchState(INITIAL_SEARCH_STATE);
    handleQueryChange(''); // cancel current request
  }, [handleQueryChange]);
  var handleSearch = (0, _react.useCallback)(searchString => {
    handleQueryChange(searchString);
  }, [handleQueryChange]);
  return {
    handleSearch,
    handleClearSearch,
    searchState
  };
}