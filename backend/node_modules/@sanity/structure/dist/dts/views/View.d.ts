import { Serializable, SerializeOptions, SerializePath } from '../StructureNodes';
import { FixMe } from '../types';
import { ComponentViewBuilder } from './ComponentView';
import { FormViewBuilder } from './FormView';
export interface View {
    type: string;
    id: string;
    title: string;
    icon?: FixMe;
}
export declare abstract class GenericViewBuilder<L extends Partial<View>, ConcreteImpl> implements Serializable {
    protected spec: L;
    id(id: string): ConcreteImpl;
    getId(): string | undefined;
    title(title: string): ConcreteImpl;
    getTitle(): string | undefined;
    icon(icon: FixMe): ConcreteImpl;
    getIcon(): Function | undefined;
    serialize(options?: SerializeOptions): View;
    clone(withSpec?: Partial<View>): ConcreteImpl;
}
export declare function maybeSerializeView(item: View | Serializable, index: number, path: SerializePath): View;
export declare type ViewBuilder = ComponentViewBuilder | FormViewBuilder;
//# sourceMappingURL=View.d.ts.map