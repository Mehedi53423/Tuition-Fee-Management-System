"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormViewBuilder = void 0;

var _View = require("./View");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class FormViewBuilder extends _View.GenericViewBuilder {
  constructor(spec) {
    super();

    _defineProperty(this, "spec", void 0);

    this.spec = _objectSpread({
      id: 'editor',
      title: 'Editor'
    }, spec ? spec : {});
  }

  serialize() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      path: []
    };
    var base = super.serialize(options);
    return _objectSpread(_objectSpread({}, base), {}, {
      type: 'form'
    });
  }

  clone(withSpec) {
    var builder = new FormViewBuilder();
    builder.spec = _objectSpread(_objectSpread({}, this.spec), withSpec || {});
    return builder;
  }

}

exports.FormViewBuilder = FormViewBuilder;