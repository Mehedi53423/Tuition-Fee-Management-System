{"version":3,"file":"image-url.umd.js","sources":["../../src/parseAssetId.ts","../../src/parseSource.ts","../../src/urlForImage.ts","../../src/builder.ts"],"sourcesContent":["const example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg'\n\nexport default function parseAssetId(ref: string) {\n  const [, id, dimensionString, format] = ref.split('-')\n\n  if (!id || !dimensionString || !format) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  const [imgWidthStr, imgHeightStr] = dimensionString.split('x')\n\n  const width = +imgWidthStr\n  const height = +imgHeightStr\n\n  const isValidAssetId = isFinite(width) && isFinite(height)\n  if (!isValidAssetId) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  return {id, width, height, format}\n}\n","import {\n  SanityAsset,\n  SanityImageObject,\n  SanityImageSource,\n  SanityImageWithAssetStub,\n  SanityReference,\n} from './types'\n\nconst isRef = (src: SanityImageSource): src is SanityReference => {\n  const source = src as SanityReference\n  return source ? typeof source._ref === 'string' : false\n}\n\nconst isAsset = (src: SanityImageSource): src is SanityAsset => {\n  const source = src as SanityAsset\n  return source ? typeof source._id === 'string' : false\n}\n\nconst isAssetStub = (src: SanityImageSource): src is SanityImageWithAssetStub => {\n  const source = src as SanityImageWithAssetStub\n  return source && source.asset ? typeof source.asset.url === 'string' : false\n}\n\n// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nexport default function parseSource(source?: SanityImageSource) {\n  if (!source) {\n    return null\n  }\n\n  let image: SanityImageObject\n\n  if (typeof source === 'string' && isUrl(source)) {\n    // Someone passed an existing image url?\n    image = {\n      asset: {_ref: urlToId(source)},\n    }\n  } else if (typeof source === 'string') {\n    // Just an asset id\n    image = {\n      asset: {_ref: source},\n    }\n  } else if (isRef(source)) {\n    // We just got passed an asset directly\n    image = {\n      asset: source,\n    }\n  } else if (isAsset(source)) {\n    // If we were passed an image asset document\n    image = {\n      asset: {\n        _ref: source._id || '',\n      },\n    }\n  } else if (isAssetStub(source)) {\n    // If we were passed a partial asset (`url`, but no `_id`)\n    image = {\n      asset: {\n        _ref: urlToId(source.asset.url),\n      },\n    }\n  } else if (typeof source.asset === 'object') {\n    // Probably an actual image with materialized asset\n    image = source\n  } else {\n    // We got something that does not look like an image, or it is an image\n    // that currently isn't sporting an asset.\n    return null\n  }\n\n  const img = source as SanityImageObject\n  if (img.crop) {\n    image.crop = img.crop\n  }\n\n  if (img.hotspot) {\n    image.hotspot = img.hotspot\n  }\n\n  return applyDefaults(image)\n}\n\nfunction isUrl(url: string) {\n  return /^https?:\\/\\//.test(`${url}`)\n}\n\nfunction urlToId(url: string) {\n  const parts = url.split('/').slice(-1)\n  return `image-${parts[0]}`.replace(/\\.([a-z]+)$/, '-$1')\n}\n\n// Mock crop and hotspot if image lacks it\nfunction applyDefaults(image: SanityImageObject) {\n  if (image.crop && image.hotspot) {\n    return image as Required<SanityImageObject>\n  }\n\n  // We need to pad in default values for crop or hotspot\n  const result = {...image}\n\n  if (!result.crop) {\n    result.crop = {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0,\n    }\n  }\n\n  if (!result.hotspot) {\n    result.hotspot = {\n      x: 0.5,\n      y: 0.5,\n      height: 1.0,\n      width: 1.0,\n    }\n  }\n\n  return result as Required<SanityImageObject>\n}\n","import parseAssetId from './parseAssetId'\nimport parseSource from './parseSource'\nimport {\n  CropSpec,\n  HotspotSpec,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAsset,\n  SanityAsset,\n  SanityImageFitResult,\n  SanityImageRect,\n  SanityReference,\n} from './types'\n\nexport const SPEC_NAME_TO_URL_NAME_MAPPINGS = [\n  ['width', 'w'],\n  ['height', 'h'],\n  ['format', 'fm'],\n  ['download', 'dl'],\n  ['blur', 'blur'],\n  ['sharpen', 'sharp'],\n  ['invert', 'invert'],\n  ['orientation', 'or'],\n  ['minHeight', 'min-h'],\n  ['maxHeight', 'max-h'],\n  ['minWidth', 'min-w'],\n  ['maxWidth', 'max-w'],\n  ['quality', 'q'],\n  ['fit', 'fit'],\n  ['crop', 'crop'],\n  ['saturation', 'sat'],\n  ['auto', 'auto'],\n  ['dpr', 'dpr'],\n  ['pad', 'pad'],\n]\n\nexport default function urlForImage(options: ImageUrlBuilderOptions): string {\n  let spec = {...(options || {})}\n  const source = spec.source\n  delete spec.source\n\n  const image = parseSource(source)\n  if (!image) {\n    throw new Error(`Unable to resolve image URL from source (${JSON.stringify(source)})`)\n  }\n\n  const id = (image.asset as SanityReference)._ref || (image.asset as SanityAsset)._id || ''\n  const asset = parseAssetId(id)\n\n  // Compute crop rect in terms of pixel coordinates in the raw source image\n  const cropLeft = Math.round(image.crop.left * asset.width)\n  const cropTop = Math.round(image.crop.top * asset.height)\n  const crop = {\n    left: cropLeft,\n    top: cropTop,\n    width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n    height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop),\n  }\n\n  // Compute hot spot rect in terms of pixel coordinates\n  const hotSpotVerticalRadius = (image.hotspot.height * asset.height) / 2\n  const hotSpotHorizontalRadius = (image.hotspot.width * asset.width) / 2\n  const hotSpotCenterX = image.hotspot.x * asset.width\n  const hotSpotCenterY = image.hotspot.y * asset.height\n  const hotspot = {\n    left: hotSpotCenterX - hotSpotHorizontalRadius,\n    top: hotSpotCenterY - hotSpotVerticalRadius,\n    right: hotSpotCenterX + hotSpotHorizontalRadius,\n    bottom: hotSpotCenterY + hotSpotVerticalRadius,\n  }\n\n  // If irrelevant, or if we are requested to: don't perform crop/fit based on\n  // the crop/hotspot.\n  if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n    spec = {...spec, ...fit({crop, hotspot}, spec)}\n  }\n\n  return specToImageUrl({...spec, asset})\n}\n\n// eslint-disable-next-line complexity\nfunction specToImageUrl(spec: ImageUrlBuilderOptionsWithAsset) {\n  const cdnUrl = spec.baseUrl || 'https://cdn.sanity.io'\n  const filename = `${spec.asset.id}-${spec.asset.width}x${spec.asset.height}.${spec.asset.format}`\n  const baseUrl = `${cdnUrl}/images/${spec.projectId}/${spec.dataset}/${filename}`\n\n  const params = []\n\n  if (spec.rect) {\n    // Only bother url with a crop if it actually crops anything\n    const {left, top, width, height} = spec.rect\n    const isEffectiveCrop =\n      left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width\n\n    if (isEffectiveCrop) {\n      params.push(`rect=${left},${top},${width},${height}`)\n    }\n  }\n\n  if (spec.bg) {\n    params.push(`bg=${spec.bg}`)\n  }\n\n  if (spec.focalPoint) {\n    params.push(`fp-x=${spec.focalPoint.x}`)\n    params.push(`fp-y=${spec.focalPoint.y}`)\n  }\n\n  const flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('')\n  if (flip) {\n    params.push(`flip=${flip}`)\n  }\n\n  // Map from spec name to url param name, and allow using the actual param name as an alternative\n  SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach((mapping) => {\n    const [specName, param] = mapping\n    if (typeof spec[specName] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[specName])}`)\n    } else if (typeof spec[param] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[param])}`)\n    }\n  })\n\n  if (params.length === 0) {\n    return baseUrl\n  }\n\n  return `${baseUrl}?${params.join('&')}`\n}\n\nfunction fit(\n  source: {crop: CropSpec; hotspot: HotspotSpec},\n  spec: ImageUrlBuilderOptions\n): SanityImageFitResult {\n  let cropRect: SanityImageRect\n\n  const imgWidth = spec.width\n  const imgHeight = spec.height\n\n  // If we are not constraining the aspect ratio, we'll just use the whole crop\n  if (!(imgWidth && imgHeight)) {\n    return {width: imgWidth, height: imgHeight, rect: source.crop}\n  }\n\n  const crop = source.crop\n  const hotspot = source.hotspot\n\n  // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n  const desiredAspectRatio = imgWidth / imgHeight\n  const cropAspectRatio = crop.width / crop.height\n\n  if (cropAspectRatio > desiredAspectRatio) {\n    // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n    const height = Math.round(crop.height)\n    const width = Math.round(height * desiredAspectRatio)\n    const top = Math.max(0, Math.round(crop.top))\n\n    // Center output horizontally over hotspot\n    const hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left)\n    let left = Math.max(0, Math.round(hotspotXCenter - width / 2))\n\n    // Keep output within crop\n    if (left < crop.left) {\n      left = crop.left\n    } else if (left + width > crop.left + crop.width) {\n      left = crop.left + crop.width - width\n    }\n\n    cropRect = {left, top, width, height}\n  } else {\n    // The crop is taller than the desired ratio, we are cutting from top and bottom\n    const width = crop.width\n    const height = Math.round(width / desiredAspectRatio)\n    const left = Math.max(0, Math.round(crop.left))\n\n    // Center output vertically over hotspot\n    const hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top)\n    let top = Math.max(0, Math.round(hotspotYCenter - height / 2))\n\n    // Keep output rect within crop\n    if (top < crop.top) {\n      top = crop.top\n    } else if (top + height > crop.top + crop.height) {\n      top = crop.top + crop.height - height\n    }\n\n    cropRect = {left, top, width, height}\n  }\n\n  return {\n    width: imgWidth,\n    height: imgHeight,\n    rect: cropRect,\n  }\n}\n\n// For backwards-compatibility\nexport {parseSource}\n","import {\n  AutoMode,\n  CropMode,\n  FitMode,\n  ImageFormat,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAliases,\n  Orientation,\n  SanityClientLike,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport urlForImage, {SPEC_NAME_TO_URL_NAME_MAPPINGS} from './urlForImage'\n\nconst validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min']\nconst validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy']\nconst validAutoModes = ['format']\n\nfunction isSanityClientLike(client?: SanityClientLike): client is SanityClientLike {\n  return client ? typeof client.clientConfig === 'object' : false\n}\n\nfunction rewriteSpecName(key: string) {\n  const specs = SPEC_NAME_TO_URL_NAME_MAPPINGS\n  for (const entry of specs) {\n    const [specName, param] = entry\n    if (key === specName || key === param) {\n      return specName\n    }\n  }\n\n  return key\n}\n\nexport default function urlBuilder(options?: SanityClientLike | SanityProjectDetails) {\n  // Did we get a SanityClient?\n  const client = options as SanityClientLike\n  if (isSanityClientLike(client)) {\n    // Inherit config from client\n    const {apiHost: apiUrl, projectId, dataset} = client.clientConfig\n    const apiHost = apiUrl || 'https://api.sanity.io'\n    return new ImageUrlBuilder(null, {\n      baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId,\n      dataset,\n    })\n  }\n\n  // Or just accept the options as given\n  return new ImageUrlBuilder(null, options as ImageUrlBuilderOptions)\n}\n\nexport class ImageUrlBuilder {\n  public options: ImageUrlBuilderOptions\n\n  constructor(parent: ImageUrlBuilder | null, options: ImageUrlBuilderOptions) {\n    this.options = parent\n      ? {...(parent.options || {}), ...(options || {})} // Merge parent options\n      : {...(options || {})} // Copy options\n  }\n\n  withOptions(options: Partial<ImageUrlBuilderOptionsWithAliases>) {\n    const baseUrl = options.baseUrl || this.options.baseUrl\n\n    const newOptions: {[key: string]: any} = {baseUrl}\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        const specKey = rewriteSpecName(key)\n        newOptions[specKey] = options[key]\n      }\n    }\n\n    return new ImageUrlBuilder(this, {baseUrl, ...newOptions})\n  }\n\n  // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n  image(source: SanityImageSource) {\n    return this.withOptions({source})\n  }\n\n  // Specify the dataset\n  dataset(dataset: string) {\n    return this.withOptions({dataset})\n  }\n\n  // Specify the projectId\n  projectId(projectId: string) {\n    return this.withOptions({projectId})\n  }\n\n  // Specify background color\n  bg(bg: string) {\n    return this.withOptions({bg})\n  }\n\n  // Set DPR scaling factor\n  dpr(dpr: number) {\n    // A DPR of 1 is the default - so only include it if we have a different value\n    return this.withOptions(dpr && dpr !== 1 ? {dpr} : {})\n  }\n\n  // Specify the width of the image in pixels\n  width(width: number) {\n    return this.withOptions({width})\n  }\n\n  // Specify the height of the image in pixels\n  height(height: number) {\n    return this.withOptions({height})\n  }\n\n  // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n  focalPoint(x: number, y: number) {\n    return this.withOptions({focalPoint: {x, y}})\n  }\n\n  maxWidth(maxWidth: number) {\n    return this.withOptions({maxWidth})\n  }\n\n  minWidth(minWidth: number) {\n    return this.withOptions({minWidth})\n  }\n\n  maxHeight(maxHeight: number) {\n    return this.withOptions({maxHeight})\n  }\n\n  minHeight(minHeight: number) {\n    return this.withOptions({minHeight})\n  }\n\n  // Specify width and height in pixels\n  size(width: number, height: number) {\n    return this.withOptions({width, height})\n  }\n\n  // Specify blur between 0 and 100\n  blur(blur: number) {\n    return this.withOptions({blur})\n  }\n\n  sharpen(sharpen: number) {\n    return this.withOptions({sharpen})\n  }\n\n  // Specify the desired rectangle of the image\n  rect(left: number, top: number, width: number, height: number) {\n    return this.withOptions({rect: {left, top, width, height}})\n  }\n\n  // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n  format(format: ImageFormat) {\n    return this.withOptions({format})\n  }\n\n  invert(invert: boolean) {\n    return this.withOptions({invert})\n  }\n\n  // Rotation in degrees 0, 90, 180, 270\n  orientation(orientation: Orientation) {\n    return this.withOptions({orientation})\n  }\n\n  // Compression quality 0-100\n  quality(quality: number) {\n    return this.withOptions({quality})\n  }\n\n  // Make it a download link. Parameter is default filename.\n  forceDownload(download: boolean | string) {\n    return this.withOptions({download})\n  }\n\n  // Flip image horizontally\n  flipHorizontal() {\n    return this.withOptions({flipHorizontal: true})\n  }\n\n  // Flip image vertically\n  flipVertical() {\n    return this.withOptions({flipVertical: true})\n  }\n\n  // Ignore crop/hotspot from image record, even when present\n  ignoreImageParams() {\n    return this.withOptions({ignoreImageParams: true})\n  }\n\n  fit(value: FitMode) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(`Invalid fit mode \"${value}\"`)\n    }\n\n    return this.withOptions({fit: value})\n  }\n\n  crop(value: CropMode) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(`Invalid crop mode \"${value}\"`)\n    }\n\n    return this.withOptions({crop: value})\n  }\n\n  // Saturation\n  saturation(saturation: number) {\n    return this.withOptions({saturation})\n  }\n\n  auto(value: AutoMode) {\n    if (validAutoModes.indexOf(value) === -1) {\n      throw new Error(`Invalid auto mode \"${value}\"`)\n    }\n\n    return this.withOptions({auto: value})\n  }\n\n  // Specify the number of pixels to pad the image\n  pad(pad: number) {\n    return this.withOptions({pad})\n  }\n\n  // Gets the url based on the submitted parameters\n  url() {\n    return urlForImage(this.options)\n  }\n\n  // Alias for url()\n  toString() {\n    return this.url()\n  }\n}\n"],"names":["const","example","parseAssetId","ref","split","id","dimensionString","format","Error","imgWidthStr","imgHeightStr","width","height","isValidAssetId","isFinite","isRef","src","source","_ref","isAsset","_id","isAssetStub","asset","url","parseSource","image","isUrl","urlToId","img","crop","hotspot","applyDefaults","test","parts","slice","replace","result","left","top","bottom","right","x","y","SPEC_NAME_TO_URL_NAME_MAPPINGS","urlForImage","options","spec","JSON","stringify","cropLeft","Math","round","cropTop","hotSpotVerticalRadius","hotSpotHorizontalRadius","hotSpotCenterX","hotSpotCenterY","rect","focalPoint","ignoreImageParams","fit","specToImageUrl","cdnUrl","baseUrl","filename","projectId","dataset","params","isEffectiveCrop","push","bg","flip","flipHorizontal","flipVertical","filter","Boolean","join","forEach","mapping","specName","param","encodeURIComponent","length","cropRect","imgWidth","imgHeight","desiredAspectRatio","cropAspectRatio","max","hotspotXCenter","hotspotYCenter","validFits","validCrops","validAutoModes","isSanityClientLike","client","clientConfig","rewriteSpecName","key","specs","entry","urlBuilder","apiUrl","apiHost","ImageUrlBuilder","constructor","parent","withOptions","newOptions","hasOwnProperty","specKey","dpr","maxWidth","minWidth","maxHeight","minHeight","size","blur","sharpen","invert","orientation","quality","forceDownload","download","value","indexOf","saturation","auto","pad","toString"],"mappings":"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"}