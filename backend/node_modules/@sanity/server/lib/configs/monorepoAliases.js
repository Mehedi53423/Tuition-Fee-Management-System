"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMonorepoAliases = getMonorepoAliases;

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MONOREPO_PATH = _path.default.resolve(__dirname, '../../../../..');

var ALIASES_FILENAME = "".concat(MONOREPO_PATH, "/.module-aliases");

function getMonorepoAliases() {
  var defaultAliases = {
    '@sanity/ui': require.resolve('@sanity/ui'),
    'styled-components': require.resolve('styled-components')
  };
  var moduleAliases = {};

  try {
    // eslint-disable-next-line import/no-dynamic-require
    moduleAliases = require(ALIASES_FILENAME);
  } catch (err) {
    // eslint-disable-next-line no-console
    console.warn('WARNING: No path aliases found in `%s`', ALIASES_FILENAME, err.message);
  }

  return _objectSpread(_objectSpread({}, defaultAliases), resolveAliases(moduleAliases));
}

function resolve() {
  for (var _len = arguments.length, segments = new Array(_len), _key = 0; _key < _len; _key++) {
    segments[_key] = arguments[_key];
  }

  return _path.default.resolve(MONOREPO_PATH, ...segments);
}

function resolveAliases(aliases) {
  return Object.keys(aliases).reduce((acc, module) => {
    acc[module] = resolve(aliases[module]);
    return acc;
  }, {});
}