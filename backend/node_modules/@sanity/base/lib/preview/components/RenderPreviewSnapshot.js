"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = RenderPreviewSnapshot;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireDefault(require("react"));

var _types = require("@sanity/types");

var _legacyParts = require("../../legacyParts");

var _SanityDefaultPreview = _interopRequireDefault(require("./SanityDefaultPreview"));

var _excluded = ["snapshot", "type", "isLive", "isLoading", "layout"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function resolvePreview(type) {
  var fromPreview = (0, _get2.default)(type, 'preview.component');

  if (fromPreview) {
    return fromPreview;
  }

  var custom = _legacyParts.previewResolver && (0, _legacyParts.previewResolver)(type);
  return custom || _SanityDefaultPreview.default;
}

function RenderPreviewSnapshot(props) {
  var _type$to$find;

  var snapshot = props.snapshot,
      type = props.type,
      isLive = props.isLive,
      isLoading = props.isLoading,
      layout = props.layout,
      rest = _objectWithoutProperties(props, _excluded);

  var PreviewComponent = resolvePreview(type); // TODO: Bjoerge: Check for image type with "is()"

  var renderAsBlockImage = layout === 'block' && type && type.name === 'image';
  var typeName = snapshot === null || snapshot === void 0 ? void 0 : snapshot._type;
  var icon = (0, _types.isReferenceSchemaType)(type) && ((_type$to$find = type.to.find(t => t.name === typeName)) === null || _type$to$find === void 0 ? void 0 : _type$to$find.icon) || type.icon;

  var preview = /*#__PURE__*/_react.default.createElement(PreviewComponent, _extends({
    media: icon
  }, rest, {
    value: snapshot,
    icon: icon,
    layout: layout,
    isPlaceholder: isLoading,
    _renderAsBlockImage: renderAsBlockImage
  }));

  return preview;
}