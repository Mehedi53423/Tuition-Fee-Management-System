"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _imageUrl = _interopRequireDefault(require("@sanity/image-url"));

var _icons = require("@sanity/icons");

var _assets = require("../../assets");

var _versionedClient = require("../../client/versionedClient");

var _previews = require("../../components/previews");

var _excluded = ["_upload"],
    _excluded2 = ["icon", "layout", "_renderAsBlockImage", "value"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var previewComponentMap = {
  default: _previews.DefaultPreview,
  card: _previews.DefaultPreview,
  media: _previews.MediaPreview,
  detail: _previews.DetailPreview,
  inline: _previews.InlinePreview,
  block: _previews.BlockPreview
};

function isString(value) {
  return typeof value === 'string';
}

function isRecord(value) {
  return Boolean(value) && !Array.isArray(value) && typeof value === 'object';
}

function extractUploadState(value) {
  if (!value || typeof value !== 'object') {
    return {
      _upload: null,
      value
    };
  }

  var _upload = value._upload,
      rest = _objectWithoutProperties(value, _excluded);

  return {
    _upload: _upload,
    value: rest
  };
}

class SanityDefaultPreview extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "renderMedia", options => {
      var imageBuilder = (0, _imageUrl.default)(_versionedClient.versionedClient); // This functions exists because the previews provides options
      // for the rendering of the media (dimensions)

      var dimensions = options.dimensions;
      var value = this.props.value;
      var media = value.media; // Handle sanity image

      return /*#__PURE__*/_react.default.createElement("img", {
        alt: isString(value.title) ? value.title : undefined,
        src: imageBuilder.image(media).width(dimensions.width || 100).height(dimensions.height || 100).fit(dimensions.fit).dpr(dimensions.dpr || 1).url() || ''
      });
    });

    _defineProperty(this, "renderImageUrl", options => {
      // Legacy support for imageUrl
      var dimensions = options.dimensions;
      var value = this.props.value;
      var imageUrl = value.imageUrl;

      if (isString(imageUrl)) {
        var assetUrl = (0, _assets.assetUrlBuilder)(imageUrl.split('?')[0], dimensions);
        return /*#__PURE__*/_react.default.createElement("img", {
          src: assetUrl,
          alt: isString(value.title) ? value.title : undefined
        });
      }

      return undefined;
    });

    _defineProperty(this, "renderIcon", () => {
      var icon = this.props.icon;
      var Icon = icon || _icons.DocumentIcon;
      return Icon && /*#__PURE__*/_react.default.createElement(Icon, {
        className: "sanity-studio__preview-fallback-icon"
      });
    });

    _defineProperty(this, "resolveMedia", () => {
      var _this$props = this.props,
          value = _this$props.value,
          icon = _this$props.icon;
      var media = value.media;

      if (icon === false) {
        // Explicitly disabled
        return false;
      }

      if (typeof media === 'function' || /*#__PURE__*/_react.default.isValidElement(media)) {
        return media;
      } // If the asset is on media


      if (isRecord(value.media) && value.media._type === 'reference' && value.media._ref) {
        return this.renderMedia;
      } // Legacy support for imageUrl


      if (value.imageUrl) {
        return this.renderImageUrl;
      } // Handle sanity image


      if (isRecord(media) && media.asset) {
        return this.renderMedia;
      } // Render fallback icon


      return this.renderIcon;
    });
  }

  componentDidMount() {
    if (this.props.layout === 'card') {
      console.warn('The `card` layout option in previews is deprecated. Please use `default` instead.');
    }
  }

  render() {
    var _this$props2 = this.props,
        icon = _this$props2.icon,
        layout = _this$props2.layout,
        _renderAsBlockImage = _this$props2._renderAsBlockImage,
        valueProp = _this$props2.value,
        rest = _objectWithoutProperties(_this$props2, _excluded2);

    var PreviewComponent = previewComponentMap.hasOwnProperty(layout) ? previewComponentMap[layout] : previewComponentMap.default;

    if (_renderAsBlockImage) {
      PreviewComponent = _previews.BlockImagePreview;
    }

    var _extractUploadState = extractUploadState(valueProp),
        _upload = _extractUploadState._upload,
        value = _extractUploadState.value;

    var item = _upload ? _objectSpread(_objectSpread({}, value), {}, {
      imageUrl: _upload.previewImage,
      title: value.title || _upload.file && _upload.file.name || 'Uploadingâ€¦'
    }) : value;

    if (!item) {
      return /*#__PURE__*/_react.default.createElement(PreviewComponent, _extends({}, rest, {
        progress: _upload && _upload.progress
      }));
    }

    var media = this.resolveMedia();
    return /*#__PURE__*/_react.default.createElement(PreviewComponent, _extends({}, rest, {
      title: item.title,
      subtitle: item.subtitle,
      description: item.description,
      extendedPreview: item.extendedPreview,
      media: media,
      progress: _upload && _upload.progress
    }));
  }

}

exports.default = SanityDefaultPreview;