"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.observeDocumentPairAvailability = observeDocumentPairAvailability;

var _keyBy2 = _interopRequireDefault(require("lodash/keyBy"));

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

var _chunk2 = _interopRequireDefault(require("lodash/chunk"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _shallowEquals = _interopRequireDefault(require("shallow-equals"));

var _draftUtils = require("../util/draftUtils");

var _versionedClient = require("../client/versionedClient");

var _debounceCollect = require("./utils/debounceCollect");

var _constants = require("./constants");

var _ = require("./");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * Returns an observable of metadata for a given drafts model document
 * @param id document id
 */
function observeDocumentPairAvailability(id) {
  var draftId = (0, _draftUtils.getDraftId)(id);
  var publishedId = (0, _draftUtils.getPublishedId)(id);
  return (0, _rxjs.combineLatest)([observeDocumentAvailability(draftId), observeDocumentAvailability(publishedId)]).pipe((0, _operators.distinctUntilChanged)(_shallowEquals.default), (0, _operators.map)(_ref => {
    var _ref2 = _slicedToArray(_ref, 2),
        draftReadability = _ref2[0],
        publishedReadability = _ref2[1];

    return {
      draft: draftReadability,
      published: publishedReadability
    };
  }));
}
/**
 * Observable of metadata for the document with the given id
 * If we can't read a document it is either because it's not readable or because it doesn't exist
 * @param id
 * @internal
 */


function observeDocumentAvailability(id) {
  // check for existence
  return (0, _.observePaths)(id, [['_rev']]).pipe((0, _operators.map)(res => Boolean(res === null || res === void 0 ? void 0 : res._rev)), (0, _operators.distinctUntilChanged)(), (0, _operators.switchMap)(hasRev => {
    return hasRev ? // short circuit: if we can read the _rev field we know it both exists and is readable
    (0, _rxjs.of)(_constants.AVAILABILITY_READABLE) : // we can't read the _rev field for two possible reasons: 1) the document isn't readable or 2) the document doesn't exist
    fetchDocumentReadability(id);
  }));
}

var fetchDocumentReadability = (0, _debounceCollect.debounceCollect)(function fetchDocumentReadability(args) {
  var uniqueIds = [...new Set((0, _flatten2.default)(args))];
  return (0, _rxjs.from)((0, _chunk2.default)(uniqueIds, 300)).pipe((0, _operators.mergeMap)(fetchDocumentReadabilityChunked, 10), (0, _operators.map)(res => args.map(_ref3 => {
    var _ref4 = _slicedToArray(_ref3, 1),
        id = _ref4[0];

    return res[uniqueIds.indexOf(id)];
  })));
}, 1);

function fetchDocumentReadabilityChunked(ids) {
  return (0, _rxjs.defer)(() => {
    var requestOptions = {
      uri: _versionedClient.versionedClient.getDataUrl('doc', ids.join(',')),
      json: true,
      query: {
        excludeContent: 'true'
      },
      tag: 'preview.documents-availability'
    };
    return _versionedClient.versionedClient.observable.request(requestOptions).pipe((0, _operators.map)(response => {
      var omitted = (0, _keyBy2.default)(response.omitted || [], entry => entry.id);
      return ids.map(id => {
        var omittedEntry = omitted[id];

        if (!omittedEntry) {
          // it's not omitted, so it exists and is readable
          return _constants.AVAILABILITY_READABLE;
        }

        if (omittedEntry.reason === 'existence') {
          return _constants.AVAILABILITY_NOT_FOUND;
        }

        if (omittedEntry.reason === 'permission') {
          // it's not omitted, so it exists and is readable
          return _constants.AVAILABILITY_PERMISSION_DENIED;
        }

        throw new Error("Unexpected reason for omission: \"".concat(omittedEntry.reason, "\""));
      });
    }));
  });
}