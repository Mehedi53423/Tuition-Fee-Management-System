"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FieldWrapper = exports.ChangeBarWrapper = exports.ChangeBarMarker = exports.ChangeBarButton = exports.ChangeBar = void 0;

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var animationSpeed = 250;

var ChangeBarWrapper = _styledComponents.default.div(_ref => {
  var changed = _ref.changed,
      disabled = _ref.disabled,
      isReviewChangeOpen = _ref.isReviewChangeOpen;
  if (disabled) return (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      ", " {\n        display: none;\n      }\n    "])), ChangeBar);
  return (0, _styledComponents.css)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    --change-bar-offset: 2px;\n\n    display: flex;\n    position: relative;\n\n    @media (hover: hover) {\n      &:hover {\n        z-index: 10;\n      }\n    }\n\n    /* hide when field is not changed */\n    ", "\n\n    /* hide hover effect when review changes is open */\n    ", "\n  "])), !changed && (0, _styledComponents.css)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n      ", " {\n        opacity: 0;\n        pointer-events: none;\n      }\n    "])), ChangeBar), isReviewChangeOpen && (0, _styledComponents.css)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n      ", " {\n        opacity: 0;\n      }\n    "])), ChangeBarButton));
});

exports.ChangeBarWrapper = ChangeBarWrapper;

var FieldWrapper = _styledComponents.default.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  flex-grow: 1;\n  min-width: 0;\n"])));

exports.FieldWrapper = FieldWrapper;

var ChangeBar = _styledComponents.default.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  position: relative;\n  opacity: 1;\n  transition: opacity 100ms;\n  z-index: ", ";\n"])), _ref2 => {
  var $zIndex = _ref2.$zIndex;
  return $zIndex;
});

exports.ChangeBar = ChangeBar;

var ChangeBarMarker = _styledComponents.default.div(_ref3 => {
  var theme = _ref3.theme;

  /* these colours aren't freely available on the current theme */
  var notSelectedColor = theme.sanity.color.spot.yellow;
  var screenMedium = theme.sanity.media[0];
  return (0, _styledComponents.css)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n    position: absolute;\n    top: 0;\n    left: var(--change-bar-offset);\n    width: 2px;\n    bottom: 0;\n    background-color: ", ";\n    border-radius: 1px;\n\n    @media (min-width: ", "px) {\n      display: unset;\n    }\n  "])), notSelectedColor, screenMedium);
});

exports.ChangeBarMarker = ChangeBarMarker;

var ChangeBarButton = _styledComponents.default.button(_ref4 => {
  var theme = _ref4.theme,
      $withHoverEffect = _ref4.$withHoverEffect;

  /* these colours aren't freely available on the current theme */
  var notSelectedColor = theme.sanity.color.spot.yellow;
  return (0, _styledComponents.css)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n      appearance: none;\n      border: 0;\n      outline: 0;\n      display: block;\n      padding: 0;\n      background: transparent;\n      opacity: 0;\n      position: absolute;\n      height: 100%;\n      cursor: pointer;\n      pointer-events: all;\n      left: calc(-0.25rem + var(--change-bar-offset));\n      width: 1rem;\n      transition: opacity ", "ms;\n\n      &:focus {\n        border: 0;\n        outline: 0;\n      }\n\n      &:after {\n        content: '';\n        width: 16px;\n        height: calc(100% + 14px);\n        display: block;\n        position: absolute;\n        top: -7px;\n        left: -3px;\n        border-radius: 8px;\n        background: ", ";\n      }\n\n      &:focus {\n        border: 0;\n        outline: 0;\n      }\n\n      ", "\n    "])), animationSpeed, notSelectedColor, $withHoverEffect && (0, _styledComponents.css)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n        @media (hover: hover) {\n          &:hover {\n            opacity: 0.2;\n          }\n        }\n      "]))));
});

exports.ChangeBarButton = ChangeBarButton;