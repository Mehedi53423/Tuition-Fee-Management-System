"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChangeIndicator = void 0;
exports.ChangeIndicatorCompareValueProvider = ChangeIndicatorCompareValueProvider;
exports.ChangeIndicatorForFieldPath = ChangeIndicatorForFieldPath;
exports.ChangeIndicatorProvider = ChangeIndicatorProvider;
exports.ChangeIndicatorScope = ChangeIndicatorScope;
exports.ChangeIndicatorWithProvidedFullPath = ChangeIndicatorWithProvidedFullPath;
exports.ContextProvidedChangeIndicator = ContextProvidedChangeIndicator;
exports.CoreChangeIndicator = CoreChangeIndicator;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _reactFastCompare = _interopRequireDefault(require("react-fast-compare"));

var PathUtils = _interopRequireWildcard(require("@sanity/util/paths"));

var _tracker = require("./tracker");

var _ChangeIndicatorContext = require("./ChangeIndicatorContext");

var _ElementWithChangeBar = require("./ElementWithChangeBar");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var EMPTY_PATH = [];

var isPrimitive = value => typeof value === 'string' || typeof value === 'boolean' || typeof value === 'undefined' || typeof value === 'number';

var canCompareShallow = (valueA, valueB) => {
  if (typeof valueA === 'undefined' || typeof valueB === 'undefined' || valueA === null || valueB === null) {
    return true;
  }

  return isPrimitive(valueA) && isPrimitive(valueB);
};

var ChangeBarWrapper = /*#__PURE__*/(0, _react.memo)(function ChangeBarWrapper(props) {
  var children = props.children,
      className = props.className,
      disabled = props.disabled,
      fullPath = props.fullPath,
      hasFocus = props.hasFocus,
      isChanged = props.isChanged,
      withHoverEffect = props.withHoverEffect;
  var layer = (0, _ui.useLayer)();

  var _React$useState = _react.default.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      hasHover = _React$useState2[0],
      setHover = _React$useState2[1];

  var onMouseEnter = _react.default.useCallback(() => setHover(true), []);

  var onMouseLeave = _react.default.useCallback(() => setHover(false), []);

  var ref = _react.default.useRef(null);

  (0, _tracker.useReporter)(disabled ? null : "field-".concat(PathUtils.toString(fullPath)), () => ({
    element: ref.current,
    path: fullPath,
    isChanged: isChanged,
    hasFocus: hasFocus,
    hasHover: hasHover,
    zIndex: layer.zIndex
  }), // note: deepCompare should be ok here since we're not comparing deep values
  _reactFastCompare.default);
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: ref,
    className: className,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  }, /*#__PURE__*/_react.default.createElement(_ElementWithChangeBar.ElementWithChangeBar, {
    hasFocus: hasFocus,
    isChanged: isChanged,
    disabled: disabled,
    withHoverEffect: withHoverEffect
  }, children));
});

function ChangeIndicatorScope(props) {
  var children = props.children,
      path = props.path;

  var parentContext = _react.default.useContext(_ChangeIndicatorContext.ChangeIndicatorContext);

  var focusPath = parentContext.focusPath;
  var value = PathUtils.get(parentContext.value, path);
  var compareValue = PathUtils.get(parentContext.compareValue, path);
  var node = (0, _react.useMemo)(() => {
    return /*#__PURE__*/_react.default.createElement(ChangeIndicatorProvider, {
      path: path,
      focusPath: focusPath,
      value: value,
      compareValue: compareValue
    }, children);
  }, [children, compareValue, focusPath, path, value]);
  return node;
}

function ChangeIndicatorProvider(props) {
  var compareValue = props.compareValue,
      value = props.value;

  var parentContext = _react.default.useContext(_ChangeIndicatorContext.ChangeIndicatorContext);

  var path = props.path;
  var focusPath = (0, _react.useMemo)(() => props.focusPath || EMPTY_PATH, [props.focusPath]);
  var parentFullPath = parentContext.fullPath;

  var fullPath = _react.default.useMemo(() => PathUtils.pathFor(parentFullPath.concat(path)), [parentFullPath, path]);

  var contextValue = _react.default.useMemo(() => {
    return {
      value,
      compareValue,
      focusPath,
      path,
      fullPath
    };
  }, [fullPath, value, compareValue, focusPath, path]);

  return /*#__PURE__*/_react.default.createElement(_ChangeIndicatorContext.ChangeIndicatorContext.Provider, {
    value: contextValue
  }, props.children);
}

function CoreChangeIndicator(props) {
  var children = props.children,
      className = props.className,
      compareDeep = props.compareDeep,
      compareValue = props.compareValue,
      disabled = props.disabled,
      fullPath = props.fullPath,
      hasFocus = props.hasFocus,
      onHasChanges = props.onHasChanges,
      value = props.value,
      withHoverEffect = props.withHoverEffect; // todo: lazy compare debounced (possibly with intersection observer)

  var isChanged = canCompareShallow(value, compareValue) && value !== compareValue || compareDeep && !(0, _reactFastCompare.default)(value, compareValue);
  (0, _react.useEffect)(() => {
    if (onHasChanges) {
      onHasChanges(isChanged);
    }
  }, [isChanged, onHasChanges]);
  return /*#__PURE__*/_react.default.createElement(ChangeBarWrapper, {
    className: className,
    disabled: disabled,
    fullPath: fullPath,
    hasFocus: hasFocus,
    isChanged: isChanged,
    withHoverEffect: withHoverEffect
  }, children);
}

function ChangeIndicatorForFieldPath(props) {
  var className = props.className,
      disabled = props.disabled,
      path = props.path,
      hasFocus = props.hasFocus,
      isChanged = props.isChanged,
      children = props.children;

  var parentContext = _react.default.useContext(_ChangeIndicatorContext.ChangeIndicatorContext);

  var fullPath = _react.default.useMemo(() => PathUtils.pathFor(parentContext.fullPath.concat(path)), [parentContext.fullPath, path]);

  return /*#__PURE__*/_react.default.createElement(ChangeBarWrapper, {
    disabled: disabled,
    className: className,
    isChanged: isChanged,
    hasFocus: Boolean(hasFocus),
    fullPath: fullPath
  }, children);
}

function ChangeIndicatorWithProvidedFullPath(props) {
  var children = props.children,
      className = props.className,
      compareDeep = props.compareDeep,
      disabled = props.disabled,
      hasFocus = props.hasFocus,
      onHasChanges = props.onHasChanges,
      path = props.path,
      value = props.value,
      withHoverEffect = props.withHoverEffect;

  var parentContext = _react.default.useContext(_ChangeIndicatorContext.ChangeIndicatorContext);

  var fullPath = _react.default.useMemo(() => PathUtils.pathFor(parentContext.fullPath.concat(path)), [parentContext.fullPath, path]);

  var handleOnHasChanges = (0, _react.useCallback)(changed => {
    if (onHasChanges) {
      onHasChanges(changed);
    }
  }, [onHasChanges]);
  return /*#__PURE__*/_react.default.createElement(CoreChangeIndicator, {
    className: className,
    compareDeep: compareDeep,
    compareValue: PathUtils.get(parentContext.compareValue, path),
    disabled: disabled,
    fullPath: fullPath,
    hasFocus: hasFocus,
    onHasChanges: handleOnHasChanges,
    value: value,
    withHoverEffect: withHoverEffect
  }, children);
}

function ChangeIndicatorCompareValueProvider(props) {
  var children = props.children,
      compareValue = props.compareValue,
      value = props.value;
  var parentContext = (0, _react.useContext)(_ChangeIndicatorContext.ChangeIndicatorContext);
  var contextValue = (0, _react.useMemo)(() => {
    return {
      value,
      compareValue,
      focusPath: parentContext.focusPath || EMPTY_PATH,
      path: parentContext.path,
      fullPath: parentContext.fullPath
    };
  }, [parentContext.focusPath, parentContext.path, parentContext.fullPath, value, compareValue]);
  return /*#__PURE__*/_react.default.createElement(_ChangeIndicatorContext.ChangeIndicatorContext.Provider, {
    value: contextValue
  }, children);
}

function ContextProvidedChangeIndicator(props) {
  var children = props.children,
      className = props.className,
      compareDeep = props.compareDeep,
      disabled = props.disabled;

  var context = _react.default.useContext(_ChangeIndicatorContext.ChangeIndicatorContext);

  var value = context.value,
      compareValue = context.compareValue,
      path = context.path,
      focusPath = context.focusPath,
      fullPath = context.fullPath;
  return /*#__PURE__*/_react.default.createElement(CoreChangeIndicator, {
    disabled: disabled,
    fullPath: fullPath,
    value: value,
    compareValue: compareValue,
    hasFocus: PathUtils.hasFocus(focusPath, path),
    compareDeep: compareDeep || false,
    className: className
  }, children);
}

var ChangeIndicator = ContextProvidedChangeIndicator;
exports.ChangeIndicator = ChangeIndicator;