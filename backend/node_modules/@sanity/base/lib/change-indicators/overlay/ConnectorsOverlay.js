"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConnectorsOverlay = ConnectorsOverlay;

var _sortBy2 = _interopRequireDefault(require("lodash/sortBy"));

var _react = _interopRequireWildcard(require("react"));

var _scroll = require("../../components/scroll");

var _ = require("../");

var _findMostSpecificTarget = require("../helpers/findMostSpecificTarget");

var _isChangeBar = require("../helpers/isChangeBar");

var _scrollIntoView = require("../helpers/scrollIntoView");

var _constants = require("../constants");

var _getOffsetsTo = require("../helpers/getOffsetsTo");

var _Connector = require("./Connector");

var _DebugLayers = require("./DebugLayers");

var _useResizeObserver = require("./useResizeObserver");

var _ConnectorsOverlay = require("./ConnectorsOverlay.styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function getState(allReportedValues, hovered, byId, rootElement) {
  var changeBarsWithHover = [];
  var changeBarsWithFocus = [];

  var _iterator = _createForOfIteratorHelper(allReportedValues),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var value = _step.value;

      if (!(0, _isChangeBar.isChangeBar)(value) || !value[1].isChanged) {
        continue;
      }

      var _value = _slicedToArray(value, 2),
          _id = _value[0],
          reportedChangeBar = _value[1];

      if (_id === hovered) {
        changeBarsWithHover.push(value);
        continue;
      }

      if (reportedChangeBar.hasHover) {
        changeBarsWithHover.push(value);
        continue;
      }

      if (reportedChangeBar.hasFocus) {
        changeBarsWithFocus.push(value);
        continue;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var isHoverConnector = changeBarsWithHover.length > 0;
  var changeBars = isHoverConnector ? changeBarsWithHover : changeBarsWithFocus;
  var connectors = changeBars.map(_ref => {
    var _ref2 = _slicedToArray(_ref, 1),
        id = _ref2[0];

    return {
      field: _objectSpread({
        id
      }, (0, _findMostSpecificTarget.findMostSpecificTarget)('field', id, byId)),
      change: _objectSpread({
        id
      }, (0, _findMostSpecificTarget.findMostSpecificTarget)('change', id, byId))
    };
  }).filter(_ref3 => {
    var field = _ref3.field,
        change = _ref3.change;
    return field && change && field.element && change.element;
  }).map(_ref4 => {
    var field = _ref4.field,
        change = _ref4.change;
    return {
      hasHover: field.hasHover || change.hasHover,
      hasFocus: field.hasFocus,
      hasRevertHover: change.hasRevertHover,
      field: _objectSpread(_objectSpread({}, field), (0, _getOffsetsTo.getOffsetsTo)(field.element, rootElement)),
      change: _objectSpread(_objectSpread({}, change), (0, _getOffsetsTo.getOffsetsTo)(change.element, rootElement))
    };
  });
  return {
    connectors,
    isHoverConnector
  };
}

function ConnectorsOverlay(props) {
  var rootElement = props.rootElement,
      onSetFocus = props.onSetFocus;

  var _React$useState = _react.default.useState(null),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      hovered = _React$useState2[0],
      setHovered = _React$useState2[1];

  var allReportedValues = (0, _.useReportedValues)();
  var byId = (0, _react.useMemo)(() => new Map(allReportedValues), [allReportedValues]);

  var _useState = (0, _react.useState)(() => getState(allReportedValues, hovered, byId, rootElement)),
      _useState2 = _slicedToArray(_useState, 2),
      connectors = _useState2[0].connectors,
      setState = _useState2[1];

  var visibleConnectors = (0, _react.useMemo)(() => (0, _sortBy2.default)(connectors, c => -c.field.path.length).slice(0, 1), [connectors]);
  var handleScrollOrResize = (0, _react.useCallback)(() => {
    setState(getState(allReportedValues, hovered, byId, rootElement));
  }, [byId, allReportedValues, hovered, rootElement]);
  (0, _useResizeObserver.useResizeObserver)(rootElement, handleScrollOrResize);
  return /*#__PURE__*/_react.default.createElement(_scroll.ScrollMonitor, {
    onScroll: handleScrollOrResize
  }, /*#__PURE__*/_react.default.createElement(_ConnectorsOverlay.SvgWrapper, {
    style: {
      zIndex: visibleConnectors[0] && visibleConnectors[0].field.zIndex
    }
  }, visibleConnectors.map(_ref5 => {
    var field = _ref5.field,
        change = _ref5.change;

    if (!change) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement(ConnectorGroup, {
      field: field,
      change: change,
      key: field.id,
      onSetFocus: onSetFocus,
      setHovered: setHovered
    });
  })));
}

function ConnectorGroup(props) {
  var change = props.change,
      field = props.field,
      onSetFocus = props.onSetFocus,
      setHovered = props.setHovered;
  var onConnectorClick = (0, _react.useCallback)(() => {
    (0, _scrollIntoView.scrollIntoView)(field);
    (0, _scrollIntoView.scrollIntoView)(change);
    onSetFocus(field.path);
  }, [field, change, onSetFocus]);
  var handleMouseEnter = (0, _react.useCallback)(() => setHovered(field.id), [field, setHovered]);
  var handleMouseLeave = (0, _react.useCallback)(() => setHovered(null), [setHovered]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("g", {
    onClick: onConnectorClick,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }, /*#__PURE__*/_react.default.createElement(_Connector.Connector, {
    from: {
      rect: {
        left: field.rect.left + 2,
        top: field.rect.top,
        height: field.rect.height,
        width: field.rect.width
      },
      bounds: field.bounds
    },
    to: {
      rect: change.rect,
      bounds: change.bounds
    }
  })), _constants.DEBUG_LAYER_BOUNDS && /*#__PURE__*/_react.default.createElement(_DebugLayers.DebugLayers, {
    field: field,
    change: change
  }));
}