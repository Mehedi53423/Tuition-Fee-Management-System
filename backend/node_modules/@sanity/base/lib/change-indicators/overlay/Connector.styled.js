"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RightBarWrapper = exports.InteractivePath = exports.DebugRect = exports.ConnectorPath = void 0;

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _ClampedRect = require("./ClampedRect");

var _templateObject, _templateObject2, _templateObject3, _templateObject4;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var DebugRect = _styledComponents.default.rect(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  stroke: #ccc;\n  fill: none;\n  pointer-events: none;\n  stroke-linecap: round;\n"])));

exports.DebugRect = DebugRect;

var ConnectorPath = _styledComponents.default.path(_ref => {
  var theme = _ref.theme;

  /* these colours aren't freely available on the current theme */
  var strokeColor = theme.sanity.color.spot.yellow;
  return (0, _styledComponents.css)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    fill: none;\n    pointer-events: none;\n    stroke-linecap: round;\n    stroke-linejoin: round;\n    stroke: ", ";\n  "])), strokeColor);
});

exports.ConnectorPath = ConnectorPath;

var InteractivePath = _styledComponents.default.path(_ref2 => {
  var theme = _ref2.theme;

  /* these colours aren't freely available on the current theme */
  var strokeColor = theme.sanity.color.spot.yellow;
  return (0, _styledComponents.css)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    fill: none;\n    pointer-events: stroke;\n    stroke: ", ";\n    cursor: pointer;\n    stroke-linecap: round;\n    stroke-linejoin: round;\n    opacity: 0;\n\n    &:hover {\n      opacity: 0.2;\n    }\n  "])), strokeColor);
});

exports.InteractivePath = InteractivePath;
var RightBarWrapper = (0, _styledComponents.default)(_ClampedRect.ClampedRect)(_ref3 => {
  var theme = _ref3.theme;

  /* these colours aren't freely available on the current theme */
  var strokeColor = theme.sanity.color.spot.yellow;
  return (0, _styledComponents.css)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n    stroke: none;\n    pointer-events: none;\n    fill: ", ";\n  "])), strokeColor);
});
exports.RightBarWrapper = RightBarWrapper;