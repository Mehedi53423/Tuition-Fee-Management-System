"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unstable_getTemplatePermissions = getTemplatePermissions;
exports.unstable_useTemplatePermissions = void 0;

var _initialValueTemplates = require("@sanity/initial-value-templates");

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _createHookFromObservableFactory = require("../../util/createHookFromObservableFactory");

var _draftUtils = require("../../util/draftUtils");

var _documentValuePermissions = require("./documentValuePermissions");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function serialize(item) {
  if (item && 'serialize' in item) return serialize(item.serialize());
  return item;
}
/**
 * The observable version of `useTemplatePermissions`
 */


function getTemplatePermissions(initialValueTemplateItems) {
  // this has to be deferred/lazy-loaded due to some weird dependency orderings
  var schemaMod = require('part:@sanity/base/schema');

  var schema = schemaMod.default || schemaMod;
  if (!(initialValueTemplateItems !== null && initialValueTemplateItems !== void 0 && initialValueTemplateItems.length)) return (0, _rxjs.of)([]);
  return (0, _rxjs.combineLatest)(initialValueTemplateItems.map(serialize).map( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* (item) {
      var template = (0, _initialValueTemplates.getTemplateById)(item.templateId);
      var resolvedInitialValue = yield (0, _initialValueTemplates.resolveInitialValue)(schema, template, item.parameters);
      return {
        template,
        item,
        resolvedInitialValue
      };
    });

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }()).map(promise => (0, _rxjs.from)(promise).pipe((0, _operators.switchMap)(_ref2 => {
    var item = _ref2.item,
        resolvedInitialValue = _ref2.resolvedInitialValue,
        template = _ref2.template;
    var schemaType = schema.get(template.schemaType);
    var liveEdit = schemaType === null || schemaType === void 0 ? void 0 : schemaType.liveEdit;
    var _item$initialDocument = item.initialDocumentId,
        initialDocumentId = _item$initialDocument === void 0 ? 'dummy-id' : _item$initialDocument;
    return (0, _documentValuePermissions.unstable_getDocumentValuePermissions)({
      permission: 'create',
      document: _objectSpread({
        _id: liveEdit ? (0, _draftUtils.getPublishedId)(initialDocumentId) : (0, _draftUtils.getDraftId)(initialDocumentId)
      }, resolvedInitialValue)
    }).pipe((0, _operators.map)(_ref3 => {
      var granted = _ref3.granted,
          reason = _ref3.reason;
      var title = item.title || template.title;

      var result = _objectSpread(_objectSpread({}, item), {}, {
        granted,
        reason,
        resolvedInitialValue,
        template,
        title,
        subtitle: schemaType.title === title ? undefined : schemaType.title,
        description: item.description || template.description,
        icon: item.icon || template.icon
      });

      return result;
    }));
  }))));
}
/**
 * Takes in an array of initial template values and returns an object of
 * `TemplatePermissionsResult` keyed by the IDs of the initial template values
 * given.
 *
 * The `TemplatePermissionsResult` is an object that contains a `granted`
 * boolean per key and can be used to determine if a user has the ability to
 * create documents using the given initial value template items.
 *
 * For each initial template value item, the corresponding template is found and
 * resolved against the parameters in each the initial template value item. The
 * resolved value is then run through the document-value permissions. If there
 * are any matching grants for the resolved initial template value, the
 * `TemplatePermissionsResult` will include `granted: true`.
 */


var useTemplatePermissions = (0, _createHookFromObservableFactory.createHookFromObservableFactory)(getTemplatePermissions);
exports.unstable_useTemplatePermissions = useTemplatePermissions;