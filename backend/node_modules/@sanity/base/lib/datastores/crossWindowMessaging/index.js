"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.otherWindowMessages$ = exports.crossWindowBroadcast = void 0;

var _configSanity = _interopRequireDefault(require("config:sanity"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Support various studios with different projectIds to have their own exclusive message stream
var getLSKey = () => {
  return "__studio_local_storage_messaging_".concat(_configSanity.default.api.projectId);
};

var isNonNullable = value => value !== null && value !== undefined;

var storageEvents$ = typeof window === 'undefined' ? (0, _rxjs.of)() // No storage events in non-browser environments
: (0, _rxjs.fromEvent)(window, 'storage');
var otherWindowMessages$ = storageEvents$.pipe((0, _operators.filter)(event => event.key === getLSKey()), (0, _operators.map)(event => event.newValue), (0, _operators.filter)(isNonNullable), (0, _operators.map)(newValue => JSON.parse(newValue)));
exports.otherWindowMessages$ = otherWindowMessages$;

var crossWindowBroadcast = message => {
  if (typeof window === 'undefined') {
    return;
  }

  try {
    window.localStorage.setItem(getLSKey(), JSON.stringify(message)); // clear the value afterwards so that next message will still emit a
    // new event even if it's identical to the previous one

    window.localStorage.removeItem(getLSKey());
  } catch (err) {// intentional noop
  }
};

exports.crossWindowBroadcast = crossWindowBroadcast;