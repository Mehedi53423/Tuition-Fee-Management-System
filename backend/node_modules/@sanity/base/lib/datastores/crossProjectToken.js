"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchAllCrossProjectTokens = fetchAllCrossProjectTokens;
exports.fetchCrossProjectToken = fetchCrossProjectToken;
exports.getProjectIdFromTokenDocumentId = getProjectIdFromTokenDocumentId;
exports.getTokenDocumentId = getTokenDocumentId;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _versionedClient = require("../client/versionedClient");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var TOKEN_DOCUMENT_ID_BASE = "secrets.sanity.sharedContent";

function isNonNullable(value) {
  return value !== null;
}

function fetchTokenDocument(client, id) {
  return client.observable.fetch("*[_id == $id]{_id, _type, _updatedAt, token}[0]", {
    id
  });
}

function getTokenDocumentId(_ref) {
  var tokenId = _ref.tokenId,
      projectId = _ref.projectId;
  return [TOKEN_DOCUMENT_ID_BASE, projectId, tokenId].filter(Boolean).join('.');
}

function getProjectIdFromTokenDocumentId(id) {
  if (!id.startsWith(TOKEN_DOCUMENT_ID_BASE)) {
    return null;
  } //prettier-ignore


  var _id$split = id.split('.'),
      _id$split2 = _slicedToArray(_id$split, 4),
      projectId = _id$split2[3];

  return projectId;
}

function fetchCrossProjectToken(client, _ref2) {
  var projectId = _ref2.projectId,
      tokenId = _ref2.tokenId;

  if (client.config().projectId === projectId) {
    return (0, _rxjs.of)(undefined);
  }

  return fetchTokenDocument(client, getTokenDocumentId({
    projectId,
    tokenId
  })).pipe((0, _operators.map)(tokenDoc => tokenDoc.token));
}

function fetchAllCrossProjectTokens() {
  return _versionedClient.versionedClient.observable.fetch("*[_id in path(\"".concat(TOKEN_DOCUMENT_ID_BASE, ".**\")]{_id, _type, _updatedAt, token}")).pipe((0, _operators.mergeMap)(tokenDocs => (0, _rxjs.from)(tokenDocs)), (0, _operators.map)(doc => {
    var projectId = getProjectIdFromTokenDocumentId(doc._id);
    return projectId ? {
      projectId,
      token: doc.token
    } : null;
  }), (0, _operators.filter)(isNonNullable), (0, _operators.toArray)());
}