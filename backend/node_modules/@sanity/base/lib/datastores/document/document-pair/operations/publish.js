"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.publish = void 0;

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _types = require("@sanity/types");

var _versionedClient = require("../../../../client/versionedClient");

var _isLiveEditEnabled = require("../utils/isLiveEditEnabled");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function strengthenOnPublish(obj) {
  if ((0, _types.isReference)(obj)) {
    if (obj._strengthenOnPublish) {
      return (0, _omit2.default)(obj, ['_strengthenOnPublish'].concat(obj._strengthenOnPublish.weak ? [] : ['_weak']));
    }

    return obj;
  }

  if (typeof obj !== 'object' || !obj) return obj;
  if (Array.isArray(obj)) return obj.map(strengthenOnPublish);
  return Object.fromEntries(Object.entries(obj).map(_ref => {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];

    return [key, strengthenOnPublish(value)];
  }));
}

var publish = {
  disabled: _ref3 => {
    var typeName = _ref3.typeName,
        snapshots = _ref3.snapshots;

    if ((0, _isLiveEditEnabled.isLiveEditEnabled)(typeName)) {
      return 'LIVE_EDIT_ENABLED';
    }

    if (!snapshots.draft) {
      return snapshots.published ? 'ALREADY_PUBLISHED' : 'NO_CHANGES';
    }

    return false;
  },
  execute: _ref4 => {
    var idPair = _ref4.idPair,
        snapshots = _ref4.snapshots;

    var tx = _versionedClient.versionedClient.transaction();

    var value = strengthenOnPublish((0, _omit2.default)(snapshots.draft, '_updatedAt'));

    if (snapshots.published) {
      // If it exists already, we only want to update it if the revision on the remote server
      // matches what our local state thinks it's at
      tx.patch(idPair.publishedId, {
        // Hack until other mutations support revision locking
        unset: ['_revision_lock_pseudo_field_'],
        ifRevisionID: snapshots.published._rev
      });
      tx.createOrReplace(_objectSpread(_objectSpread({}, value), {}, {
        _id: idPair.publishedId,
        _type: snapshots.draft._type
      }));
    } else {
      // If the document has not been published, we want to create it - if it suddenly exists
      // before being created, we don't want to overwrite if, instead we want to yield an error
      tx.create(_objectSpread(_objectSpread({}, value), {}, {
        _id: idPair.publishedId,
        _type: snapshots.draft._type
      }));
    }

    tx.delete(idPair.draftId);
    return tx.commit({
      tag: 'document.publish'
    });
  }
};
exports.publish = publish;