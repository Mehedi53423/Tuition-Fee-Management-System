"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validation = void 0;

var _operators = require("rxjs/operators");

var _rxjs = require("rxjs");

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _validation = require("@sanity/validation");

var _types = require("@sanity/types");

var _jsonReduce = _interopRequireDefault(require("json-reduce"));

var _createMemoizer = require("../utils/createMemoizer");

var _availability = require("../../../preview/availability");

var _editState = require("./editState");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var INITIAL_VALIDATION_STATUS = {
  isValidating: true,
  markers: []
};

function findReferenceIds(obj) {
  return (0, _jsonReduce.default)(obj, (acc, node) => {
    if ((0, _types.isReference)(node)) {
      acc.add(node._ref);
    }

    return acc;
  }, new Set());
}

var listenDocumentExists = id => (0, _availability.observeDocumentPairAvailability)(id).pipe((0, _operators.map)(_ref => {
  var published = _ref.published;
  return published.available;
}));

var getDocumentExists = _ref2 => {
  var id = _ref2.id;
  return listenDocumentExists(id).pipe((0, _operators.first)()).toPromise();
};

var validation = (0, _createMemoizer.memoize)((_ref3, typeName) => {
  var draftId = _ref3.draftId,
      publishedId = _ref3.publishedId;
  var document$ = (0, _editState.editState)({
    draftId,
    publishedId
  }, typeName).pipe((0, _operators.map)(_ref4 => {
    var draft = _ref4.draft,
        published = _ref4.published;
    return draft || published;
  }), // this debounce is needed for performance. it prevents the validation
  // from being run on every keypress
  (0, _operators.debounceTime)(300), (0, _operators.share)());
  var referenceIds$ = document$.pipe((0, _operators.map)(document => findReferenceIds(document)), (0, _operators.distinctUntilChanged)((curr, next) => {
    if (curr.size !== next.size) return false;

    var _iterator = _createForOfIteratorHelper(curr),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var item = _step.value;
        if (!next.has(item)) return false;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return true;
  }));
  var referencedDocumentUpdate$ = referenceIds$.pipe((0, _operators.switchMap)(idSet => (0, _rxjs.from)(idSet).pipe((0, _operators.mergeMap)(id => listenDocumentExists(id).pipe((0, _operators.map)( // eslint-disable-next-line max-nested-callbacks
  result => [id, result]))), // the `debounceTime` in the next stream removes multiple emissions
  // caused by this scan
  (0, _operators.scan)((acc, _ref5) => {
    var _ref6 = _slicedToArray(_ref5, 2),
        id = _ref6[0],
        result = _ref6[1];

    return _objectSpread(_objectSpread({}, acc), {}, {
      [id]: result
    });
  }, {}))), (0, _operators.distinctUntilChanged)((curr, next) => {
    var currKeys = Object.keys(curr);
    var nextKeys = Object.keys(next);
    if (currKeys.length !== nextKeys.length) return false;

    for (var _i2 = 0, _currKeys = currKeys; _i2 < _currKeys.length; _i2++) {
      var key = _currKeys[_i2];
      if (curr[key] !== next[key]) return false;
    }

    return true;
  }));
  return (0, _rxjs.combineLatest)([// from document edits
  document$, // and from document dependency events
  (0, _rxjs.concat)( // note: that the `referencedDocumentUpdate$` may not pre-emit any
  // events (unlike `editState` which includes `publishReplay(1)`), so
  // we `concat` the stream with an empty emission so `combineLatest` will
  // emit as soon as `editState` emits
  //
  // > Be aware that `combineLatest` will not emit an initial value until
  // > each observable emits at least one value.
  // https://www.learnrxjs.io/learn-rxjs/operators/combination/combinelatest#why-use-combinelatest
  (0, _rxjs.of)(null), referencedDocumentUpdate$).pipe( // don't remove, see `debounceTime` comment above
  (0, _operators.debounceTime)(50))]).pipe((0, _operators.map)(_ref7 => {
    var _ref8 = _slicedToArray(_ref7, 1),
        document = _ref8[0];

    return document;
  }), (0, _operators.switchMap)(document => (0, _rxjs.concat)((0, _rxjs.of)({
    isValidating: true
  }), (0, _rxjs.defer)( /*#__PURE__*/_asyncToGenerator(function* () {
    if (!(document !== null && document !== void 0 && document._type)) {
      return {
        markers: [],
        isValidating: false
      };
    } // TODO: consider cancellation eventually


    var markers = yield (0, _validation.validateDocument)(document, _schema.default, {
      getDocumentExists
    });
    return {
      markers,
      isValidating: false
    };
  })))), (0, _operators.scan)((acc, next) => _objectSpread(_objectSpread({}, acc), next), INITIAL_VALIDATION_STATUS), (0, _operators.publishReplay)(1), (0, _operators.refCount)());
}, idPair => idPair.publishedId);
exports.validation = validation;