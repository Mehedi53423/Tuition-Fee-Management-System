"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDocumentType = useDocumentType;

var _react = require("react");

var _draftUtils = require("../../../util/draftUtils");

var _documentStore = _interopRequireDefault(require("../document-store"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var LOADING_STATE = {
  isLoaded: false,
  documentType: undefined
};

function useDocumentType(documentId) {
  var specifiedType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '*';
  var publishedId = (0, _draftUtils.getPublishedId)(documentId);
  var isResolved = Boolean(specifiedType && specifiedType !== '*'); // Memoize what a synchronously resolved state looks like (eg specified type is present),
  // in order to return the same object each time. Note that this can be "incorrect", but
  // that we won't be returning it in that case, eg: `{documentType: '*', isResolved: true}

  var SYNC_RESOLVED_STATE = (0, _react.useMemo)(() => ({
    documentType: specifiedType,
    isLoaded: true
  }), [specifiedType]); // Set up our state that we'll only use when we need to reach out to the API to find
  // the document type for a given document. Otherwise we'll be using SYNC_RESOLVED_STATE.
  // For consistency (between different document ids/types), we're setting the sync resolved
  // state here as well, but it isn't strictly necessary for correct rendering.

  var _useState = (0, _react.useState)(isResolved ? SYNC_RESOLVED_STATE : LOADING_STATE),
      _useState2 = _slicedToArray(_useState, 2),
      resolvedState = _useState2[0],
      setDocumentType = _useState2[1]; // Reset documentType when documentId changes. Note that we're using the referentially
  // stable LOADING_STATE in order to prevent double rendering on initial load.


  (0, _react.useEffect)(() => setDocumentType(LOADING_STATE), [publishedId, specifiedType]); // Load the documentType from Content Lake, unless we're already in a resolved state

  (0, _react.useEffect)(() => {
    if (isResolved) {
      return undefined;
    }

    var sub = _documentStore.default.resolveTypeForDocument(publishedId, specifiedType).subscribe(documentType => setDocumentType({
      documentType,
      isLoaded: true
    }));

    return () => sub.unsubscribe();
  }, [publishedId, specifiedType, isResolved]);
  return isResolved ? // `isResolved` is only true when we're _synchronously_ resolved
  SYNC_RESOLVED_STATE : // Using the document type resolved from the API
  resolvedState;
}