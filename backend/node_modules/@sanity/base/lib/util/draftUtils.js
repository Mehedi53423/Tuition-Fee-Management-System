"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DRAFTS_FOLDER = void 0;
exports.collate = collate;
exports.createDraftFrom = createDraftFrom;
exports.createPublishedFrom = createPublishedFrom;
exports.getDraftId = getDraftId;
exports.getIdPair = getIdPair;
exports.getPublishedId = getPublishedId;
exports.isDraft = isDraft;
exports.isDraftId = isDraftId;
exports.isPublishedId = isPublishedId;
exports.newDraftFrom = newDraftFrom;
exports.removeDupes = removeDupes;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// nominal/opaque type hack
var DRAFTS_FOLDER = 'drafts';
exports.DRAFTS_FOLDER = DRAFTS_FOLDER;
var DRAFTS_PREFIX = "".concat(DRAFTS_FOLDER, ".");

function isDraft(document) {
  return isDraftId(document._id);
}

function isDraftId(id) {
  return id.startsWith(DRAFTS_PREFIX);
}

function getIdPair(id) {
  return {
    draftId: getDraftId(id),
    publishedId: getPublishedId(id)
  };
}

function isPublishedId(id) {
  return !isDraftId(id);
}

function getDraftId(id) {
  return isDraftId(id) ? id : DRAFTS_PREFIX + id;
}

function getPublishedId(id) {
  return isDraftId(id) ? id.slice(DRAFTS_PREFIX.length) : id;
}

function createDraftFrom(document) {
  return _objectSpread({
    _id: getDraftId(document._id)
  }, document);
}

function newDraftFrom(document) {
  return _objectSpread({
    _id: DRAFTS_PREFIX
  }, document);
}

function createPublishedFrom(document) {
  return _objectSpread({
    _id: getPublishedId(document._id)
  }, document);
}
/**
 * Takes a list of documents and collates draft/published pairs into single entries
 * {id: <published id>, draft?: <draft document>, published?: <published document>}
 * Note: because Map is ordered by insertion key the resulting array will be ordered by whichever
 * version appeared first
 */


function collate(documents) {
  var byId = documents.reduce((res, doc) => {
    var publishedId = getPublishedId(doc._id);
    var entry = res.get(publishedId);

    if (!entry) {
      entry = {
        id: publishedId,
        type: doc._type,
        published: undefined,
        draft: undefined
      };
      res.set(publishedId, entry);
    }

    entry[publishedId === doc._id ? 'published' : 'draft'] = doc;
    return res;
  }, new Map());
  return Array.from(byId.values());
} // Removes published documents that also has a draft


function removeDupes(documents) {
  return collate(documents).map(entry => entry.draft || entry.published);
}