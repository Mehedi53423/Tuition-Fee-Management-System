"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createHookFromObservableFactory = createHookFromObservableFactory;

var _reactRx = require("react-rx");

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _shallowEquals = _interopRequireDefault(require("shallow-equals"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function defaultArgsAreEqual(prev, next) {
  if (prev.length !== next.length) return false;

  for (var i = 0; i < next.length; i++) {
    if (!(0, _shallowEquals.default)(prev[i], next[i])) return false;
  }

  return true;
} // overloads to handle types where an initial value is passed


/**
 * A function that will create a hook from a function that returns an
 * observable. The parameters of the hook will be the parameters of the function
 * and the return of the hook will be a loading tuple with the value of the
 * observable at the first index and a boolean with the loading state as the
 * second index.
 *
 * The loading state will become true as soon as new incoming args are given and
 * will flip to false when the observable from the function emits the next
 * value.
 */
function createHookFromObservableFactory(observableFactory, options) {
  var _ref = options || {},
      initialValue = _ref.initialValue,
      _ref$argsAreEqual = _ref.argsAreEqual,
      argsAreEqual = _ref$argsAreEqual === void 0 ? defaultArgsAreEqual : _ref$argsAreEqual;

  var initialLoadingTuple = [initialValue, true];

  var asLoadingTuple = args$ => args$.pipe((0, _operators.distinctUntilChanged)(argsAreEqual), (0, _operators.switchMap)(distinctArgs => (0, _rxjs.concat)((0, _rxjs.of)({
    type: 'loading'
  }), observableFactory(...distinctArgs).pipe((0, _operators.map)(value => ({
    type: 'value',
    value
  }))))), (0, _operators.scan)((_ref2, next) => {
    var _ref3 = _slicedToArray(_ref2, 1),
        prevValue = _ref3[0];

    if (next.type === 'loading') return [prevValue, true];
    return [next.value, false];
  }, initialLoadingTuple), (0, _operators.distinctUntilChanged)((_ref4, _ref5) => {
    var _ref6 = _slicedToArray(_ref4, 2),
        prevValue = _ref6[0],
        prevIsLoading = _ref6[1];

    var _ref7 = _slicedToArray(_ref5, 2),
        nextValue = _ref7[0],
        nextIsLoading = _ref7[1];

    if (prevValue !== nextValue) return false;
    if (prevIsLoading !== nextIsLoading) return false;
    return true;
  }), (0, _operators.map)(tuple => ({
    type: 'tuple',
    tuple
  })), (0, _operators.catchError)(error => (0, _rxjs.of)({
    type: 'error',
    error
  })));

  return function useLoadableFromCreateLoadable() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var tuple$ = (0, _reactRx.useAsObservable)(args, asLoadingTuple);
    var result = (0, _reactRx.useObservable)(tuple$, {
      type: 'tuple',
      tuple: initialLoadingTuple
    });
    if (result.type === 'error') throw result.error;
    return result.tuple;
  };
}