"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNewDocumentOptions = void 0;

var _isObject2 = _interopRequireDefault(require("lodash/isObject"));

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _documentActionUtils = require("part:@sanity/base/util/document-action-utils");

var _initialValueTemplates = require("@sanity/initial-value-templates");

var _icons = require("@sanity/icons");

var _structureBuilder = _interopRequireDefault(require("../_exports/structure-builder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var isRecord = _isObject2.default;

var isInitialValueTemplateItem = obj => obj.type === 'initialValueTemplateItem';

var serialize = t => typeof t.serialize === 'function' ? serialize(t.serialize()) : t;

var quote = str => str && str.length > 0 ? " \"".concat(str, "\"") : str || '';

var getDefaultModule = mod => isRecord(mod) && '__esModule' in mod ? mod.default : mod;

function computeOnce(fn) {
  var cached;
  return () => {
    if (cached) return cached;
    cached = fn();
    return cached;
  };
}

/**
 * Returns the result of parsing the `new-document-structure` against the
 * registered initial value templates.
 *
 * This API should be used whenever a new document needs to be created outside
 * the context of the desk tool structure (e.g. references, in the
 * default-layout navbar)
 *
 * Each option returned will correspond to one new-document structure item
 * inside of the array the `new-document-structure` exports (or the default
 * value array from the structure builder)
 */
var getNewDocumentOptionsOnce = computeOnce(getNewDocumentOptions);
exports.getNewDocumentOptions = getNewDocumentOptionsOnce;

function getNewDocumentOptions() {
  // this has to be deferred/lazy-loaded due to some weird dependency orderings
  var newDocumentStructure = getDefaultModule(require('part:@sanity/base/new-document-structure?'));

  try {
    return createNewDocumentOptions(serializeNewDocumentStructure(newDocumentStructure || _structureBuilder.default.defaultInitialValueTemplateItems()));
  } catch (err) {
    console.error("Invalid \"new document\" configuration: ".concat(err === null || err === void 0 ? void 0 : err.message, ". Falling back to default structure."));
    return createNewDocumentOptions(serializeNewDocumentStructure(_structureBuilder.default.defaultInitialValueTemplateItems()));
  }
}

function serializeNewDocumentStructure(structureItems) {
  if (!Array.isArray(structureItems)) {
    throw new Error('Invalid "new document" configuration: "part:@sanity/base/new-document-structure" should return an array of items.');
  }

  var items = structureItems.map((item, index) => {
    if (!isRecord(item)) {
      throw new Error("Expected template item at index ".concat(index, " to be an object but got ").concat(item === null ? 'null' : typeof item));
    }

    var serialized = serialize(item);

    if (!isInitialValueTemplateItem(serialized)) {
      throw new Error("Only initial value template items are currently allowed in the new document structure. Item at index ".concat(index, " is invalid"));
    }

    return serialized;
  });
  var idMap = new Map();
  items.forEach((item, i) => {
    var dupeIndex = idMap.get(item.id);

    if (typeof dupeIndex === 'number') {
      throw new Error("Template item".concat(quote(item.title), " at index ").concat(i, " has the same ID (\"").concat(item.id, "\") as template").concat(quote(items[dupeIndex].title), " at index ").concat(dupeIndex));
    }

    idMap.set(item.id, i);
  });
  return items;
}

function createNewDocumentOptions(structure) {
  return structure.map(item => {
    // Make sure the template actually exists
    var template = (0, _initialValueTemplates.getTemplateById)(item.templateId);

    if (!template) {
      throw new Error("Template \"".concat(item.templateId, "\" not declared"));
    } // Build up an item suited for the "action modal" dialog


    var schemaType = _schema.default.get(template.schemaType);

    if (!schemaType) {
      throw new Error("Schema type \"".concat(template.schemaType, "\" not declared"));
    }

    var title = item.title || template.title;

    var newDocumentOption = _objectSpread(_objectSpread({}, item), {}, {
      title,
      description: item.description || template.description,
      // Don't show the type name as subtitle if it's the same as the template name
      subtitle: schemaType.title === title ? undefined : schemaType.title,
      // Prioritize icon from initial value template item
      icon: item.icon || template.icon || schemaType.icon || _icons.DocumentIcon,
      template,
      schemaType
    });

    return newDocumentOption;
  }) // Don't include templates for schema types we cannot actually create
  .filter(_ref => {
    var template = _ref.template;
    var canCreate = (0, _documentActionUtils.isActionEnabled)(_schema.default.get(template.schemaType), 'create');

    if (!canCreate) {
      console.error("Template with ID \"".concat(template.id, "\" has schema type \"").concat(template.schemaType, "\", where the \"create\" action is disabled and will not be included in the \"new document\"-dialog."));
    }

    return canCreate;
  }) // Don't include templates that have defined parameters but no parameters are provided for the template item
  .filter(_ref2 => {
    var template = _ref2.template,
        parameters = _ref2.parameters;
    var hasMissingParams = !parameters && template.parameters && template.parameters.length > 0;

    if (hasMissingParams) {
      console.error("Template with ID \"".concat(template.id, "\" requires a set of parameters, but none were given. Skipping."));
    }

    return !hasMissingParams;
  });
}