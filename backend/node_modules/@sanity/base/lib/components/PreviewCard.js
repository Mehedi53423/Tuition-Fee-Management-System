"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyledCard = exports.PreviewCard = void 0;
exports.usePreviewCard = usePreviewCard;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _excluded = ["children", "selected", "as"];

var _templateObject;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var StyledCard = (0, _styledComponents.default)(_ui.Card)(() => {
  return (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    /* TextWithTone uses its own logic to set color, and we therefore need */\n    /* to override this logic in order to set the correct color in different states */\n    &[data-selected],\n    &[data-pressed],\n    &:active {\n      [data-ui='TextWithTone'] {\n        color: inherit;\n      }\n    }\n  "])));
});
exports.StyledCard = StyledCard;
var PreviewCardContext = /*#__PURE__*/(0, _react.createContext)({
  selected: false
});

function usePreviewCard() {
  var context = (0, _react.useContext)(PreviewCardContext);

  if (!context) {
    throw new Error('PreviewCard: missing context value');
  }

  return context;
}

var PreviewCard = /*#__PURE__*/(0, _react.forwardRef)(function PreviewCard(props, ref) {
  var children = props.children,
      selected = props.selected,
      as = props.as,
      rest = _objectWithoutProperties(props, _excluded);

  return /*#__PURE__*/_react.default.createElement(StyledCard, _extends({
    "data-ui": "PreviewCard"
  }, rest, {
    forwardedAs: as,
    selected: selected,
    ref: ref
  }), /*#__PURE__*/_react.default.createElement(PreviewCardContext.Provider, {
    value: {
      selected
    }
  }, children));
});
exports.PreviewCard = PreviewCard;