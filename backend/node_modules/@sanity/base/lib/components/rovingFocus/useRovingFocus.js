"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRovingFocus = useRovingFocus;

var _react = require("react");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var MUTATION_ATTRIBUTE_FILTER = ['aria-hidden', 'disabled', 'href'];
var FOCUSABLE = 'a[href], button, input, textarea, select, details, [tabindex]:not([tabindex="-1"])';

function getFocusableElements(element) {
  return [...element.querySelectorAll(FOCUSABLE)].filter(el => !el.hasAttribute('disabled') && el.getAttribute('aria-hidden') !== 'true');
}
/** This hook handles focus with the keyboard arrows.
 *
 * - Roving focus definition [https://a11y-solutions.stevenwoodson.com/solutions/focus/roving-focus/]
 * - Example usage:
 * 
 * ```
  function MyComponent() {
      const [rootElement, setRootElement] = setRootElement(null)

      useRovingFocus({
        rootElement: rootElement,
      })

      return (
        <div ref={setRootElement}>
          <button>Button</button>
          <button>Button</button>
          <button>Button</button>
        </div>
      )
  }
  ```
 */


function useRovingFocus(props) {
  var _props$direction = props.direction,
      direction = _props$direction === void 0 ? 'horizontal' : _props$direction,
      initialFocus = props.initialFocus,
      _props$loop = props.loop,
      loop = _props$loop === void 0 ? true : _props$loop,
      _props$pause = props.pause,
      pause = _props$pause === void 0 ? false : _props$pause,
      rootElement = props.rootElement;

  var _useState = (0, _react.useState)(-1),
      _useState2 = _slicedToArray(_useState, 2),
      focusedIndex = _useState2[0],
      setFocusedIndex = _useState2[1];

  var _useState3 = (0, _react.useState)([]),
      _useState4 = _slicedToArray(_useState3, 2),
      focusableElements = _useState4[0],
      setFocusableElements = _useState4[1];

  var focusableLen = focusableElements.length;
  var lastFocusableIndex = focusableLen - 1;
  /**
   * Determine what keys to listen to depending on direction
   */

  var nextKey = direction === 'horizontal' ? 'ArrowRight' : 'ArrowDown';
  var prevKey = direction === 'horizontal' ? 'ArrowLeft' : 'ArrowUp';
  /**
   * Set focusable elements in state
   */

  var handleSetElements = (0, _react.useCallback)(() => {
    if (rootElement) {
      var els = getFocusableElements(rootElement);
      setFocusableElements(els);
    }
  }, [rootElement]);
  /**
   * Set focused index
   */

  var handleFocus = (0, _react.useCallback)(index => {
    setFocusedIndex(index);
  }, []);
  /**
   * Handle increment/decrement of focusedIndex
   */

  var handleKeyDown = (0, _react.useCallback)(event => {
    if (pause) {
      return;
    }

    if (event.key === prevKey) {
      event.preventDefault();
      setFocusedIndex(prevIndex => {
        var next = (prevIndex + lastFocusableIndex) % focusableLen;

        if (!loop && next === lastFocusableIndex) {
          return prevIndex;
        }

        return next;
      });
    }

    if (event.key === nextKey) {
      event.preventDefault();
      setFocusedIndex(prevIndex => {
        var next = (prevIndex + 1) % focusableLen;

        if (!loop && next === 0) {
          return prevIndex;
        }

        return next;
      });
    }
  }, [focusableLen, loop, nextKey, pause, prevKey, lastFocusableIndex]);
  /**
   * Set focusable elements on mount
   */

  (0, _react.useEffect)(() => {
    handleSetElements();
  }, [handleSetElements, initialFocus, direction]);
  /**
   * Listen to DOM mutations to update focusableElements with latest state
   */

  (0, _react.useEffect)(() => {
    var mo = new MutationObserver(handleSetElements);

    if (rootElement) {
      mo.observe(rootElement, {
        childList: true,
        subtree: true,
        attributeFilter: MUTATION_ATTRIBUTE_FILTER
      });
    }

    return () => {
      mo.disconnect();
    };
  }, [focusableElements, handleSetElements, rootElement]);
  /**
   * Set focus on elements in focusableElements depending on focusedIndex
   */

  (0, _react.useEffect)(() => {
    focusableElements.forEach((el, index) => {
      if (index === focusedIndex) {
        el.setAttribute('tabIndex', '0');
        el.setAttribute('aria-selected', 'true');
        el.focus();

        el.onfocus = () => handleFocus(index);

        el.onblur = () => handleFocus(-1);
      } else {
        el.setAttribute('tabIndex', '-1');
        el.setAttribute('aria-selected', 'false');

        el.onfocus = () => handleFocus(index);
      }
    });

    if (focusedIndex === -1 && focusableElements) {
      var _focusableElements$in;

      var initialIndex = initialFocus === 'last' ? lastFocusableIndex : 0;
      (_focusableElements$in = focusableElements[initialIndex]) === null || _focusableElements$in === void 0 ? void 0 : _focusableElements$in.setAttribute('tabIndex', '0');
    }
  }, [focusableElements, focusedIndex, handleFocus, initialFocus, lastFocusableIndex]);
  /**
   * Listen to key down events on rootElement
   */

  (0, _react.useEffect)(() => {
    rootElement === null || rootElement === void 0 ? void 0 : rootElement.addEventListener('keydown', handleKeyDown);
    return () => {
      rootElement === null || rootElement === void 0 ? void 0 : rootElement.removeEventListener('keydown', handleKeyDown);
    };
  }, [handleKeyDown, rootElement]);
  return undefined;
}