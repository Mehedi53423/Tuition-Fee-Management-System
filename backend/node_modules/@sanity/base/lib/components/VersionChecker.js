"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DeprecatedVersionChecker;

var _react = _interopRequireDefault(require("react"));

var _semverCompare = _interopRequireDefault(require("semver-compare"));

var _FullscreenMessageDialog = _interopRequireDefault(require("../__legacy/@sanity/components/dialogs/FullscreenMessageDialog"));

var _legacyParts = require("../legacyParts");

var _moduleStatus = require("../module-status");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @note This _shouldn't_ be in use anywhere, but lets keep it around until we can be sure
 * @deprecated To be removed, please migrate away from this asap
 * @returns
 */
function DeprecatedVersionChecker() {
  var _useModuleStatus = (0, _moduleStatus.useModuleStatus)(),
      result = _useModuleStatus.value;

  if (!result || result.isSupported || result.isSupported === undefined) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(_FullscreenMessageDialog.default, {
    color: "danger",
    title: "Unsupported module versions"
  }, /*#__PURE__*/_react.default.createElement("p", null, "Modules are out of date"), result.helpUrl && /*#__PURE__*/_react.default.createElement("p", null, "For more information, please read ", /*#__PURE__*/_react.default.createElement("a", {
    href: result.helpUrl
  }, result.helpUrl)));
}

DeprecatedVersionChecker.checkVersions = () => {
  console.warn('`VersionChecker.checkVersions()` is deprecated and marked for removal');
  return (0, _moduleStatus.checkModuleStatus)().toPromise();
};
/**
 * Gets the latest version of installed sanity packages, sorted by semver
 *
 * @deprecated To be removed, please migrate away from this asap
 */


DeprecatedVersionChecker.getLatestInstalled = () => {
  console.warn('`VersionChecker.getLatestInstalled()` is deprecated and marked for removal');
  var versionNums = Object.keys(_legacyParts.sanityModuleVersions).map(pkg => _legacyParts.sanityModuleVersions[pkg]);
  var sorted = versionNums.sort(_semverCompare.default);
  return sorted[sorted.length - 1];
};