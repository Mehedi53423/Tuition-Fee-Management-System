"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TitleSkeleton = exports.SubtitleSkeleton = exports.StatusBox = exports.RootFlex = exports.MediaSkeleton = exports.DescriptionText = exports.DescriptionSkeleton = void 0;

var _ui = require("@sanity/ui");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _constants = require("../constants");

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var RootFlex = (0, _styledComponents.default)(_ui.Flex).attrs({
  align: 'center'
})(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  height: ", ";\n"])), (0, _ui.rem)(_constants.PREVIEW_MEDIA_SIZE.detail.height));
exports.RootFlex = RootFlex;
var StatusBox = (0, _styledComponents.default)(_ui.Box)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  white-space: nowrap;\n"])));
exports.StatusBox = StatusBox;
var MediaSkeleton = (0, _styledComponents.default)(_ui.Skeleton).attrs({
  animated: true,
  radius: 2
})(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  width: ", ";\n  height: ", ";\n"])), (0, _ui.rem)(_constants.PREVIEW_MEDIA_SIZE.detail.width), (0, _ui.rem)(_constants.PREVIEW_MEDIA_SIZE.detail.height));
exports.MediaSkeleton = MediaSkeleton;
var TitleSkeleton = (0, _styledComponents.default)(_ui.TextSkeleton).attrs({
  animated: true,
  radius: 1
})(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  max-width: ", "; /* 80% of 200px */\n  width: 80%;\n"])), (0, _ui.rem)(160));
exports.TitleSkeleton = TitleSkeleton;
var SubtitleSkeleton = (0, _styledComponents.default)(_ui.TextSkeleton).attrs({
  animated: true,
  radius: 1,
  size: 1
})(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  max-width: ", "; /* 60% of 200px */\n  width: 60%;\n"])), (0, _ui.rem)(120));
exports.SubtitleSkeleton = SubtitleSkeleton;
var DescriptionSkeleton = (0, _styledComponents.default)(_ui.TextSkeleton).attrs({
  animated: true,
  radius: 1,
  size: 1
})(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  max-width: ", "; /* 90% of 200px */\n  width: 90%;\n"])), (0, _ui.rem)(180));
exports.DescriptionSkeleton = DescriptionSkeleton;
var DescriptionText = (0, _styledComponents.default)(_ui.Text)(_ref => {
  var theme = _ref.theme;
  var fonts = theme.sanity.fonts;
  var textSize1 = fonts.text.sizes[1];
  var maxLines = 2;
  var maxHeight = textSize1.lineHeight * maxLines;
  return (0, _styledComponents.css)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n    & > span {\n      max-height: ", ";\n\n      /* Multi-line text overflow */\n      display: -webkit-box;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      -webkit-line-clamp: ", ";\n      -webkit-box-orient: vertical;\n    }\n  "])), (0, _ui.rem)(maxHeight), maxLines);
});
exports.DescriptionText = DescriptionText;