"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormFieldValidationStatus = FormFieldValidationStatus;

var _color = require("@sanity/color");

var _icons = require("@sanity/icons");

var _types = require("@sanity/types");

var _ui = require("@sanity/ui");

var _react = _interopRequireDefault(require("react"));

var _helpers = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable camelcase */
var VALIDATION_COLORS = {
  error: _color.hues.red[500].hex,
  warning: _color.hues.yellow[500].hex,
  info: _color.hues.blue[500].hex
};
var VALIDATION_ICONS = {
  error: /*#__PURE__*/_react.default.createElement(_icons.ErrorOutlineIcon, {
    "data-testid": "input-validation-icon-error"
  }),
  warning: /*#__PURE__*/_react.default.createElement(_icons.WarningOutlineIcon, {
    "data-testid": "input-validation-icon-warning"
  }),
  info: /*#__PURE__*/_react.default.createElement(_icons.InfoOutlineIcon, {
    "data-testid": "input-validation-icon-info"
  })
};

function FormFieldValidationStatus(props) {
  var _props$__unstable_mar = props.__unstable_markers,
      markers = _props$__unstable_mar === void 0 ? [] : _props$__unstable_mar,
      showSummary = props.__unstable_showSummary,
      fontSize = props.fontSize,
      _props$placement = props.placement,
      placement = _props$placement === void 0 ? 'top' : _props$placement,
      portal = props.portal;
  var validationMarkers = markers.filter(_types.isValidationMarker);
  var validation = (0, _helpers.markersToValidationList)(validationMarkers);
  var errors = validation.filter(v => v.type === 'error');
  var warnings = validation.filter(v => v.type === 'warning');
  var info = validation.filter(v => v.type === 'info');
  var hasErrors = errors.length > 0;
  var hasWarnings = warnings.length > 0;
  var hasInfo = info.length > 0;

  var statusIcon = () => {
    if (hasErrors) return VALIDATION_ICONS.error;
    if (hasWarnings) return VALIDATION_ICONS.warning;
    if (hasInfo) return VALIDATION_ICONS.info;
    return null;
  };

  var statusColor = () => {
    if (hasErrors) return VALIDATION_COLORS.error;
    if (hasWarnings) return VALIDATION_COLORS.warning;
    if (hasInfo) return VALIDATION_COLORS.info;
    return null;
  };

  return /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    content: /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      padding: 3,
      space: 3
    }, showSummary && /*#__PURE__*/_react.default.createElement(FormFieldValidationSummary, {
      markers: validationMarkers
    }), !showSummary && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, validation.map((item, itemIndex) =>
    /*#__PURE__*/
    // eslint-disable-next-line react/no-array-index-key
    _react.default.createElement(FormFieldValidationStatusItem, {
      item: item,
      key: itemIndex
    })))),
    portal: portal,
    placement: placement,
    fallbackPlacements: ['bottom', 'right', 'left']
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    muted: true,
    size: fontSize,
    weight: "semibold",
    style: {
      color: statusColor()
    }
  }, statusIcon())));
}

function FormFieldValidationStatusItem(props) {
  var item = props.item;

  var statusIcon = () => {
    if (item.type === 'error') return VALIDATION_ICONS.error;
    if (item.type === 'warning') return VALIDATION_ICONS.warning;
    if (item.type === 'info') return VALIDATION_ICONS.info;
    return null;
  };

  var statusColor = () => {
    if (item.type === 'error') return VALIDATION_COLORS.error;
    if (item.type === 'warning') return VALIDATION_COLORS.warning;
    if (item.type === 'info') return VALIDATION_COLORS.info;
    return null;
  };

  return /*#__PURE__*/_react.default.createElement(_ui.Flex, null, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginRight: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1,
    style: {
      color: statusColor()
    }
  }, statusIcon())), /*#__PURE__*/_react.default.createElement(_ui.Box, {
    flex: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    muted: true,
    size: 1
  }, item.label)));
}

function FormFieldValidationSummary(_ref) {
  var markers = _ref.markers;
  var errorMarkers = markers.filter(_types.isValidationErrorMarker);
  var warningMarkers = markers.filter(_types.isValidationWarningMarker);
  var errorLen = errorMarkers.length;
  var warningLen = warningMarkers.length;
  var errorsStr = "error".concat(errorLen === 1 ? '' : 's');
  var warningsStr = "warning".concat(warningLen === 1 ? '' : 's');
  var errorText = errorLen && "".concat(errorLen, " ").concat(errorsStr);
  var warningText = warningLen && "".concat(warningLen, " ").concat(warningsStr);
  var hasErrors = errorLen > 0;
  var hasWarnings = warningLen > 0;
  var hasBoth = hasErrors && hasWarnings;
  return /*#__PURE__*/_react.default.createElement(_ui.Text, {
    muted: true,
    size: 1
  }, errorText || '', hasBoth && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, " and "), warningText || '');
}