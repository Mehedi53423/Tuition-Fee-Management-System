"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isThenable = isThenable;
exports.omitDeprecatedRole = omitDeprecatedRole;
exports.useCheckCondition = useCheckCondition;

var _react = require("react");

var _excluded = ["role"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function isThenable(value) {
  return typeof (value === null || value === void 0 ? void 0 : value.then) === 'function';
}

function omitDeprecatedRole(user) {
  if (user !== null && user !== void 0 && user.role) {
    var role = user.role,
        rest = _objectWithoutProperties(user, _excluded);

    return rest;
  }

  return user;
}

function useCheckCondition(checkProperty, checkPropertyName, _ref) {
  var document = _ref.document,
      parent = _ref.parent,
      value = _ref.value,
      currentUser = _ref.currentUser;
  var didWarn = (0, _react.useRef)(false);
  return (0, _react.useMemo)(() => {
    var isTrueIsh = false;

    if (typeof checkProperty === 'boolean') {
      return checkProperty;
    }

    try {
      isTrueIsh = checkProperty({
        document,
        parent,
        value,
        currentUser
      });
    } catch (err) {
      console.error("An error occurred while running the callback from `".concat(checkPropertyName, "`: ").concat(err.message));
      return false;
    }

    if (isThenable(isTrueIsh) && !didWarn.current) {
      console.warn("The `".concat(checkPropertyName, "` option is either a promise or a promise returning function. Async callbacks for `").concat(checkPropertyName, "` option is not currently supported."));
      return false;
    }

    if (typeof isTrueIsh === 'undefined') {
      console.warn("The `".concat(checkPropertyName, "` option is either a promise or a promise returning function. Async callbacks for `").concat(checkPropertyName, "` option is not currently supported."));
    }

    return isTrueIsh;
  }, [checkProperty, document, parent, value, currentUser, checkPropertyName]);
}