"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WithIntersection = void 0;

var _react = _interopRequireDefault(require("react"));

var _operators = require("rxjs/operators");

var _excluded = ["onIntersection", "io", "id"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var WithIntersection = props => {
  var onIntersection = props.onIntersection,
      io = props.io,
      id = props.id,
      rest = _objectWithoutProperties(props, _excluded);

  var element = _react.default.useRef(null);

  _react.default.useEffect(() => {
    var el = element.current;
    if (!el) return undefined;
    var subscription = io.observe(el).pipe((0, _operators.tap)(entry => onIntersection(id, entry))).subscribe();
    return () => subscription.unsubscribe();
  }, [io, id, onIntersection]);

  return /*#__PURE__*/_react.default.createElement("div", _extends({
    ref: element
  }, rest));
};

exports.WithIntersection = WithIntersection;