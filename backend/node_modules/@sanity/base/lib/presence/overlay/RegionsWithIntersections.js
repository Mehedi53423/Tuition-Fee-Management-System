"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RegionsWithIntersections = void 0;

var _react = _interopRequireWildcard(require("react"));

var _constants = require("../constants");

var _intersectionObserver = require("./intersectionObserver");

var _RegionsWithIntersections = require("./RegionsWithIntersections.styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var toPx = num => "".concat(num, "px");

var negate = num => 0 - num;

var RegionsWithIntersections = /*#__PURE__*/(0, _react.forwardRef)(function RegionsWithIntersections(props, ref) {
  var regions = props.regions,
      render = props.render,
      children = props.children,
      marginsProp = props.margins;
  var overlayRef = (0, _react.useRef)(null); // Make sure `margins` is memoized
  // eslint-disable-next-line react-hooks/exhaustive-deps

  var margins = (0, _react.useMemo)(() => marginsProp, [JSON.stringify(marginsProp)]);
  var io = (0, _react.useMemo)(() => (0, _intersectionObserver.createIntersectionObserver)({
    rootMargin: margins.map(negate).map(toPx).join(' '),
    threshold: _constants.INTERSECTION_THRESHOLDS
  }), [margins]);

  var _useState = (0, _react.useState)({}),
      _useState2 = _slicedToArray(_useState, 2),
      intersections = _useState2[0],
      setIntersections = _useState2[1];

  var onIntersection = (0, _react.useCallback)((id, entry) => {
    setIntersections(current => _objectSpread(_objectSpread({}, current), {}, {
      [id]: entry
    }));
  }, []);
  var top = intersections['::top'];
  var bottom = intersections['::bottom'];
  var regionsWithIntersectionDetails = (0, _react.useMemo)(() => top && bottom ? regions.filter(region => {
    var _region$presence;

    return ((_region$presence = region.presence) === null || _region$presence === void 0 ? void 0 : _region$presence.length) > 0;
  }).map(region => {
    var intersection = intersections[region.id];

    if (!intersection) {
      return null;
    }

    var _intersection$boundin = intersection.boundingClientRect,
        boundsBottom = _intersection$boundin.bottom,
        boundsTop = _intersection$boundin.top;
    var aboveTop = intersection.boundingClientRect.top < top.boundingClientRect.bottom;
    var belowBottom = intersection.boundingClientRect.top < bottom.boundingClientRect.top; // eslint-disable-next-line no-nested-ternary

    var distanceTop = intersection.isIntersecting ? boundsTop - (intersection.intersectionRect.top - _constants.INTERSECTION_ELEMENT_PADDING) : aboveTop ? -top.boundingClientRect.bottom : bottom.boundingClientRect.top; // eslint-disable-next-line no-nested-ternary

    var distanceBottom = intersection.isIntersecting ? -(boundsBottom - (intersection.intersectionRect.bottom + _constants.INTERSECTION_ELEMENT_PADDING)) : belowBottom ? bottom.boundingClientRect.top : -top.boundingClientRect.bottom;
    var position = // eslint-disable-next-line no-nested-ternary
    distanceTop <= _constants.SNAP_TO_DOCK_DISTANCE_TOP ? 'top' : distanceBottom <= _constants.SNAP_TO_DOCK_DISTANCE_BOTTOM ? 'bottom' : 'inside';
    return {
      distanceTop,
      distanceBottom,
      region,
      position
    };
  }).filter(Boolean) : [], [bottom, intersections, regions, top]);
  return /*#__PURE__*/_react.default.createElement(_RegionsWithIntersections.RootWrapper, {
    ref: ref
  }, /*#__PURE__*/_react.default.createElement(_RegionsWithIntersections.TopRegionWrapper, {
    $debug: _constants.DEBUG,
    io: io,
    id: "::top",
    onIntersection: onIntersection,
    margins: margins
  }), /*#__PURE__*/_react.default.createElement("div", null, children), /*#__PURE__*/_react.default.createElement(_RegionsWithIntersections.OverlayWrapper, {
    ref: overlayRef
  }, overlayRef.current && render(regionsWithIntersectionDetails, overlayRef.current.offsetWidth)), regions.map(region => {
    var forceWidth = region.rect.width === 0;
    return /*#__PURE__*/_react.default.createElement(_RegionsWithIntersections.MiddleRegionWrapper, {
      $debug: _constants.DEBUG,
      io: io,
      onIntersection: onIntersection,
      key: region.id,
      id: region.id,
      style: {
        width: forceWidth ? 1 : region.rect.width,
        left: region.rect.left - (forceWidth ? 1 : 0),
        top: region.rect.top - _constants.INTERSECTION_ELEMENT_PADDING,
        height: region.rect.height + _constants.INTERSECTION_ELEMENT_PADDING * 2
      }
    });
  }), /*#__PURE__*/_react.default.createElement(_RegionsWithIntersections.BottomRegionWrapper, {
    $debug: _constants.DEBUG,
    id: "::bottom",
    io: io,
    onIntersection: onIntersection
  }));
});
exports.RegionsWithIntersections = RegionsWithIntersections;