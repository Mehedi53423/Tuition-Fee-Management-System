import { Observable } from 'rxjs';
declare type LoadingTuple<T> = [T, boolean];
declare type ReactHook<TArgs extends unknown[], TResult> = (...args: TArgs) => TResult;
interface CreateHookFromObservableFactoryOptions<T, TArgs extends unknown[]> {
    /**
     * Optionally provide an initial value that will show up initially if the
     * observable resolves asynchronously. Prevents `undefined` as the initial
     * value.
     */
    initialValue: T;
    /**
     * Optionally provide a comparison function passed into `distinctUntilEqual`
     * used for args comparison. The default function shallowly compares each
     * argument.
     */
    argsAreEqual?: (prev: TArgs, next: TArgs) => boolean;
}
export declare function createHookFromObservableFactory<T, TArgs extends unknown[]>(observableFactory: (...args: TArgs) => Observable<T>, options: CreateHookFromObservableFactoryOptions<T, TArgs>): ReactHook<TArgs, LoadingTuple<T>>;
export declare function createHookFromObservableFactory<T, TArgs extends unknown[]>(observableFactory: (...args: TArgs) => Observable<T>, options: CreateHookFromObservableFactoryOptions<T | undefined, TArgs>): ReactHook<TArgs, LoadingTuple<T | undefined>>;
export declare function createHookFromObservableFactory<T, TArgs extends unknown[]>(observableFactory: (...args: TArgs) => Observable<T>, options?: CreateHookFromObservableFactoryOptions<T | undefined, TArgs>): ReactHook<TArgs, LoadingTuple<T | undefined>>;
export {};
//# sourceMappingURL=createHookFromObservableFactory.d.ts.map