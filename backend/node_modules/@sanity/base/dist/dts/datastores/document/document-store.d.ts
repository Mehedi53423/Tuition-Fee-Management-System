import type { Observable } from 'rxjs';
import type { DocumentVersionEvent, Pair } from './document-pair/checkoutPair';
import type { IdPair } from './types';
import { resolveTypeForDocument } from './resolveTypeForDocument';
import { EditStateFor } from './document-pair/editState';
import { ValidationStatus } from './document-pair/validation';
import type { OperationError, OperationSuccess } from './document-pair/operationEvents';
import type { OperationsAPI } from './document-pair/operations';
declare const _default: {
    checkoutPair: (idPair: IdPair) => Pair;
    listenQuery: (query: string, params?: {
        [x: string]: string | number | boolean | string[];
    }, options?: import("./listenQuery").ListenQueryOptions) => Observable<any>;
    resolveTypeForDocument: typeof resolveTypeForDocument;
    pair: {
        editState: (publishedId: string, type: string) => Observable<EditStateFor>;
        editOperations: (publishedId: string, type: string) => Observable<OperationsAPI>;
        documentEvents: (publishedId: string, type: string) => Observable<DocumentVersionEvent>;
        validation: (publishedId: string, type: string) => Observable<ValidationStatus>;
        operationEvents: (publishedId: string, type: string) => Observable<OperationSuccess | OperationError>;
        consistencyStatus: (publishedId: string, type: string) => Observable<boolean>;
    };
};
export default _default;
//# sourceMappingURL=document-store.d.ts.map