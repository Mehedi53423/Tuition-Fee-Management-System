"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isArraySchemaType = isArraySchemaType;
exports.isBlockSchemaType = isBlockSchemaType;
exports.isCrossDatasetReferenceSchemaType = isCrossDatasetReferenceSchemaType;
exports.isListObjectField = isListObjectField;
exports.isObjectSchemaType = isObjectSchemaType;
exports.isReferenceSchemaType = isReferenceSchemaType;
exports.isSpanChildrenObjectField = isSpanChildrenObjectField;
exports.isSpanSchemaType = isSpanSchemaType;
exports.isStyleObjectField = isStyleObjectField;
exports.isTitledListValue = isTitledListValue;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function isRecord(value) {
  return !!value && (typeof value == 'object' || typeof value == 'function');
}

function isObjectSchemaType(type) {
  if (!isRecord(type)) return false;
  return type.jsonType === 'object';
}

function isArraySchemaType(type) {
  if (!isRecord(type)) return false;
  return type.jsonType === 'array';
}

function isReferenceSchemaType(type) {
  return isRecord(type) && (type.name === 'reference' || isReferenceSchemaType(type.type));
}

function isCrossDatasetReferenceSchemaType(type) {
  return isRecord(type) && (type.name === 'crossDatasetReference' || isCrossDatasetReferenceSchemaType(type.type));
}

function isTitledListValue(item) {
  return typeof item === 'object' && item !== null && 'title' in item && 'value' in item;
}

function isSpanSchemaType(type) {
  if (!isRecord(type)) return false; // we check for `annotations` and `decorators` instead of `type.name` because
  // schema names can technically change if someone extends the type

  return Array.isArray(type.annotations) && Array.isArray(type.decorators);
}

function isBlockSchemaType(type) {
  if (!isRecord(type)) return false;
  if (!Array.isArray(type.fields)) return false;

  var _type$fields = _slicedToArray(type.fields, 3),
      maybeSpanChildren = _type$fields[0],
      maybeStyle = _type$fields[1],
      maybeList = _type$fields[2];

  return isSpanChildrenObjectField(maybeSpanChildren) && isStyleObjectField(maybeStyle) && isListObjectField(maybeList);
}

function isStyleObjectField(field) {
  if (!isRecord(field)) return false;
  if (field.name !== 'style') return false;
  return isRecord(field.type) && field.type.jsonType === 'string';
}

function isListObjectField(field) {
  if (!isRecord(field)) return false;
  if (field.name !== 'list') return false;
  return isRecord(field.type) && field.type.jsonType === 'string';
}

function isSpanChildrenObjectField(field) {
  if (!isRecord(field)) return false;
  if (field.name !== 'children') return false;
  if (!isArraySchemaType(field.type)) return false; // there will always be a span item in `SpanChildrenObjectField`

  return field.type.of.some(isSpanSchemaType);
}