import { Subject } from 'rxjs';
import { Descendant, InsertNodeOperation, InsertTextOperation, MergeNodeOperation, MoveNodeOperation, RemoveNodeOperation, RemoveTextOperation, SetNodeOperation, SplitNodeOperation } from 'slate';
import type { Patch } from '../../types/patch';
import { PortableTextFeatures } from '../../types/portableText';
import { EditorChange, PatchObservable, PortableTextSlateEditor } from '../../types/editor';
export declare type PatchFunctions = {
    insertNodePatch: (editor: PortableTextSlateEditor, operation: InsertNodeOperation, previousChildren: Descendant[]) => Patch[];
    insertTextPatch: (editor: PortableTextSlateEditor, operation: InsertTextOperation, previousChildren: Descendant[]) => Patch[];
    mergeNodePatch: (editor: PortableTextSlateEditor, operation: MergeNodeOperation, previousChildren: Descendant[]) => Patch[];
    moveNodePatch: (editor: PortableTextSlateEditor, operation: MoveNodeOperation, previousChildren: Descendant[]) => Patch[];
    removeNodePatch: (editor: PortableTextSlateEditor, operation: RemoveNodeOperation, previousChildren: Descendant[]) => Patch[];
    removeTextPatch: (editor: PortableTextSlateEditor, operation: RemoveTextOperation, previousChildren: Descendant[]) => Patch[];
    setNodePatch: (editor: PortableTextSlateEditor, operation: SetNodeOperation, previousChildren: Descendant[]) => Patch[];
    splitNodePatch: (editor: PortableTextSlateEditor, operation: SplitNodeOperation, previousChildren: Descendant[]) => Patch[];
};
export declare function createWithPatches({ insertNodePatch, insertTextPatch, mergeNodePatch, moveNodePatch, removeNodePatch, removeTextPatch, setNodePatch, splitNodePatch, }: PatchFunctions, change$: Subject<EditorChange>, portableTextFeatures: PortableTextFeatures, incomingPatches$?: PatchObservable): (editor: PortableTextSlateEditor) => PortableTextSlateEditor;
//# sourceMappingURL=createWithPatches.d.ts.map