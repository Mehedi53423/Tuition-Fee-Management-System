"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createArrayedPath = createArrayedPath;
exports.createKeyedPath = createKeyedPath;

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _slate = require("slate");

var _types = require("@sanity/types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function createKeyedPath(point, editor) {
  var blockPath = [point.path[0]];
  var block;

  try {
    ;

    var _Editor$node = _slate.Editor.node(editor, blockPath, {
      depth: 1
    });

    var _Editor$node2 = _slicedToArray(_Editor$node, 1);

    block = _Editor$node2[0];
  } catch (err) {
    return null;
  }

  if (!block || !_slate.Element.isElement(block)) {
    return null;
  }

  var keyedBlockPath = [{
    _key: block._key
  }];

  if (editor.isVoid(block)) {
    return keyedBlockPath;
  }

  var keyedChildPath;
  var child;
  var childPath = point.path.slice(0, 2);

  if (childPath.length === 2) {
    try {
      ;

      var _Editor$node3 = _slate.Editor.node(editor, childPath, {
        depth: 2
      });

      var _Editor$node4 = _slicedToArray(_Editor$node3, 1);

      child = _Editor$node4[0];
    } catch (err) {
      return null;
    }

    keyedChildPath = ['children', {
      _key: child._key
    }];
  }

  return keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath;
}

function createArrayedPath(point, editor) {
  if (!editor) {
    return [];
  }

  var _ref = Array.from(_slate.Editor.nodes(editor, {
    at: [],
    match: n => (0, _types.isKeySegment)(point.path[0]) && n._key === point.path[0]._key
  }))[0] || [undefined, undefined],
      _ref2 = _slicedToArray(_ref, 2),
      block = _ref2[0],
      blockPath = _ref2[1];

  if (!block || !_slate.Element.isElement(block)) {
    return [];
  }

  if (editor.isVoid(block)) {
    return blockPath;
  }

  var childPath = [point.path[2]];
  var childIndex = block.children.findIndex(child => (0, _isEqual2.default)([{
    _key: child._key
  }], childPath));

  if (childIndex >= 0 && block.children[childIndex]) {
    var child = block.children[childIndex];

    if (_slate.Element.isElement(child) && editor.isVoid(child)) {
      return blockPath.concat(childIndex).concat(0);
    }

    return blockPath.concat(childIndex);
  }

  return blockPath;
}