"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createOperationToPatches = createOperationToPatches;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var _omitBy2 = _interopRequireDefault(require("lodash/omitBy"));

var _slate = require("slate");

var _PatchEvent = require("../patch/PatchEvent");

var _values = require("./values");

var _debug = require("./debug");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var debug = (0, _debug.debugWithName)('operationToPatches');

function createOperationToPatches(portableTextFeatures) {
  var textBlockName = portableTextFeatures.types.block.name;

  function insertTextPatch(editor, operation, beforeValue) {
    var block = editor.isTextBlock(editor.children[operation.path[0]]) && editor.children[operation.path[0]];

    if (!block) {
      throw new Error('Could not find block');
    }

    var textChild = editor.isTextBlock(block) && _slate.Text.isText(block.children[operation.path[1]]) && block.children[operation.path[1]];

    if (!textChild) {
      throw new Error('Could not find child');
    }

    var path = [{
      _key: block._key
    }, 'children', {
      _key: textChild._key
    }, 'text'];
    var prevBlock = beforeValue[operation.path[0]];
    var prevChild = editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]];
    var prevText = _slate.Text.isText(prevChild) ? prevChild.text : '';
    var patch = (0, _PatchEvent.diffMatchPatch)(prevText, textChild.text, path);
    return patch.value.length ? [patch] : [];
  }

  function removeTextPatch(editor, operation, beforeValue) {
    var block = editor && editor.children[operation.path[0]];

    if (!block) {
      throw new Error('Could not find block');
    }

    var textChild = editor.isTextBlock(block) && _slate.Text.isText(block.children[operation.path[1]]) && block.children[operation.path[1]];

    if (!textChild) {
      throw new Error('Could not find child');
    }

    var path = [{
      _key: block._key
    }, 'children', {
      _key: textChild._key
    }, 'text'];
    var beforeBlock = beforeValue[operation.path[0]];
    var prevTextChild = editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]];
    var prevText = _slate.Text.isText(prevTextChild) && prevTextChild.text;
    var patch = (0, _PatchEvent.diffMatchPatch)(prevText || '', textChild.text, path);
    return patch.value ? [patch] : [];
  }

  function setNodePatch(editor, operation) {
    if (operation.path.length === 1) {
      var block = editor.children[operation.path[0]];

      if (typeof block._key !== 'string') {
        throw new Error('Expected block to have a _key');
      }

      var setNode = (0, _omitBy2.default)(_objectSpread(_objectSpread({}, editor.children[operation.path[0]]), operation.newProperties), _isUndefined2.default);
      return [(0, _PatchEvent.set)((0, _values.fromSlateValue)([setNode], textBlockName)[0], [{
        _key: block._key
      }])];
    } else if (operation.path.length === 2) {
      var _block = editor.children[operation.path[0]];

      if (editor.isTextBlock(_block)) {
        var child = _block.children[operation.path[1]];

        if (child) {
          var blockKey = _block._key;
          var childKey = child._key;
          var patches = [];
          Object.keys(operation.newProperties).forEach(keyName => {
            var val = (0, _get2.default)(operation.newProperties, keyName);
            patches.push((0, _PatchEvent.set)(val, [{
              _key: blockKey
            }, 'children', {
              _key: childKey
            }, keyName]));
          });
          return patches;
        }

        throw new Error('Could not find a valid child');
      }

      throw new Error('Could not find a valid block');
    } else {
      throw new Error("Unexpected path encountered: ".concat(JSON.stringify(operation.path)));
    }
  }

  function insertNodePatch(editor, operation, beforeValue) {
    var block = beforeValue[operation.path[0]];

    if (operation.path.length === 1) {
      var position = operation.path[0] === 0 ? 'before' : 'after';
      var beforeBlock = beforeValue[operation.path[0] - 1];
      var targetKey = operation.path[0] === 0 ? block === null || block === void 0 ? void 0 : block._key : beforeBlock === null || beforeBlock === void 0 ? void 0 : beforeBlock._key;

      if (targetKey) {
        return [(0, _PatchEvent.insert)([(0, _values.fromSlateValue)([operation.node], textBlockName)[0]], position, [{
          _key: targetKey
        }])];
      }

      return [(0, _PatchEvent.setIfMissing)(beforeValue, []), (0, _PatchEvent.insert)([(0, _values.fromSlateValue)([operation.node], textBlockName)[0]], 'before', [operation.path[0]])];
    } else if (operation.path.length === 2 && editor.children[operation.path[0]]) {
      if (!editor.isTextBlock(block)) {
        throw new Error('Invalid block');
      }

      var _position = block.children.length === 0 || !block.children[operation.path[1] - 1] ? 'before' : 'after';

      var child = (0, _values.fromSlateValue)([{
        _key: 'bogus',
        _type: textBlockName,
        children: [operation.node]
      }], textBlockName)[0].children[0];
      return [(0, _PatchEvent.insert)([child], _position, [{
        _key: block._key
      }, 'children', block.children.length <= 1 || !block.children[operation.path[1] - 1] ? 0 : {
        _key: block.children[operation.path[1] - 1]._key
      }])];
    }

    throw new Error("Unexpected path encountered: ".concat(JSON.stringify(operation.path), " - ").concat(JSON.stringify(beforeValue)));
  }

  function splitNodePatch(editor, operation, beforeValue) {
    var patches = [];
    var splitBlock = editor.children[operation.path[0]];

    if (!editor.isTextBlock(splitBlock)) {
      throw new Error("Block with path ".concat(JSON.stringify(operation.path[0]), " is not a text block and can't be split"));
    }

    if (operation.path.length === 1) {
      var oldBlock = beforeValue[operation.path[0]];

      if (editor.isTextBlock(oldBlock)) {
        var targetValue = (0, _values.fromSlateValue)([editor.children[operation.path[0] + 1]], textBlockName)[0];

        if (targetValue) {
          patches.push((0, _PatchEvent.insert)([targetValue], 'after', [{
            _key: splitBlock._key
          }]));
          var spansToUnset = oldBlock.children.slice(operation.position);
          spansToUnset.forEach(span => {
            var path = [{
              _key: oldBlock._key
            }, 'children', {
              _key: span._key
            }];
            patches.push((0, _PatchEvent.unset)(path));
          });
        }
      }

      return patches;
    }

    if (operation.path.length === 2) {
      var splitSpan = splitBlock.children[operation.path[1]];

      if (_slate.Text.isText(splitSpan)) {
        var targetSpans = (0, _values.fromSlateValue)([_objectSpread(_objectSpread({}, splitBlock), {}, {
          children: splitBlock.children.slice(operation.path[1] + 1, operation.path[1] + 2)
        })], textBlockName)[0].children;
        patches.push((0, _PatchEvent.insert)(targetSpans, 'after', [{
          _key: splitBlock._key
        }, 'children', {
          _key: splitSpan._key
        }]));
        patches.push((0, _PatchEvent.set)(splitSpan.text, [{
          _key: splitBlock._key
        }, 'children', {
          _key: splitSpan._key
        }, 'text']));
      }

      return patches;
    }

    return patches;
  }

  function removeNodePatch(_, operation, beforeValue) {
    var block = beforeValue[operation.path[0]];

    if (operation.path.length === 1) {
      // Remove a single block
      if (block && block._key) {
        return [(0, _PatchEvent.unset)([{
          _key: block._key
        }])];
      }

      throw new Error('Block not found');
    } else if (operation.path.length === 2) {
      var spanToRemove = block && block.children && block.children[operation.path[1]];

      if (spanToRemove) {
        return [(0, _PatchEvent.unset)([{
          _key: block._key
        }, 'children', {
          _key: spanToRemove._key
        }])];
      } // If it was not there before, do nothing


      debug('Span not found in editor trying to remove node');
      return [];
    } else {
      throw new Error("Unexpected path encountered: ".concat(JSON.stringify(operation.path)));
    }
  }

  function mergeNodePatch(editor, operation, beforeValue) {
    var patches = [];

    if (operation.path.length === 1) {
      var block = beforeValue[operation.path[0]];
      var targetKey = block && block._key;

      if (targetKey) {
        var newBlock = (0, _values.fromSlateValue)([editor.children[operation.path[0] - 1]], textBlockName)[0];
        patches.push((0, _PatchEvent.set)(newBlock, [{
          _key: newBlock._key
        }]));
        patches.push((0, _PatchEvent.unset)([{
          _key: targetKey
        }]));
      } else {
        throw new Error('Target key not found!');
      }
    } else if (operation.path.length === 2) {
      var _block2 = beforeValue[operation.path[0]];
      var mergedSpan = _block2.children[operation.path[1]];
      var targetBlock = editor.children[operation.path[0]];

      if (!editor.isTextBlock(targetBlock)) {
        throw new Error('Invalid block');
      }

      var targetSpan = targetBlock.children[operation.path[1] - 1];

      if (_slate.Text.isText(targetSpan)) {
        // Set the merged span with it's new value
        patches.push((0, _PatchEvent.set)(targetSpan.text, [{
          _key: _block2._key
        }, 'children', {
          _key: targetSpan._key
        }, 'text']));
        patches.push((0, _PatchEvent.unset)([{
          _key: _block2._key
        }, 'children', {
          _key: mergedSpan._key
        }]));
      }
    } else {
      throw new Error("Unexpected path encountered: ".concat(JSON.stringify(operation.path)));
    }

    return patches;
  }

  function moveNodePatch(_, operation, beforeValue) {
    var patches = [];
    var block = beforeValue[operation.path[0]];
    var targetBlock = beforeValue[operation.newPath[0]];

    if (operation.path.length === 1) {
      var position = operation.path[0] > operation.newPath[0] ? 'before' : 'after';
      patches.push((0, _PatchEvent.unset)([{
        _key: block._key
      }]));
      patches.push((0, _PatchEvent.insert)([(0, _values.fromSlateValue)([block], textBlockName)[0]], position, [{
        _key: targetBlock._key
      }]));
    } else if (operation.path.length === 2) {
      var child = block.children[operation.path[1]];
      var targetChild = targetBlock.children[operation.newPath[1]];

      var _position2 = operation.newPath[1] === targetBlock.children.length ? 'after' : 'before';

      var childToInsert = (0, _values.fromSlateValue)([block], textBlockName)[0].children[operation.path[1]];
      patches.push((0, _PatchEvent.unset)([{
        _key: block._key
      }, 'children', {
        _key: child._key
      }]));
      patches.push((0, _PatchEvent.insert)([childToInsert], _position2, [{
        _key: targetBlock._key
      }, 'children', {
        _key: targetChild._key
      }]));
    }

    return patches;
  }

  return {
    insertNodePatch,
    insertTextPatch,
    mergeNodePatch,
    moveNodePatch,
    removeNodePatch,
    removeTextPatch,
    setNodePatch,
    splitNodePatch
  };
}