"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizePoint = normalizePoint;
exports.normalizeSelection = normalizeSelection;

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function normalizePoint(point, value) {
  if (!point || !value) {
    return null;
  }

  var newPath = [];
  var newOffset = point.offset || 0;
  var blockKey = typeof point.path[0] === 'object' && '_key' in point.path[0] && point.path[0]._key;
  var childKey = typeof point.path[2] === 'object' && '_key' in point.path[2] && point.path[2]._key;
  var block = value.find(blk => blk._key === blockKey);

  if (block) {
    newPath.push({
      _key: block._key
    });
  } else {
    return null;
  }

  if (block && point.path[1] === 'children') {
    if (!block.children || block.children.length === 0) {
      return null;
    }

    var child = block.children.find(cld => cld._key === childKey);

    if (child) {
      newPath.push('children');
      newPath.push({
        _key: child._key
      });
      newOffset = child.text && child.text.length >= point.offset ? point.offset : child.text && child.text.length || 0;
    } else {
      return null;
    }
  }

  return {
    path: newPath,
    offset: newOffset
  };
}

function normalizeSelection(selection, value) {
  if (!selection || !value || value.length === 0) {
    return null;
  }

  var newAnchor = null;
  var newFocus = null;
  var anchor = selection.anchor,
      focus = selection.focus;

  if (anchor && value.find(blk => (0, _isEqual2.default)({
    _key: blk._key
  }, anchor.path[0]))) {
    newAnchor = normalizePoint(anchor, value);
  }

  if (focus && value.find(blk => (0, _isEqual2.default)({
    _key: blk._key
  }, focus.path[0]))) {
    newFocus = normalizePoint(focus, value);
  }

  if (newAnchor && newFocus) {
    return {
      anchor: newAnchor,
      focus: newFocus
    };
  }

  return null;
}