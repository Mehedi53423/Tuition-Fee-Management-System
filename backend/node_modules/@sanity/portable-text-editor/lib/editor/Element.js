"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Element = void 0;

var _react = _interopRequireWildcard(require("react"));

var _slate = require("slate");

var _slateReact = require("@sanity/slate-react");

var _values = require("../utils/values");

var _debug = require("../utils/debug");

var _weakMaps = require("../utils/weakMaps");

var _TextBlock = _interopRequireDefault(require("./nodes/TextBlock"));

var _DefaultObject = _interopRequireDefault(require("./nodes/DefaultObject"));

var _index = require("./nodes/index");

var _DraggableBlock = require("./DraggableBlock");

var _DraggableChild = require("./DraggableChild");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var debug = (0, _debug.debugWithName)('components:Element');
var debugRenders = false;
var inlineBlockStyle = {
  display: 'inline-block'
};

var defaultRender = value => {
  return /*#__PURE__*/_react.default.createElement(_DefaultObject.default, {
    value: value
  });
}; // eslint-disable-next-line max-statements


var Element = _ref => {
  var attributes = _ref.attributes,
      children = _ref.children,
      element = _ref.element,
      portableTextFeatures = _ref.portableTextFeatures,
      readOnly = _ref.readOnly,
      renderBlock = _ref.renderBlock,
      renderChild = _ref.renderChild;
  var editor = (0, _slateReact.useSlateStatic)();
  var selected = (0, _slateReact.useSelected)();
  var blockRef = (0, _react.useRef)(null);
  var inlineBlockObjectRef = (0, _react.useRef)(null);
  var focused = selected && editor.selection && _slate.Range.isCollapsed(editor.selection) || false;
  var className;

  if (typeof element._type !== 'string') {
    throw new Error("Expected element to have a _type property");
  }

  if (typeof element._key !== 'string') {
    throw new Error("Expected element to have a _key property");
  } // Test for inline objects first


  if (editor.isInline(element)) {
    var path = _slateReact.ReactEditor.findPath(editor, element);

    var _Editor$node = _slate.Editor.node(editor, path, {
      depth: 1
    }),
        _Editor$node2 = _slicedToArray(_Editor$node, 1),
        _block = _Editor$node2[0];

    var _type2 = portableTextFeatures.types.inlineObjects.find(_type => _type.name === element._type);

    if (!_type2) {
      throw new Error('Could not find type for inline block element');
    }

    if (_slate.Element.isElement(_block)) {
      var elmPath = [{
        _key: _block._key
      }, 'children', {
        _key: element._key
      }];

      if (debugRenders) {
        debug("Render ".concat(element._key, " (inline object)"));
      }

      return /*#__PURE__*/_react.default.createElement("span", attributes, children, /*#__PURE__*/_react.default.createElement(_DraggableChild.DraggableChild, {
        element: element,
        readOnly: readOnly
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "pt-inline-object",
        ref: inlineBlockObjectRef,
        key: element._key,
        style: inlineBlockStyle,
        contentEditable: false
      }, renderChild && renderChild((0, _values.fromSlateValue)([element], portableTextFeatures.types.block.name, _weakMaps.KEY_TO_VALUE_ELEMENT.get(editor))[0], _type2, {
        focused,
        selected,
        path: elmPath
      }, defaultRender, inlineBlockObjectRef), !renderChild && defaultRender((0, _values.fromSlateValue)([element], portableTextFeatures.types.block.name, _weakMaps.KEY_TO_VALUE_ELEMENT.get(editor))[0]))));
    }

    throw new Error('Block not found!');
  }

  var renderAttribs = {
    focused,
    selected,
    path: [{
      _key: element._key
    }]
  }; // If not inline, it's either a block (text) or a block object (non-text)
  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)

  if (element._type === portableTextFeatures.types.block.name) {
    className = "pt-block pt-text-block";
    var isListItem = ('listItem' in element);
    var hasStyle = ('style' in element);

    if (debugRenders) {
      debug("Render ".concat(element._key, " (text block)"));
    }

    if (hasStyle) {
      renderAttribs.style = element.style || 'normal';
      className = "pt-block pt-text-block pt-text-block-style-".concat(element.style);
    }

    if (isListItem) {
      renderAttribs.listItem = element.listItem;

      if (Number.isInteger(element.level)) {
        renderAttribs.level = element.level;
      } else {
        renderAttribs.level = 1;
      }

      className += " pt-list-item pt-list-item-".concat(renderAttribs.listItem, " pt-list-item-level-").concat(renderAttribs.level);
    }

    var textBlock = /*#__PURE__*/_react.default.createElement(_TextBlock.default, {
      block: element,
      portableTextFeatures: portableTextFeatures
    }, children);

    var propsOrDefaultRendered = renderBlock ? renderBlock((0, _values.fromSlateValue)([element], element._type, _weakMaps.KEY_TO_VALUE_ELEMENT.get(editor))[0], portableTextFeatures.types.block, renderAttribs, () => textBlock, blockRef) : textBlock;
    return /*#__PURE__*/_react.default.createElement("div", _extends({}, attributes, {
      key: element._key,
      className: className
    }), /*#__PURE__*/_react.default.createElement(_DraggableBlock.DraggableBlock, {
      element: element,
      readOnly: readOnly,
      blockRef: blockRef
    }, /*#__PURE__*/_react.default.createElement("div", {
      ref: blockRef
    }, propsOrDefaultRendered)));
  }

  var type = portableTextFeatures.types.blockObjects.find(_type => _type.name === element._type);

  if (!type) {
    throw new Error("Could not find schema type for block element of _type ".concat(element._type));
  }

  if (debugRenders) {
    debug("Render ".concat(element._key, " (object block)"));
  }

  className = 'pt-block pt-object-block';
  var block = (0, _values.fromSlateValue)([element], portableTextFeatures.types.block.name, _weakMaps.KEY_TO_VALUE_ELEMENT.get(editor))[0];
  var renderedBlockFromProps = renderBlock && renderBlock(block, type, renderAttribs, defaultRender, blockRef);
  return /*#__PURE__*/_react.default.createElement("div", _extends({}, attributes, {
    key: element._key,
    className: className
  }), children, /*#__PURE__*/_react.default.createElement(_DraggableBlock.DraggableBlock, {
    element: element,
    readOnly: readOnly,
    blockRef: blockRef
  }, renderedBlockFromProps && /*#__PURE__*/_react.default.createElement("div", {
    ref: blockRef,
    contentEditable: false
  }, renderedBlockFromProps), !renderedBlockFromProps && /*#__PURE__*/_react.default.createElement(_index.DefaultBlockObject, {
    selected: selected
  }, defaultRender((0, _values.fromSlateValue)([element], portableTextFeatures.types.block.name, _weakMaps.KEY_TO_VALUE_ELEMENT.get(editor))[0]))));
};

exports.Element = Element;