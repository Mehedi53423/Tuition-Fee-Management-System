"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DraggableChild = void 0;

var _react = _interopRequireWildcard(require("react"));

var _slate = require("slate");

var _slateReact = require("@sanity/slate-react");

var _debug = require("../utils/debug");

var _weakMaps = require("../utils/weakMaps");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var debug = (0, _debug.debugWithName)('components:DraggableChild');

var DraggableChild = _ref => {
  var children = _ref.children,
      element = _ref.element,
      readOnly = _ref.readOnly;
  var editor = (0, _slateReact.useSlateStatic)();
  var dragGhostRef = (0, _react.useRef)();
  var isVoid = (0, _react.useMemo)(() => _slate.Editor.isVoid(editor, element), [editor, element]); // Note: this is called not for the dragging block, but for the targets when the block is dragged over them

  var handleDragOver = (0, _react.useCallback)(event => {
    var isMyDragOver = _weakMaps.IS_DRAGGING_CHILD_ELEMENT.get(editor);

    if (!isMyDragOver) {
      return;
    }

    debug('handle drag over');
    event.preventDefault(); // Needed to get the dropEffect showing

    event.dataTransfer.dropEffect = 'move'; // Find the range where the drop happened

    var range = _slateReact.ReactEditor.findEventRange(editor, event);

    if (range) {
      _weakMaps.IS_DRAGGING_ELEMENT_RANGE.set(editor, range);

      _slate.Transforms.select(editor, range);
    }
  }, [editor]); // Note: this is called for the dragging child

  var handleDragStart = (0, _react.useCallback)(event => {
    debug('Drag start');

    _weakMaps.IS_DRAGGING.set(editor, true);

    _weakMaps.IS_DRAGGING_CHILD_ELEMENT.set(editor, element);

    if (isVoid) {
      event.dataTransfer.effectAllowed = 'move'; // Specify dragImage so that single elements in the preview will not be the drag image,
      // but always the whole block preview itself.
      // Also clone it so that it will not be visually clipped by scroll-containers etc.

      var elm = event.currentTarget;

      if (elm instanceof HTMLElement) {
        var dragGhost = elm.cloneNode(true);
        dragGhostRef.current = dragGhost;
        dragGhost.style.width = "".concat(elm.clientWidth, "px");
        dragGhost.style.height = "".concat(elm.clientHeight, "px");
        dragGhost.style.position = 'absolute';
        dragGhost.style.top = '-99999px';
        dragGhost.style.left = '-99999px';

        if (document.body) {
          document.body.appendChild(dragGhost);
          var rect = elm.getBoundingClientRect();

          var _x = event.clientX - rect.left;

          var _y = event.clientY - rect.top;

          dragGhost.style.width = "".concat(rect.width, "px");
          dragGhost.style.height = "".concat(rect.height, "px");
          event.dataTransfer.setDragImage(dragGhost, _x, _y);
        }
      }
    }
  }, [editor, element, isVoid]);

  if (readOnly) {
    return children;
  }

  return /*#__PURE__*/_react.default.createElement("span", {
    draggable: isVoid,
    onDragStart: handleDragStart,
    onDragOver: handleDragOver
  }, children);
};

exports.DraggableChild = DraggableChild;