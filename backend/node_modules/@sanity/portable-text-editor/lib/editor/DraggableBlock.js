"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DraggableBlock = void 0;

var _react = _interopRequireWildcard(require("react"));

var _slate = require("slate");

var _slateReact = require("@sanity/slate-react");

var _debug = require("../utils/debug");

var _weakMaps = require("../utils/weakMaps");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var debug = (0, _debug.debugWithName)('components:DraggableBlock');
var debugRenders = false;

var DraggableBlock = _ref => {
  var children = _ref.children,
      element = _ref.element,
      readOnly = _ref.readOnly,
      blockRef = _ref.blockRef;
  var editor = (0, _slateReact.useSlateStatic)();
  var dragGhostRef = (0, _react.useRef)();

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isDragOver = _useState2[0],
      setIsDragOver = _useState2[1];

  var isVoid = (0, _react.useMemo)(() => _slate.Editor.isVoid(editor, element), [editor, element]);
  var isInline = (0, _react.useMemo)(() => _slate.Editor.isInline(editor, element), [editor, element]);

  var _useState3 = (0, _react.useState)(null),
      _useState4 = _slicedToArray(_useState3, 2),
      blockElement = _useState4[0],
      setBlockElement = _useState4[1];

  (0, _react.useEffect)(() => setBlockElement(blockRef ? blockRef.current : _slateReact.ReactEditor.toDOMNode(editor, element)), [editor, element, blockRef]); // Note: this is called not for the dragging block, but for the targets when the block is dragged over them

  var handleDragOver = (0, _react.useCallback)(event => {
    var isMyDragOver = _weakMaps.IS_DRAGGING_BLOCK_ELEMENT.get(editor); // debug('Drag over', blockElement)


    if (!isMyDragOver || !blockElement) {
      return;
    }

    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';

    _weakMaps.IS_DRAGGING_ELEMENT_TARGET.set(editor, element);

    var elementRect = blockElement.getBoundingClientRect();
    var offset = elementRect.top;
    var height = elementRect.height;
    var Y = event.pageY;
    var loc = Math.abs(offset - Y);
    var position = 'bottom';

    if (element === editor.children[0]) {
      position = 'top';
    } else if (loc < height / 2) {
      position = 'top';

      _weakMaps.IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position);
    } else {
      position = 'bottom';

      _weakMaps.IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position);
    }

    if (isMyDragOver === element) {
      event.dataTransfer.dropEffect = 'none';
      return;
    }

    setIsDragOver(true);
  }, [blockElement, editor, element]); // Note: this is called not for the dragging block, but for the targets when the block is dragged over them

  var handleDragLeave = (0, _react.useCallback)(() => {
    setIsDragOver(false);
  }, []); // Note: this is called for the dragging block

  var handleDragEnd = (0, _react.useCallback)(event => {
    var targetBlock = _weakMaps.IS_DRAGGING_ELEMENT_TARGET.get(editor);

    if (targetBlock) {
      _weakMaps.IS_DRAGGING.set(editor, false);

      event.preventDefault();
      event.stopPropagation();

      _weakMaps.IS_DRAGGING_ELEMENT_TARGET.delete(editor);

      if (dragGhostRef.current) {
        debug('Removing drag ghost');
        document.body.removeChild(dragGhostRef.current);
      }

      var _dragPosition = _weakMaps.IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor);

      _weakMaps.IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor);

      var targetPath = _slateReact.ReactEditor.findPath(editor, targetBlock);

      var myPath = _slateReact.ReactEditor.findPath(editor, element);

      var isBefore = _slate.Path.isBefore(myPath, targetPath);

      if (_dragPosition === 'bottom' && !isBefore) {
        // If it is already at the bottom, don't do anything.
        if (targetPath[0] >= editor.children.length - 1) {
          debug('target is already at the bottom, not moving');
          return;
        }

        var originalPath = targetPath;
        targetPath = _slate.Path.next(targetPath);
        debug("Adjusting targetPath from ".concat(JSON.stringify(originalPath), " to ").concat(JSON.stringify(targetPath)));
      }

      if (_dragPosition === 'top' && isBefore && targetPath[0] !== editor.children.length - 1) {
        var _originalPath = targetPath;
        targetPath = _slate.Path.previous(targetPath);
        debug("Adjusting targetPath from ".concat(JSON.stringify(_originalPath), " to ").concat(JSON.stringify(targetPath)));
      }

      if (_slate.Path.equals(targetPath, myPath)) {
        event.preventDefault();
        debug('targetPath and myPath is the same, not moving');
        return;
      }

      debug("Moving element ".concat(element._key, " from path ").concat(JSON.stringify(myPath), " to ").concat(JSON.stringify(targetPath), " (").concat(_dragPosition, ")"));

      _slate.Transforms.moveNodes(editor, {
        at: myPath,
        to: targetPath
      });

      editor.onChange();
      return;
    }

    debug('No target element, not doing anything');
  }, [editor, element]); // Note: this is called not for the dragging block, but for the drop target

  var handleDrop = (0, _react.useCallback)(event => {
    if (_weakMaps.IS_DRAGGING_BLOCK_ELEMENT.get(editor)) {
      debug('On drop (prevented)', element);
      event.preventDefault();
      event.stopPropagation();
      setIsDragOver(false);
    }
  }, [editor, element]); // Note: this is called for the dragging block

  var handleDrag = (0, _react.useCallback)(event => {
    if (!isVoid) {
      _weakMaps.IS_DRAGGING_BLOCK_ELEMENT.delete(editor);

      return;
    }

    _weakMaps.IS_DRAGGING.set(editor, true);

    _weakMaps.IS_DRAGGING_BLOCK_ELEMENT.set(editor, element);

    event.stopPropagation(); // Stop propagation so that leafs don't get this and take focus/selection!

    var target = event.target;

    if (target instanceof HTMLElement) {
      target.style.opacity = '1';
    }
  }, [editor, element, isVoid]); // Note: this is called for the dragging block

  var handleDragStart = (0, _react.useCallback)(event => {
    if (!isVoid || isInline) {
      debug('Not dragging block');

      _weakMaps.IS_DRAGGING_BLOCK_ELEMENT.delete(editor);

      _weakMaps.IS_DRAGGING.set(editor, false);

      return;
    }

    debug('Drag start');

    _weakMaps.IS_DRAGGING.set(editor, true);

    if (event.dataTransfer) {
      event.dataTransfer.setData('application/portable-text', 'something');
      event.dataTransfer.effectAllowed = 'move';
    } // Clone blockElement so that it will not be visually clipped by scroll-containers etc.
    // The application that uses the portable-text-editor may indicate the element used as
    // drag ghost by adding a truthy data attribute 'data-pt-drag-ghost-element' to a HTML element.


    if (blockElement && blockElement instanceof HTMLElement) {
      var dragGhost = blockElement.cloneNode(true);
      var customGhost = dragGhost.querySelector('[data-pt-drag-ghost-element]');

      if (customGhost) {
        dragGhost = customGhost;
      } // Set the `data-dragged` attribute so the consumer can style the element while itâ€™s dragged


      dragGhost.setAttribute('data-dragged', '');

      if (document.body) {
        dragGhostRef.current = dragGhost;
        dragGhost.style.position = 'absolute';
        dragGhost.style.left = '-99999px';
        dragGhost.style.boxSizing = 'border-box';
        document.body.appendChild(dragGhost);
        var rect = blockElement.getBoundingClientRect();
        var x = event.clientX - rect.left;
        var y = event.clientY - rect.top;
        dragGhost.style.width = "".concat(rect.width, "px");
        dragGhost.style.height = "".concat(rect.height, "px");
        event.dataTransfer.setDragImage(dragGhost, x, y);
      }
    }

    handleDrag(event);
  }, [blockElement, editor, handleDrag, isInline, isVoid]);

  var isDraggingOverFirstBlock = isDragOver && editor.children[0] === _weakMaps.IS_DRAGGING_ELEMENT_TARGET.get(editor);

  var isDraggingOverLastBlock = isDragOver && editor.children[editor.children.length - 1] === _weakMaps.IS_DRAGGING_ELEMENT_TARGET.get(editor);

  var dragPosition = _weakMaps.IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor);

  var isDraggingOverTop = isDraggingOverFirstBlock || isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition === 'top';
  var isDraggingOverBottom = isDraggingOverLastBlock || isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition === 'bottom';
  var dropIndicator = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement("div", {
    className: "pt-drop-indicator",
    style: {
      position: 'absolute',
      width: '100%',
      height: 1,
      borderBottom: '1px solid currentColor',
      zIndex: 5
    }
  }), []);

  if (readOnly) {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children);
  }

  if (debugRenders) {
    debug('render');
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    draggable: isVoid,
    onDragStart: handleDragStart,
    onDrag: handleDrag,
    onDragOver: handleDragOver,
    onDragLeave: handleDragLeave,
    onDragEnd: handleDragEnd,
    onDrop: handleDrop
  }, isDraggingOverTop && dropIndicator, children, isDraggingOverBottom && dropIndicator);
};

exports.DraggableBlock = DraggableBlock;