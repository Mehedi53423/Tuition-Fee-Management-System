"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWithSchemaTypes = createWithSchemaTypes;

var _slate = require("slate");

var _debug = require("../../utils/debug");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var debug = (0, _debug.debugWithName)('plugin:withSchemaTypes');
/**
 * This plugin makes sure that shema types are recognized properly by Slate as blocks, voids, inlines
 *
 */

function createWithSchemaTypes(portableTextFeatures) {
  return function withSchemaTypes(editor) {
    editor.isTextBlock = value => {
      return !editor.isVoid(value) && 'markDefs' in value && 'style' in value && 'children' in value && '_type' in value && portableTextFeatures.types.block.name === value._type;
    };

    editor.isTextSpan = value => {
      return !editor.isVoid(value) && 'text' in value && 'marks' in value && '_type' in value && portableTextFeatures.types.span.name === value._type;
    };

    editor.isListBlock = value => {
      return Boolean(editor.isTextBlock(value) && 'listItem' in value && 'level' in value && value.listItem && Number.isInteger(value.level));
    };

    editor.isVoid = element => {
      return portableTextFeatures.types.block.name !== element._type && (portableTextFeatures.types.blockObjects.map(obj => obj.name).includes(element._type) || portableTextFeatures.types.inlineObjects.map(obj => obj.name).includes(element._type));
    };

    editor.isInline = element => {
      var inlineSchemaTypes = portableTextFeatures.types.inlineObjects.map(obj => obj.name);
      return inlineSchemaTypes.includes(element._type) && '__inline' in element && element.__inline === true;
    }; // Extend Slate's default normalization to add _type span to span inserted after a inline void object


    var apply = editor.apply;

    editor.apply = op => {
      var isInsertTextWithoutType = op.type === 'insert_node' && op.path.length === 2 && _slate.Text.isText(op.node) && op.node._type === undefined;

      if (isInsertTextWithoutType) {
        var insertNodeOperation = op;

        var newNode = _objectSpread(_objectSpread({}, insertNodeOperation.node), {}, {
          _type: 'span'
        });

        op.node = newNode;
        debug('Setting span type to child without a type', op);
      }

      apply(op);
    };

    return editor;
  };
}