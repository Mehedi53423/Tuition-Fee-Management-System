"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWithInsertData = createWithInsertData;

var _slate = require("slate");

var _blockTools = require("@sanity/block-tools");

var _slateReact = require("@sanity/slate-react");

var _values = require("../../utils/values");

var _validateValue = require("../../utils/validateValue");

var _debug = require("../../utils/debug");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var debug = (0, _debug.debugWithName)('plugin:withInsertData');
/**
 * This plugin handles copy/paste in the editor
 *
 */

function createWithInsertData(change$, portableTextFeatures, keyGenerator) {
  return function withInsertData(editor) {
    var blockTypeName = portableTextFeatures.types.block.name;
    var spanTypeName = portableTextFeatures.types.span.name;

    var toPlainText = blocks => {
      return blocks.map(block => {
        var _portableTextFeatures2;

        if (block._type === blockTypeName) {
          return block.children.map(child => {
            var _portableTextFeatures;

            if (child._type === spanTypeName) {
              return child.text;
            }

            return "[".concat(((_portableTextFeatures = portableTextFeatures.types.inlineObjects.find(t => t.name === child._type)) === null || _portableTextFeatures === void 0 ? void 0 : _portableTextFeatures.title) || 'Object', "]");
          }).join('');
        }

        return "[".concat(((_portableTextFeatures2 = portableTextFeatures.types.blockObjects.find(t => t.name === block._type)) === null || _portableTextFeatures2 === void 0 ? void 0 : _portableTextFeatures2.title) || 'Object', "]");
      }).join('\n\n');
    };

    editor.setFragmentData = (data, originEvent) => {
      var selection = editor.selection;

      if (!selection) {
        return;
      }

      var _Range$edges = _slate.Range.edges(selection),
          _Range$edges2 = _slicedToArray(_Range$edges, 2),
          start = _Range$edges2[0],
          end = _Range$edges2[1];

      var startVoid = _slate.Editor.void(editor, {
        at: start.path
      });

      var endVoid = _slate.Editor.void(editor, {
        at: end.path
      });

      if (_slate.Range.isCollapsed(selection) && !startVoid) {
        return;
      } // Create a fake selection so that we can add a Base64-encoded copy of the
      // fragment to the HTML, to decode on future pastes.


      var domRange = _slateReact.ReactEditor.toDOMRange(editor, selection);

      var contents = domRange.cloneContents(); // COMPAT: If the end node is a void node, we need to move the end of the
      // range from the void node's spacer span, to the end of the void node's
      // content, since the spacer is before void's content in the DOM.

      if (endVoid) {
        var _endVoid = _slicedToArray(endVoid, 1),
            voidNode = _endVoid[0];

        var r = domRange.cloneRange();

        var domNode = _slateReact.ReactEditor.toDOMNode(editor, voidNode);

        r.setEndAfter(domNode);
        contents = r.cloneContents();
      } // Remove any zero-width space spans from the cloned DOM so that they don't
      // show up elsewhere when pasted.


      Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(zw => {
        var isNewline = zw.getAttribute('data-slate-zero-width') === 'n';
        zw.textContent = isNewline ? '\n' : '';
      }); // Clean up the clipboard HTML for editor spesific attributes

      Array.from(contents.querySelectorAll('*')).forEach(elm => {
        elm.removeAttribute('contentEditable');
        elm.removeAttribute('data-slate-inline');
        elm.removeAttribute('data-slate-leaf');
        elm.removeAttribute('data-slate-node');
        elm.removeAttribute('data-slate-spacer');
        elm.removeAttribute('data-slate-string');
        elm.removeAttribute('data-slate-zero-width');
        elm.removeAttribute('draggable');

        for (var key in elm.attributes) {
          if (elm.hasAttribute(key)) {
            elm.removeAttribute(key);
          }
        }
      });
      var div = contents.ownerDocument.createElement('div');
      div.appendChild(contents);
      div.setAttribute('hidden', 'true');
      contents.ownerDocument.body.appendChild(div);
      var asHTML = div.innerHTML;
      contents.ownerDocument.body.removeChild(div);
      var fragment = editor.getFragment();
      var portableText = (0, _values.fromSlateValue)(fragment, portableTextFeatures.types.block.name);
      var asJSON = JSON.stringify(portableText);
      var asPlainText = toPlainText(portableText);
      data.clearData();
      data.setData('text/plain', asPlainText);
      data.setData('text/html', asHTML);
      data.setData('application/json', asJSON);
      data.setData('application/x-portable-text', asJSON);
      debug('text', asPlainText);
      data.setData('application/x-portable-text-event-origin', originEvent || 'external');
      debug('Set fragment data', asJSON, asHTML);
    };

    editor.insertPortableTextData = data => {
      if (!editor.selection) {
        return false;
      }

      var pText = data.getData('application/x-portable-text');
      var origin = data.getData('application/x-portable-text-event-origin');
      debug("Inserting portable text from ".concat(origin, " event"), pText);

      if (pText) {
        var parsed = JSON.parse(pText);

        if (Array.isArray(parsed) && parsed.length > 0) {
          var slateValue = regenerateKeys(editor, (0, _values.toSlateValue)(parsed, {
            portableTextFeatures
          }), keyGenerator, spanTypeName); // Validate the result

          var validation = (0, _validateValue.validateValue)(parsed, portableTextFeatures, keyGenerator); // Bail out if it's not valid

          if (!validation.valid) {
            var _validation$resolutio;

            var errorDescription = "".concat((_validation$resolutio = validation.resolution) === null || _validation$resolutio === void 0 ? void 0 : _validation$resolutio.description);
            change$.next({
              type: 'error',
              level: 'warning',
              name: 'pasteError',
              description: errorDescription,
              data: validation
            });
            debug('Invalid insert result', validation);
            return false;
          }

          mixMarkDefs(editor, slateValue);
          editor.insertFragment(slateValue);
          editor.onChange();
          return true;
        }
      }

      return false;
    };

    editor.insertTextOrHTMLData = data => {
      if (!editor.selection) {
        debug('No selection, not inserting');
        return false;
      }

      change$.next({
        type: 'loading',
        isLoading: true
      }); // This could potentially take some time

      var html = data.getData('text/html');
      var text = data.getData('text/plain');

      if (html || text) {
        debug('Inserting data', data);
        var portableText;
        var fragment;
        var insertedType;

        if (html) {
          portableText = (0, _blockTools.htmlToBlocks)(html, portableTextFeatures.types.portableText).map(block => (0, _blockTools.normalizeBlock)(block, {
            blockTypeName
          }));
          fragment = (0, _values.toSlateValue)(portableText, {
            portableTextFeatures
          });
          insertedType = 'HTML';
        } else {
          // plain text
          var blocks = escapeHtml(text).split(/\n{2,}/).map(line => line ? "<p>".concat(line.replace(/(?:\r\n|\r|\n)/g, '<br/>'), "</p>") : '<p></p>').join('');
          var textToHtml = "<html><body>".concat(blocks, "</body></html>");
          portableText = (0, _blockTools.htmlToBlocks)(textToHtml, portableTextFeatures.types.portableText).map(block => (0, _blockTools.normalizeBlock)(block, {
            blockTypeName
          }));
          fragment = (0, _values.toSlateValue)(portableText, {
            portableTextFeatures
          });
          insertedType = 'text';
        } // Validate the result


        var validation = (0, _validateValue.validateValue)(portableText, portableTextFeatures, keyGenerator); // Bail out if it's not valid

        if (!validation.valid) {
          var _validation$resolutio2;

          var errorDescription = "Could not validate the resulting portable text to insert.\n".concat((_validation$resolutio2 = validation.resolution) === null || _validation$resolutio2 === void 0 ? void 0 : _validation$resolutio2.description, "\nTry to insert as plain text (shift-paste) instead.");
          change$.next({
            type: 'error',
            level: 'warning',
            name: 'pasteError',
            description: errorDescription,
            data: validation
          });
          debug('Invalid insert result', validation);
          return false;
        }

        debug("Inserting ".concat(insertedType, " fragment at ").concat(JSON.stringify(editor.selection)));
        mixMarkDefs(editor, fragment);
        editor.insertFragment(fragment);
        editor.onChange();
        change$.next({
          type: 'loading',
          isLoading: false
        });
        return true;
      }

      change$.next({
        type: 'loading',
        isLoading: false
      });
      return false;
    };

    editor.insertData = data => {
      if (!editor.insertPortableTextData(data)) {
        editor.insertTextOrHTMLData(data);
      }
    };

    editor.insertFragmentData = data => {
      var fragment = data.getData('application/x-portable-text');

      if (fragment) {
        var parsed = JSON.parse(fragment);
        editor.insertFragment(parsed);
        return true;
      }

      return false;
    };

    return editor;
  };
}

var entityMap = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;',
  '/': '&#x2F;',
  '`': '&#x60;',
  '=': '&#x3D;'
};

function escapeHtml(str) {
  return String(str).replace(/[&<>"'`=/]/g, s => entityMap[s]);
}

function regenerateKeys(editor, fragment, keyGenerator, spanTypeName) {
  return fragment.map(node => {
    var newNode = _objectSpread({}, node); // Ensure the copy has new keys


    if (editor.isTextBlock(newNode)) {
      newNode.markDefs = newNode.markDefs.map(def => {
        var oldKey = def._key;
        var newKey = keyGenerator();

        if (Array.isArray(newNode.children)) {
          newNode.children = newNode.children.map(child => child._type === spanTypeName && _slate.Text.isText(child) ? _objectSpread(_objectSpread({}, child), {}, {
            marks: child.marks && child.marks.includes(oldKey) ? // eslint-disable-next-line max-nested-callbacks
            [...child.marks].filter(mark => mark !== oldKey).concat(newKey) : child.marks
          }) : child);
        }

        return _objectSpread(_objectSpread({}, def), {}, {
          _key: newKey
        });
      });
    }

    var nodeWithNewKeys = _objectSpread(_objectSpread({}, newNode), {}, {
      _key: keyGenerator()
    });

    if (editor.isTextBlock(nodeWithNewKeys)) {
      nodeWithNewKeys.children = nodeWithNewKeys.children.map(child => _objectSpread(_objectSpread({}, child), {}, {
        _key: keyGenerator()
      }));
    }

    return nodeWithNewKeys;
  });
}

function mixMarkDefs(editor, fragment) {
  if (!editor.selection) {
    return false;
  }

  var _Editor$node = _slate.Editor.node(editor, editor.selection, {
    depth: 1
  }),
      _Editor$node2 = _slicedToArray(_Editor$node, 2),
      focusBlock = _Editor$node2[0],
      focusPath = _Editor$node2[1];

  if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {
    var markDefs = focusBlock.markDefs;
    debug('Mixing markDefs of focusBlock and fragments[0] block', markDefs, fragment[0].markDefs); // As the first block will be inserted into another block (potentially), mix those markDefs

    _slate.Transforms.setNodes(editor, {
      markDefs: [...fragment[0].markDefs, ...markDefs]
    }, {
      at: focusPath,
      mode: 'lowest',
      voids: false
    });

    return true;
  }

  return false;
}