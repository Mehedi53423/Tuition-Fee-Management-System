"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWithPatches = createWithPatches;

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _debounce2 = _interopRequireDefault(require("lodash/debounce"));

var DMP = _interopRequireWildcard(require("diff-match-patch"));

var _slate = require("slate");

var _types = require("@sanity/types");

var _PatchEvent = require("../../patch/PatchEvent");

var _values = require("../../utils/values");

var _debug = require("../../utils/debug");

var _withoutPatching = require("../../utils/withoutPatching");

var _weakMaps = require("../../utils/weakMaps");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var debug = (0, _debug.debugWithName)('plugin:withPatches'); // eslint-disable-next-line new-cap

var dmp = new DMP.diff_match_patch();
var THROTTLE_EDITOR_MS = 500;

function createWithPatches(_ref, change$, portableTextFeatures, incomingPatches$) {
  var insertNodePatch = _ref.insertNodePatch,
      insertTextPatch = _ref.insertTextPatch,
      mergeNodePatch = _ref.mergeNodePatch,
      moveNodePatch = _ref.moveNodePatch,
      removeNodePatch = _ref.removeNodePatch,
      removeTextPatch = _ref.removeTextPatch,
      setNodePatch = _ref.setNodePatch,
      splitNodePatch = _ref.splitNodePatch;
  var previousChildren;
  var previousSelection;
  return function withPatches(editor) {
    _withoutPatching.PATCHING.set(editor, true);

    previousChildren = editor.children; // This will cancel the throttle when the user is not producing any patches for a short time

    var cancelThrottleDebounced = (0, _debounce2.default)(() => {
      change$.next({
        type: 'throttle',
        throttle: false
      });
    }, THROTTLE_EDITOR_MS); // Inspect incoming patches and adjust editor selection accordingly.

    if (incomingPatches$) {
      incomingPatches$.subscribe(patch => {
        debug("Handling incoming patch ".concat(JSON.stringify(patch)));
        debug("Selection is ".concat(JSON.stringify(previousSelection)));
        debug("Adjusting selection for patch ".concat(patch.type));
        adjustSelection(editor, patch, previousChildren, previousSelection, portableTextFeatures);
      });
    }

    var apply = editor.apply;

    editor.apply = operation => {
      var patches = []; // The previous value is needed to figure out the _key of deleted nodes. The editor.children would no
      // longer contain that information if the node is already deleted.
      // debug('setting previous children', operation, editor.children)

      previousChildren = editor.children;
      var editorWasEmpty = (0, _values.isEqualToEmptyEditor)(previousChildren, portableTextFeatures); // Apply the operation

      apply(operation);
      previousSelection = editor.selection;

      if (!(0, _withoutPatching.isPatching)(editor)) {
        debug("Editor is not producing patch for operation ".concat(operation.type), operation);
        return editor;
      }

      if (editorWasEmpty && operation.type !== 'set_selection') {
        patches = [(0, _PatchEvent.setIfMissing)(previousChildren, [])];
      }

      switch (operation.type) {
        case 'insert_text':
          patches = [...patches, ...insertTextPatch(editor, operation, previousChildren)];
          break;

        case 'remove_text':
          patches = [...patches, ...removeTextPatch(editor, operation, previousChildren)];
          break;

        case 'remove_node':
          patches = [...patches, ...removeNodePatch(editor, operation, previousChildren)];
          break;

        case 'split_node':
          patches = [...patches, ...splitNodePatch(editor, operation, previousChildren)];
          break;

        case 'insert_node':
          patches = [...patches, ...insertNodePatch(editor, operation, previousChildren)];
          break;

        case 'set_node':
          patches = [...patches, ...setNodePatch(editor, operation, previousChildren)];
          break;

        case 'merge_node':
          patches = [...patches, ...mergeNodePatch(editor, operation, previousChildren)];
          break;

        case 'move_node':
          patches = [...patches, ...moveNodePatch(editor, operation, previousChildren)];
          break;

        case 'set_selection':
        default: // Do nothing

      } // Unset the value if editor has become empty


      if ((0, _values.isEqualToEmptyEditor)(editor.children, portableTextFeatures) && operation.type !== 'set_selection') {
        patches.push((0, _PatchEvent.unset)([]));
        change$.next({
          type: 'unset',
          previousValue: (0, _values.fromSlateValue)(previousChildren, portableTextFeatures.types.block.name, _weakMaps.KEY_TO_VALUE_ELEMENT.get(editor))
        });
      }

      if (patches.length > 0) {
        // Signal throttling
        change$.next({
          type: 'throttle',
          throttle: true
        }); // Emit all patches

        patches.forEach(patch => {
          change$.next({
            type: 'patch',
            patch
          });
        });
        cancelThrottleDebounced();
      }

      return editor;
    };

    return editor;
  };
}

function adjustSelection(editor, patch, previousChildren, previousSelection, portableTextFeatures) {
  var selection = editor.selection;

  if (selection === null) {
    debug('No selection, not adjusting selection');
    return;
  }

  var newSelection = selection; // Text patches on same line

  if (patch.type === 'diffMatchPatch') {
    var _findBlockAndIndexFro = (0, _values.findBlockAndIndexFromPath)(patch.path[0], editor.children),
        _findBlockAndIndexFro2 = _slicedToArray(_findBlockAndIndexFro, 2),
        block = _findBlockAndIndexFro2[0],
        blockIndex = _findBlockAndIndexFro2[1];

    var _ref2 = block ? (0, _values.findChildAndIndexFromPath)(patch.path[2], block) : [undefined, -1],
        _ref3 = _slicedToArray(_ref2, 2),
        childIndex = _ref3[1];

    var onSameBlock = selection.focus.path[0] === blockIndex && selection.focus.path[1] === childIndex;

    if (onSameBlock) {
      var parsed = dmp.patch_fromText(patch.value)[0];

      if (parsed) {
        var testString = '';

        var _iterator = _createForOfIteratorHelper(parsed.diffs),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var diff = _step.value;

            // eslint-disable-next-line max-depth
            if (diff[0] === 0) {
              testString += diff[1];
            } else {
              break;
            }
          } // This thing is exotic but actually works!

        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        var isBeforeUserSelection = parsed.start1 !== null && parsed.start1 + testString.length < selection.focus.offset && parsed.start1 + testString.length < selection.anchor.offset;
        var distance = parsed.length2 - parsed.length1;

        if (isBeforeUserSelection) {
          debug('Adjusting selection for diffMatchPatch on same line'); // debug(
          //   `Adjusting selection for diffMatchPatch on same line ${JSON.stringify({
          //     parsed,
          //     distance,
          //     isBeforeUserSelection,
          //     isRemove: parsed.diffs.some(diff => diff[0] === -1),
          //     testString
          //   })}`
          // )

          newSelection = _objectSpread({}, selection);
          newSelection.focus = _objectSpread({}, selection.focus);
          newSelection.anchor = _objectSpread({}, selection.anchor);
          newSelection.anchor.offset += distance;
          newSelection.focus.offset += distance;
        } // TODO: account for intersecting selections!

      }
    }
  } // Unset patches on children within a block


  if (patch.type === 'unset' && patch.path.length === 3) {
    var _findBlockAndIndexFro3 = (0, _values.findBlockAndIndexFromPath)(patch.path[0], previousChildren),
        _findBlockAndIndexFro4 = _slicedToArray(_findBlockAndIndexFro3, 2),
        oldBlock = _findBlockAndIndexFro4[0],
        oldBlockIndex = _findBlockAndIndexFro4[1];

    var _ref4 = oldBlock ? (0, _values.findChildAndIndexFromPath)(patch.path[2], oldBlock) : [undefined, -1],
        _ref5 = _slicedToArray(_ref4, 2),
        _childIndex = _ref5[1];

    if (oldBlock && selection.focus.path[0] === oldBlockIndex && selection.focus.path[1] >= _childIndex && _childIndex > -1) {
      var prevIndexOrLastIndex = _childIndex === -1 || oldBlock.children.length === 1 ? oldBlock.children.length - 1 : _childIndex;
      var prevOrLastChild = oldBlock.children[prevIndexOrLastIndex];
      var prevText = _slate.Text.isText(prevOrLastChild) && prevOrLastChild.text || '';
      newSelection = _objectSpread({}, selection);
      var beforePrevOrLast = oldBlock.children[Math.max(0, prevIndexOrLastIndex - 1)];
      var textBeforePrevOrLast = _slate.Text.isText(beforePrevOrLast) ? beforePrevOrLast.text : '';
      var textBefore = _slate.Text.isText(beforePrevOrLast) ? beforePrevOrLast.text : '';

      if (_slate.Path.isAfter(selection.anchor.path, [oldBlockIndex, prevIndexOrLastIndex]) || _slate.Path.endsAt(selection.anchor.path, [oldBlockIndex, prevIndexOrLastIndex])) {
        newSelection.anchor = _objectSpread({}, selection.anchor);
        newSelection.anchor.path = [newSelection.anchor.path[0], Math.max(0, prevIndexOrLastIndex - 1)];
        newSelection.anchor.offset = textBefore.length + textBeforePrevOrLast.length;
      }

      if (_slate.Path.isAfter(selection.focus.path, [oldBlockIndex, prevIndexOrLastIndex]) || _slate.Path.endsAt(selection.focus.path, [oldBlockIndex, prevIndexOrLastIndex])) {
        newSelection.focus = _objectSpread({}, selection.focus);
        newSelection.focus.path = [newSelection.focus.path[0], Math.max(0, prevIndexOrLastIndex - 1)];
        newSelection.focus.offset = textBefore.length + textBeforePrevOrLast.length;
      }

      if (_slate.Path.isAfter(selection.anchor.path, [oldBlockIndex, prevIndexOrLastIndex])) {
        newSelection.anchor = _objectSpread({}, selection.anchor);
        newSelection.anchor.path = [oldBlockIndex, prevIndexOrLastIndex];
        newSelection.anchor.offset = selection.anchor.offset + prevText.length;
      }

      if (_slate.Path.isAfter(selection.focus.path, [oldBlockIndex, prevIndexOrLastIndex])) {
        newSelection.focus = _objectSpread({}, selection.focus);
        newSelection.focus.path = [oldBlockIndex, prevIndexOrLastIndex];
        newSelection.focus.offset = selection.focus.offset + prevText.length;
      }

      if (!(0, _isEqual2.default)(newSelection, selection)) {
        debug('adjusting selection for unset block child');
      }
    }
  } // Unset patches on block level


  if (patch.type === 'unset' && patch.path.length === 1) {
    var blkAndIdx = (0, _values.findBlockAndIndexFromPath)(patch.path[0], previousChildren);

    var _blkAndIdx = _slicedToArray(blkAndIdx, 2),
        _blockIndex = _blkAndIdx[1];

    var _blkAndIdx2 = _slicedToArray(blkAndIdx, 1),
        _block = _blkAndIdx2[0]; // Deal with editing being done above the removed block


    if (_block && _blockIndex !== undefined && previousSelection && !_slate.Path.isAfter(selection.anchor.path, [_blockIndex]) && !_slate.Path.isAfter(selection.focus.path, [_blockIndex])) {
      newSelection = _objectSpread({}, previousSelection);
      newSelection.anchor = _objectSpread({}, previousSelection.anchor);
      newSelection.anchor.path = [Math.max(0, previousSelection.anchor.path[0] - 1), ...previousSelection.anchor.path.slice(1)];
      newSelection.focus = _objectSpread({}, previousSelection.focus);
      newSelection.focus.path = [Math.max(0, previousSelection.focus.path[0] - 1), ...previousSelection.focus.path.slice(1)];
    } // Deal with editing being done below or on the removed block


    if (_block && _blockIndex !== undefined && !_slate.Path.isBefore(selection.anchor.path, [_blockIndex]) && !_slate.Path.isBefore(selection.focus.path, [_blockIndex])) {
      var isTextBlock = _block._type === portableTextFeatures.types.block.name;
      var addToOffset = isTextBlock && (0, _isEqual2.default)(selection.anchor.path[0], _blockIndex) && (0, _isEqual2.default)(selection.focus.path[0], _blockIndex) ? _block.children.map(child => _slate.Text.isText(child) && child._type === portableTextFeatures.types.span.name && child.text).filter(Boolean).join('').length + 1 : 0;

      if (selection.anchor.path[0] === _blockIndex && selection.focus.path[0] === _blockIndex) {
        _blockIndex = Math.max(0, selection.focus.path[0] - 1);
      }

      if (_slate.Path.isAfter(selection.anchor.path, [_blockIndex])) {
        newSelection = _objectSpread({}, selection);
        newSelection.anchor = _objectSpread({}, newSelection.anchor);
        newSelection.anchor.path = [Math.max(0, newSelection.anchor.path[0] - 1), ...newSelection.anchor.path.slice(1)];
        newSelection.anchor.offset += addToOffset;
      }

      if (_slate.Path.isAfter(selection.focus.path, [_blockIndex])) {
        newSelection = _objectSpread({}, newSelection || selection);
        newSelection.focus = _objectSpread({}, newSelection.focus);
        newSelection.focus.path = [Math.max(0, newSelection.focus.path[0] - 1), ...newSelection.focus.path.slice(1)];
        newSelection.focus.offset += addToOffset;
      }
    }
  } // Unset patches on child level


  if (patch.type === 'unset' && patch.path.length > 2) {
    var _blkAndIdx3 = (0, _values.findBlockAndIndexFromPath)(patch.path[0], previousChildren);

    var _blkAndIdx4 = _slicedToArray(_blkAndIdx3, 2),
        _blockIndex2 = _blkAndIdx4[1];

    var _blkAndIdx5 = _slicedToArray(_blkAndIdx3, 1),
        _block2 = _blkAndIdx5[0];

    var _isTextBlock = _block2 && _block2._type === portableTextFeatures.types.block.name;

    var first = patch.path[0];
    var offset = _isTextBlock && previousSelection && (0, _types.isKeySegment)(first) && first._key === _block2._key && (previousSelection === null || previousSelection === void 0 ? void 0 : previousSelection.anchor.path[0]) === _blockIndex2 && (previousSelection === null || previousSelection === void 0 ? void 0 : previousSelection.focus.path[0]) === _blockIndex2 ? _block2.children.map((child, index) => previousSelection && index < previousSelection.focus.path[1] && index < previousSelection.anchor.path[1] && _slate.Text.isText(child) && child._type === portableTextFeatures.types.span.name && child.text).filter(Boolean).join('').length : 0;

    if (offset && previousSelection) {
      newSelection = _objectSpread({}, selection);
      newSelection.anchor = _objectSpread({}, newSelection.anchor);
      newSelection.focus = _objectSpread({}, newSelection.focus);
      newSelection.anchor.offset = offset + previousSelection.anchor.offset;
      newSelection.focus.offset = offset + previousSelection.focus.offset;
    }
  } // Insert patches on block level


  if (patch.type === 'insert' && patch.path.length === 1) {
    var _findBlockAndIndexFro5 = (0, _values.findBlockAndIndexFromPath)(patch.path[0], editor.children),
        _findBlockAndIndexFro6 = _slicedToArray(_findBlockAndIndexFro5, 2),
        _block3 = _findBlockAndIndexFro6[0],
        _blockIndex3 = _findBlockAndIndexFro6[1];

    if (_block3 && typeof _blockIndex3 !== 'undefined') {
      newSelection = _objectSpread({}, selection);

      if (_slate.Path.isAfter(selection.anchor.path, [_blockIndex3])) {
        newSelection.anchor = _objectSpread({}, selection.anchor);
        newSelection.anchor.path = [newSelection.anchor.path[0] + patch.items.length, ...newSelection.anchor.path.slice(1)];
      }

      if (_slate.Path.isAfter(selection.focus.path, [_blockIndex3])) {
        newSelection.focus = _objectSpread({}, selection.focus);
        newSelection.focus.path = [newSelection.focus.path[0] + patch.items.length, ...newSelection.focus.path.slice(1)];
      }
    }
  } // Insert patches on block children level


  if (patch.type === 'insert' && patch.path.length === 3) {
    var _findBlockAndIndexFro7 = (0, _values.findBlockAndIndexFromPath)(patch.path[0], editor.children),
        _findBlockAndIndexFro8 = _slicedToArray(_findBlockAndIndexFro7, 2),
        _block4 = _findBlockAndIndexFro8[0],
        _blockIndex4 = _findBlockAndIndexFro8[1];

    var _ref6 = _block4 ? (0, _values.findChildAndIndexFromPath)(patch.path[2], _block4) : [undefined, -1],
        _ref7 = _slicedToArray(_ref6, 2),
        _childIndex2 = _ref7[1];

    if (selection.focus.path[0] === _blockIndex4 && selection.focus.path[1] === _childIndex2) {
      var nextIndex = _childIndex2 + patch.items.length;
      var iBlock = editor.children[_blockIndex4];
      var blockChildren = _slate.Element.isElement(iBlock) && iBlock.children;
      var nextBlock = editor.children[_blockIndex4 + 1];
      var item = patch.items[0];
      var nextChild = blockChildren && blockChildren[nextIndex];
      var isSplitOperation = !nextChild && _slate.Editor.isBlock(editor, nextBlock) && nextBlock.children && nextBlock.children[0] && typeof nextBlock.children[0]._key === 'string' && (0, _isEqual2.default)(nextBlock.children[0]._key, item._key);

      var _Editor$node = _slate.Editor.node(editor, selection),
          _Editor$node2 = _slicedToArray(_Editor$node, 1),
          node = _Editor$node2[0];

      var nodeText = _slate.Text.isText(node) && node.text;

      if (nodeText && selection.focus.offset >= nodeText.length) {
        if (!isSplitOperation) {
          newSelection = _objectSpread({}, selection);
          newSelection.focus = _objectSpread({}, selection.focus);
          newSelection.anchor = _objectSpread({}, selection.anchor);
          newSelection.anchor.path = _slate.Path.next(newSelection.anchor.path);
          newSelection.anchor.offset = nodeText.length - newSelection.anchor.offset;
          newSelection.focus.path = _slate.Path.next(newSelection.focus.path);
          newSelection.focus.offset = nodeText.length - newSelection.focus.offset;
          editor.selection = newSelection;
        } else if (selection.focus.offset >= nodeText.length) {
          debug('adjusting selection for split node');
          newSelection = _objectSpread({}, selection);
          newSelection.focus = _objectSpread({}, selection.focus);
          newSelection.anchor = _objectSpread({}, selection.anchor);
          newSelection.anchor.path = [_blockIndex4 + 1, 0];
          newSelection.anchor.offset = selection.anchor.offset - nodeText.length || 0;
          newSelection.focus.path = [_blockIndex4 + 1, 0];
          newSelection.focus.offset = selection.focus.offset - nodeText.length || 0;
        }
      }
    }
  }

  if ((0, _isEqual2.default)(newSelection, editor.selection)) {
    debug('Selection is the same, not adjusting');
    return;
  }

  _slate.Transforms.select(editor, newSelection); // editor.onChange()

}