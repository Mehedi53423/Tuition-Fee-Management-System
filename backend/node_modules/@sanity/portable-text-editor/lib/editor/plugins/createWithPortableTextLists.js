"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWithPortableTextLists = createWithPortableTextLists;

var _slate = require("slate");

var _debug = require("../../utils/debug");

var _excluded = ["listItem", "level"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var debug = (0, _debug.debugWithName)('plugin:withPortableTextLists');
var MAX_LIST_LEVEL = 10;

function createWithPortableTextLists(portableTextFeatures) {
  return function withPortableTextLists(editor) {
    editor.pteToggleListItem = listItemStyle => {
      var isActive = editor.pteHasListStyle(listItemStyle);

      if (isActive) {
        debug("Remove list item '".concat(listItemStyle, "'"));
        editor.pteUnsetListItem(listItemStyle);
      } else {
        debug("Add list item '".concat(listItemStyle, "'"));
        editor.pteSetListItem(listItemStyle);
      }
    };

    editor.pteUnsetListItem = listItemStyle => {
      if (!editor.selection) {
        return;
      }

      var selectedBlocks = [..._slate.Editor.nodes(editor, {
        at: editor.selection,
        match: node => _slate.Element.isElement(node) && node._type === portableTextFeatures.types.block.name
      })];
      selectedBlocks.forEach(_ref => {
        var _ref2 = _slicedToArray(_ref, 2),
            node = _ref2[0],
            path = _ref2[1];

        if (editor.isListBlock(node)) {
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          var listItem = node.listItem,
              level = node.level,
              rest = _objectWithoutProperties(node, _excluded);

          var newNode = _objectSpread(_objectSpread({}, rest), {}, {
            listItem: undefined,
            level: undefined
          });

          debug("Unsetting list '".concat(listItemStyle, "'"));

          _slate.Transforms.setNodes(editor, newNode, {
            at: path
          });
        }
      });
    };

    editor.pteSetListItem = listItemStyle => {
      if (!editor.selection) {
        return;
      }

      var selectedBlocks = [..._slate.Editor.nodes(editor, {
        at: editor.selection,
        match: node => editor.isTextBlock(node)
      })];
      selectedBlocks.forEach(_ref3 => {
        var _ref4 = _slicedToArray(_ref3, 2),
            node = _ref4[0],
            path = _ref4[1];

        debug("Setting list '".concat(listItemStyle, "'"));

        _slate.Transforms.setNodes(editor, _objectSpread(_objectSpread({}, node), {}, {
          level: 1,
          listItem: listItemStyle || portableTextFeatures.lists[0] && portableTextFeatures.lists[0].value
        }), {
          at: path
        });
      });
    };

    editor.pteEndList = () => {
      if (!editor.selection) {
        return false;
      }

      var selectedBlocks = [..._slate.Editor.nodes(editor, {
        at: editor.selection,
        match: node => _slate.Element.isElement(node) && editor.isListBlock(node) && node.children.length === 1 && _slate.Text.isText(node.children[0]) && node.children[0].text === ''
      })];

      if (selectedBlocks.length === 0) {
        return false;
      }

      selectedBlocks.forEach(_ref5 => {
        var _ref6 = _slicedToArray(_ref5, 2),
            node = _ref6[0],
            path = _ref6[1];

        if (_slate.Element.isElement(node)) {
          debug('Unset list');

          _slate.Transforms.setNodes(editor, _objectSpread(_objectSpread({}, node), {}, {
            level: undefined,
            listItem: undefined
          }), {
            at: path
          });
        }
      });
      return true; // Note: we are exiting the plugin chain by not returning editor (or hotkey plugin 'enter' will fire)
    };

    editor.pteIncrementBlockLevels = reverse => {
      if (!editor.selection) {
        return false;
      }

      var selectedBlocks = [..._slate.Editor.nodes(editor, {
        at: editor.selection,
        match: node => !!editor.isListBlock(node)
      })];

      if (selectedBlocks.length === 0) {
        return false;
      }

      selectedBlocks.forEach(_ref7 => {
        var _ref8 = _slicedToArray(_ref7, 2),
            node = _ref8[0],
            path = _ref8[1];

        if (editor.isListBlock(node)) {
          var level = node.level || 1;

          if (reverse) {
            level--;
            debug('Decrementing list level', Math.min(MAX_LIST_LEVEL, Math.max(1, level)));
          } else {
            level++;
            debug('Incrementing list level', Math.min(MAX_LIST_LEVEL, Math.max(1, level)));
          }

          _slate.Transforms.setNodes(editor, {
            level: Math.min(MAX_LIST_LEVEL, Math.max(1, level))
          }, {
            at: path
          });
        }
      });
      return true;
    };

    editor.pteHasListStyle = listStyle => {
      if (!editor.selection) {
        return false;
      }

      var selectedBlocks = [..._slate.Editor.nodes(editor, {
        at: editor.selection,
        match: node => editor.isListBlock(node) && node.listItem === listStyle
      })];

      if (selectedBlocks.length > 0) {
        return true;
      }

      return false;
    };

    return editor;
  };
}