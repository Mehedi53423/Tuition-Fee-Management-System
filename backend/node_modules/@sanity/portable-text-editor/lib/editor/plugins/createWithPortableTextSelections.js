"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWithPortableTextSelections = createWithPortableTextSelections;

var _debug = require("../../utils/debug");

var _ranges = require("../../utils/ranges");

var _weakMaps = require("../../utils/weakMaps");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var debug = (0, _debug.debugWithName)('plugin:withPortableTextSelections'); // This plugin will make sure that we emit a PT selection if slateEditor.onChange is called.

function createWithPortableTextSelections(change$) {
  return function withPortableTextSelections(editor) {
    var emitSelection = () => {
      var ptRange = null;

      if (editor.selection) {
        var existing = _weakMaps.SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);

        if (existing) {
          ptRange = existing;
        } else {
          ptRange = (0, _ranges.toPortableTextRange)(editor, editor.selection);
        }

        _weakMaps.SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange);
      }

      if (ptRange) {
        debug("Emitting selection ".concat(JSON.stringify(ptRange)));
        change$.next({
          type: 'selection',
          selection: _objectSpread({}, ptRange)
        });
      } else {
        change$.next({
          type: 'selection',
          selection: null
        });
      }
    };

    var onChange = editor.onChange;

    editor.onChange = () => {
      onChange();
      emitSelection();
    };

    return editor;
  };
}