"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withPortableText = void 0;

var _operationToPatches = require("../utils/operationToPatches");

var _debug = require("../utils/debug");

var _plugins = require("./plugins");

var debug = (0, _debug.debugWithName)('createPortableTextEditor');

var disablePlugin = name => {
  debug("Editor plugin '".concat(name, "' is disabled")); // This is the signature of a minimal Slate plugin

  return editor => {
    // Do some transformations here...
    return editor; // Return void to stop the plugin chain here
  };
};

var withPortableText = (editor, options) => {
  var e = editor;
  var portableTextFeatures = options.portableTextFeatures,
      keyGenerator = options.keyGenerator,
      change$ = options.change$,
      maxBlocks = options.maxBlocks,
      incomingPatches$ = options.incomingPatches$,
      readOnly = options.readOnly;
  var operationToPatches = (0, _operationToPatches.createOperationToPatches)(portableTextFeatures);
  var withObjectKeys = (0, _plugins.createWithObjectKeys)(portableTextFeatures, keyGenerator);
  var withSchemaTypes = (0, _plugins.createWithSchemaTypes)(portableTextFeatures);
  var withPatches = readOnly ? disablePlugin('withPatches') : (0, _plugins.createWithPatches)(operationToPatches, change$, portableTextFeatures, incomingPatches$);
  var withMaxBlocks = maxBlocks && maxBlocks > 0 ? (0, _plugins.createWithMaxBlocks)(maxBlocks) : disablePlugin('withMaxBlocks');
  var withPortableTextLists = (0, _plugins.createWithPortableTextLists)(portableTextFeatures);
  var withUndoRedo = readOnly ? disablePlugin('withUndoRedo') : (0, _plugins.createWithUndoRedo)(incomingPatches$);
  var withPortableTextMarkModel = (0, _plugins.createWithPortableTextMarkModel)(portableTextFeatures);
  var withPortableTextBlockStyle = (0, _plugins.createWithPortableTextBlockStyle)(portableTextFeatures, change$);
  var withUtils = (0, _plugins.createWithUtils)(portableTextFeatures);
  var withPortableTextSelections = (0, _plugins.createWithPortableTextSelections)(change$); // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.

  return withSchemaTypes(withObjectKeys(withPortableTextMarkModel(withPortableTextBlockStyle(withPortableTextLists(withUtils(withMaxBlocks(withUndoRedo(withPatches(withPortableTextSelections(e))))))))));
};

exports.withPortableText = withPortableText;