"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.type = exports.PortableTextEditorTester = void 0;

var _react = _interopRequireWildcard(require("react"));

var _schema = _interopRequireDefault(require("@sanity/schema"));

var _index = require("../../index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var imageType = {
  type: 'image',
  name: 'blockImage'
};
var someObject = {
  type: 'object',
  name: 'someObject',
  fields: [{
    type: 'string',
    name: 'color'
  }]
};
var blockType = {
  type: 'block',
  name: 'myTestBlockType',
  styles: [{
    title: 'Normal',
    value: 'normal'
  }, {
    title: 'H1',
    value: 'h1'
  }, {
    title: 'H2',
    value: 'h2'
  }, {
    title: 'H3',
    value: 'h3'
  }, {
    title: 'H4',
    value: 'h4'
  }, {
    title: 'H5',
    value: 'h5'
  }, {
    title: 'H6',
    value: 'h6'
  }, {
    title: 'Quote',
    value: 'blockquote'
  }],
  of: [someObject, imageType]
};
var portableTextType = {
  type: 'array',
  name: 'body',
  of: [blockType, someObject]
};

var schema = _schema.default.compile({
  name: 'test',
  types: [portableTextType]
});

var key = 0;
var PortableTextEditorTester = /*#__PURE__*/(0, _react.forwardRef)(function PortableTextEditorTester(props, ref) {
  (0, _react.useEffect)(() => {
    key = 0;
  });

  var _keyGenerator = (0, _react.useCallback)(() => {
    key++;
    return "".concat(key);
  }, []);

  return /*#__PURE__*/_react.default.createElement(_index.PortableTextEditor, {
    type: props.type,
    onChange: props.onChange || jest.fn(),
    value: props.value || undefined,
    keyGenerator: _keyGenerator,
    ref: ref
  }, /*#__PURE__*/_react.default.createElement(_index.PortableTextEditable, {
    selection: props.selection || undefined,
    renderPlaceholder: props.renderPlaceholder
  }));
});
exports.PortableTextEditorTester = PortableTextEditorTester;
var type = schema.get('body');
exports.type = type;