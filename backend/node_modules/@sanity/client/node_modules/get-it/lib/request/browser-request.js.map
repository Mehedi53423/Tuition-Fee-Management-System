{"version":3,"sources":["../../src/request/browser-request.js"],"names":["sameOrigin","require","parseHeaders","FetchXhr","noop","win","window","undefined","adapter","XmlHttpRequest","XMLHttpRequest","hasXhr2","XDR","XDomainRequest","CrossDomainRequest","module","exports","context","callback","opts","options","applyMiddleware","timers","cors","location","href","url","injectedResponse","cbTimer","setTimeout","cancel","clearTimeout","abort","xhr","isXdr","headers","delays","timeout","aborted","loaded","timedOut","onerror","onError","ontimeout","onabort","stopTimers","onprogress","loadEvent","resetTimers","readyState","status","onLoad","open","method","withCredentials","setRequestHeader","key","hasOwnProperty","Error","rawBody","responseType","request","send","body","connect","timeoutRequest","code","error","channels","publish","socket","force","err","isNetworkError","reduceResponse","statusCode","statusMessage","statusText","response","responseText","getAllResponseHeaders"],"mappings":";;AAAA;AACA,IAAMA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA5B;;AACA,IAAME,QAAQ,GAAGF,OAAO,CAAC,oBAAD,CAAxB;;AAEA,IAAMG,IAAI,GAAG,SAAPA,IAAO,GAAW;AACtB;AACD,CAFD;;AAIA,IAAMC,GAAG,GAAG,OAAOC,MAAP,KAAkB,WAAlB,GAAgCC,SAAhC,GAA4CD,MAAxD;AACA,IAAME,OAAO,GAAGH,GAAG,GAAG,KAAH,GAAW,OAA9B;AAEA,IAAII,cAAc,GAAG,OAAOC,cAAP,KAA0B,UAA1B,GAAuCA,cAAvC,GAAwDN,IAA7E;AACA,IAAMO,OAAO,IAAG,qBAAqB,IAAIF,cAAJ,EAAxB,CAAb,C,CACA;;AACA,IAAMG,GAAG,GAAG,OAAOC,cAAP,KAA0B,WAA1B,GAAwCN,SAAxC,GAAoDM,cAAhE;AACA,IAAIC,kBAAkB,GAAGH,OAAO,GAAGF,cAAH,GAAoBG,GAApD,C,CAEA;;AACA,IAAI,CAACP,GAAL,EAAU;AACRI,EAAAA,cAAc,GAAGN,QAAjB;AACAW,EAAAA,kBAAkB,GAAGX,QAArB;AACD;;AAEDY,MAAM,CAACC,OAAP,GAAiB,UAACC,OAAD,EAAUC,QAAV,EAAuB;AACtC,MAAMC,IAAI,GAAGF,OAAO,CAACG,OAArB;AACA,MAAMA,OAAO,GAAGH,OAAO,CAACI,eAAR,CAAwB,iBAAxB,EAA2CF,IAA3C,CAAhB;AACA,MAAMG,MAAM,GAAG,EAAf,CAHsC,CAKtC;;AACA,MAAMC,IAAI,GAAGlB,GAAG,IAAIA,GAAG,CAACmB,QAAX,IAAuB,CAACxB,UAAU,CAACK,GAAG,CAACmB,QAAJ,CAAaC,IAAd,EAAoBL,OAAO,CAACM,GAA5B,CAA/C,CANsC,CAQtC;;AACA,MAAMC,gBAAgB,GAAGV,OAAO,CAACI,eAAR,CAAwB,kBAAxB,EAA4Cd,SAA5C,EAAuD;AAC9EC,IAAAA,OAAO,EAAPA,OAD8E;AAE9ES,IAAAA,OAAO,EAAPA;AAF8E,GAAvD,CAAzB,CATsC,CActC;AACA;;AACA,MAAIU,gBAAJ,EAAsB;AACpB,QAAMC,OAAO,GAAGC,UAAU,CAACX,QAAD,EAAW,CAAX,EAAc,IAAd,EAAoBS,gBAApB,CAA1B;;AACA,QAAMG,MAAM,GAAG,SAATA,MAAS;AAAA,aAAMC,YAAY,CAACH,OAAD,CAAlB;AAAA,KAAf;;AACA,WAAO;AAACI,MAAAA,KAAK,EAAEF;AAAR,KAAP;AACD,GApBqC,CAsBtC;;;AACA,MAAIG,GAAG,GAAGV,IAAI,GAAG,IAAIT,kBAAJ,EAAH,GAA8B,IAAIL,cAAJ,EAA5C;AAEA,MAAMyB,KAAK,GAAG7B,GAAG,IAAIA,GAAG,CAACQ,cAAX,IAA6BoB,GAAG,YAAY5B,GAAG,CAACQ,cAA9D;AACA,MAAMsB,OAAO,GAAGf,OAAO,CAACe,OAAxB;AACA,MAAMC,MAAM,GAAGhB,OAAO,CAACiB,OAAvB,CA3BsC,CA6BtC;;AACA,MAAIC,OAAO,GAAG,KAAd;AACA,MAAIC,MAAM,GAAG,KAAb;AACA,MAAIC,QAAQ,GAAG,KAAf,CAhCsC,CAkCtC;;AACAP,EAAAA,GAAG,CAACQ,OAAJ,GAAcC,OAAd;AACAT,EAAAA,GAAG,CAACU,SAAJ,GAAgBD,OAAhB;;AACAT,EAAAA,GAAG,CAACW,OAAJ,GAAc,YAAM;AAClBC,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAP,IAAAA,OAAO,GAAG,IAAV;AACD,GAHD,CArCsC,CA0CtC;;;AACAL,EAAAA,GAAG,CAACa,UAAJ,GAAiB,YAAM;AACrB;AACD,GAFD;;AAIA,MAAMC,SAAS,GAAGb,KAAK,GAAG,QAAH,GAAc,oBAArC;;AACAD,EAAAA,GAAG,CAACc,SAAD,CAAH,GAAiB,YAAM;AACrB;AACAC,IAAAA,WAAW;;AAEX,QAAIV,OAAO,IAAKL,GAAG,CAACgB,UAAJ,KAAmB,CAAnB,IAAwB,CAACf,KAAzC,EAAiD;AAC/C;AACD,KANoB,CAQrB;;;AACA,QAAID,GAAG,CAACiB,MAAJ,KAAe,CAAnB,EAAsB;AACpB;AACD;;AAEDC,IAAAA,MAAM;AACP,GAdD,CAhDsC,CAgEtC;;;AACAlB,EAAAA,GAAG,CAACmB,IAAJ,CACEhC,OAAO,CAACiC,MADV,EAEEjC,OAAO,CAACM,GAFV,EAGE,IAHF,CAGO;AAHP,IAjEsC,CAuEtC;;AACAO,EAAAA,GAAG,CAACqB,eAAJ,GAAsB,CAAC,CAAClC,OAAO,CAACkC,eAAhC,CAxEsC,CA0EtC;;AACA,MAAInB,OAAO,IAAIF,GAAG,CAACsB,gBAAnB,EAAqC;AACnC,SAAK,IAAMC,GAAX,IAAkBrB,OAAlB,EAA2B;AACzB,UAAIA,OAAO,CAACsB,cAAR,CAAuBD,GAAvB,CAAJ,EAAiC;AAC/BvB,QAAAA,GAAG,CAACsB,gBAAJ,CAAqBC,GAArB,EAA0BrB,OAAO,CAACqB,GAAD,CAAjC;AACD;AACF;AACF,GAND,MAMO,IAAIrB,OAAO,IAAID,KAAf,EAAsB;AAC3B,UAAM,IAAIwB,KAAJ,CAAU,mDAAV,CAAN;AACD;;AAED,MAAItC,OAAO,CAACuC,OAAZ,EAAqB;AACnB1B,IAAAA,GAAG,CAAC2B,YAAJ,GAAmB,aAAnB;AACD,GAvFqC,CAyFtC;;;AACA3C,EAAAA,OAAO,CAACI,eAAR,CAAwB,WAAxB,EAAqC;AAACD,IAAAA,OAAO,EAAPA,OAAD;AAAUZ,IAAAA,OAAO,EAAPA,OAAV;AAAmBqD,IAAAA,OAAO,EAAE5B,GAA5B;AAAiChB,IAAAA,OAAO,EAAPA;AAAjC,GAArC;AAEAgB,EAAAA,GAAG,CAAC6B,IAAJ,CAAS1C,OAAO,CAAC2C,IAAR,IAAgB,IAAzB,EA5FsC,CA8FtC;;AACA,MAAI3B,MAAJ,EAAY;AACVd,IAAAA,MAAM,CAAC0C,OAAP,GAAiBnC,UAAU,CAAC;AAAA,aAAMoC,cAAc,CAAC,WAAD,CAApB;AAAA,KAAD,EAAoC7B,MAAM,CAAC4B,OAA3C,CAA3B;AACD;;AAED,SAAO;AAAChC,IAAAA,KAAK,EAALA;AAAD,GAAP;;AAEA,WAASA,KAAT,GAAiB;AACfM,IAAAA,OAAO,GAAG,IAAV;;AAEA,QAAIL,GAAJ,EAAS;AACPA,MAAAA,GAAG,CAACD,KAAJ;AACD;AACF;;AAED,WAASiC,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B1B,IAAAA,QAAQ,GAAG,IAAX;AACAP,IAAAA,GAAG,CAACD,KAAJ;AACA,QAAMmC,KAAK,GAAG,IAAIT,KAAJ,CACZQ,IAAI,KAAK,iBAAT,4CACsC9C,OAAO,CAACM,GAD9C,iDAE0CN,OAAO,CAACM,GAFlD,CADY,CAAd;AAKAyC,IAAAA,KAAK,CAACD,IAAN,GAAaA,IAAb;AACAjD,IAAAA,OAAO,CAACmD,QAAR,CAAiBD,KAAjB,CAAuBE,OAAvB,CAA+BF,KAA/B;AACD;;AAED,WAASnB,WAAT,GAAuB;AACrB,QAAI,CAACZ,MAAL,EAAa;AACX;AACD;;AAEDS,IAAAA,UAAU;AACVvB,IAAAA,MAAM,CAACgD,MAAP,GAAgBzC,UAAU,CAAC;AAAA,aAAMoC,cAAc,CAAC,iBAAD,CAApB;AAAA,KAAD,EAA0C7B,MAAM,CAACkC,MAAjD,CAA1B;AACD;;AAED,WAASzB,UAAT,CAAoB0B,KAApB,EAA2B;AACzB;AACA,QAAIA,KAAK,IAAIjC,OAAT,IAAqBL,GAAG,CAACgB,UAAJ,IAAkB,CAAlB,IAAuB3B,MAAM,CAAC0C,OAAvD,EAAiE;AAC/DjC,MAAAA,YAAY,CAACT,MAAM,CAAC0C,OAAR,CAAZ;AACD;;AAED,QAAI1C,MAAM,CAACgD,MAAX,EAAmB;AACjBvC,MAAAA,YAAY,CAACT,MAAM,CAACgD,MAAR,CAAZ;AACD;AACF;;AAED,WAAS5B,OAAT,CAAiByB,KAAjB,EAAwB;AACtB,QAAI5B,MAAJ,EAAY;AACV;AACD,KAHqB,CAKtB;;;AACAM,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAN,IAAAA,MAAM,GAAG,IAAT;AACAN,IAAAA,GAAG,GAAG,IAAN,CARsB,CAUtB;AACA;;AACA,QAAMuC,GAAG,GAAGL,KAAK,IAAI,IAAIT,KAAJ,mDAAqDtC,OAAO,CAACM,GAA7D,EAArB;AACA8C,IAAAA,GAAG,CAACC,cAAJ,GAAqB,IAArB;AACAD,IAAAA,GAAG,CAACX,OAAJ,GAAczC,OAAd;AACAF,IAAAA,QAAQ,CAACsD,GAAD,CAAR;AACD;;AAED,WAASE,cAAT,GAA0B;AACxB,QAAIC,UAAU,GAAG1C,GAAG,CAACiB,MAArB;AACA,QAAI0B,aAAa,GAAG3C,GAAG,CAAC4C,UAAxB;;AAEA,QAAI3C,KAAK,IAAIyC,UAAU,KAAKpE,SAA5B,EAAuC;AACrC;AACAoE,MAAAA,UAAU,GAAG,GAAb;AACD,KAHD,MAGO,IAAIA,UAAU,GAAG,KAAb,IAAsBA,UAAU,GAAG,KAAvC,EAA8C;AACnD;AACA;AACA,aAAOjC,OAAO,EAAd;AACD,KAJM,MAIA;AACL;AACAiC,MAAAA,UAAU,GAAG1C,GAAG,CAACiB,MAAJ,KAAe,IAAf,GAAsB,GAAtB,GAA4BjB,GAAG,CAACiB,MAA7C;AACA0B,MAAAA,aAAa,GAAG3C,GAAG,CAACiB,MAAJ,KAAe,IAAf,GAAsB,YAAtB,GAAqC0B,aAArD;AACD;;AAED,WAAO;AACLb,MAAAA,IAAI,EAAE9B,GAAG,CAAC6C,QAAJ,IAAgB7C,GAAG,CAAC8C,YADrB;AAELrD,MAAAA,GAAG,EAAEN,OAAO,CAACM,GAFR;AAGL2B,MAAAA,MAAM,EAAEjC,OAAO,CAACiC,MAHX;AAILlB,MAAAA,OAAO,EAAED,KAAK,GAAG,EAAH,GAAQhC,YAAY,CAAC+B,GAAG,CAAC+C,qBAAJ,EAAD,CAJ7B;AAKLL,MAAAA,UAAU,EAAEA,UALP;AAMLC,MAAAA,aAAa,EAAEA;AANV,KAAP;AAQD;;AAED,WAASzB,MAAT,GAAkB;AAChB,QAAIb,OAAO,IAAIC,MAAX,IAAqBC,QAAzB,EAAmC;AACjC;AACD;;AAED,QAAIP,GAAG,CAACiB,MAAJ,KAAe,CAAnB,EAAsB;AACpBR,MAAAA,OAAO,CAAC,IAAIgB,KAAJ,CAAU,mBAAV,CAAD,CAAP;AACA;AACD,KARe,CAUhB;;;AACAb,IAAAA,UAAU;AACVN,IAAAA,MAAM,GAAG,IAAT;AACArB,IAAAA,QAAQ,CAAC,IAAD,EAAOwD,cAAc,EAArB,CAAR;AACD;AACF,CAzMD","sourcesContent":["/* eslint max-depth: [\"error\", 4] */\nconst sameOrigin = require('same-origin')\nconst parseHeaders = require('parse-headers')\nconst FetchXhr = require('./browser/fetchXhr')\n\nconst noop = function() {\n  /* intentional noop */\n}\n\nconst win = typeof window === 'undefined' ? undefined : window\nconst adapter = win ? 'xhr' : 'fetch'\n\nlet XmlHttpRequest = typeof XMLHttpRequest === 'function' ? XMLHttpRequest : noop\nconst hasXhr2 = 'withCredentials' in new XmlHttpRequest()\n// eslint-disable-next-line no-undef\nconst XDR = typeof XDomainRequest === 'undefined' ? undefined : XDomainRequest\nlet CrossDomainRequest = hasXhr2 ? XmlHttpRequest : XDR\n\n// Fallback to fetch-based XHR polyfill for non-browser environments like Workers\nif (!win) {\n  XmlHttpRequest = FetchXhr\n  CrossDomainRequest = FetchXhr\n}\n\nmodule.exports = (context, callback) => {\n  const opts = context.options\n  const options = context.applyMiddleware('finalizeOptions', opts)\n  const timers = {}\n\n  // Deep-checking window.location because of react native, where `location` doesn't exist\n  const cors = win && win.location && !sameOrigin(win.location.href, options.url)\n\n  // Allow middleware to inject a response, for instance in the case of caching or mocking\n  const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n    adapter,\n    context\n  })\n\n  // If middleware injected a response, treat it as we normally would and return it\n  // Do note that the injected response has to be reduced to a cross-environment friendly response\n  if (injectedResponse) {\n    const cbTimer = setTimeout(callback, 0, null, injectedResponse)\n    const cancel = () => clearTimeout(cbTimer)\n    return {abort: cancel}\n  }\n\n  // We'll want to null out the request on success/failure\n  let xhr = cors ? new CrossDomainRequest() : new XmlHttpRequest()\n\n  const isXdr = win && win.XDomainRequest && xhr instanceof win.XDomainRequest\n  const headers = options.headers\n  const delays = options.timeout\n\n  // Request state\n  let aborted = false\n  let loaded = false\n  let timedOut = false\n\n  // Apply event handlers\n  xhr.onerror = onError\n  xhr.ontimeout = onError\n  xhr.onabort = () => {\n    stopTimers(true)\n    aborted = true\n  }\n\n  // IE9 must have onprogress be set to a unique function\n  xhr.onprogress = () => {\n    /* intentional noop */\n  }\n\n  const loadEvent = isXdr ? 'onload' : 'onreadystatechange'\n  xhr[loadEvent] = () => {\n    // Prevent request from timing out\n    resetTimers()\n\n    if (aborted || (xhr.readyState !== 4 && !isXdr)) {\n      return\n    }\n\n    // Will be handled by onError\n    if (xhr.status === 0) {\n      return\n    }\n\n    onLoad()\n  }\n\n  // @todo two last options to open() is username/password\n  xhr.open(\n    options.method,\n    options.url,\n    true // Always async\n  )\n\n  // Some options need to be applied after open\n  xhr.withCredentials = !!options.withCredentials\n\n  // Set headers\n  if (headers && xhr.setRequestHeader) {\n    for (const key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key])\n      }\n    }\n  } else if (headers && isXdr) {\n    throw new Error('Headers cannot be set on an XDomainRequest object')\n  }\n\n  if (options.rawBody) {\n    xhr.responseType = 'arraybuffer'\n  }\n\n  // Let middleware know we're about to do a request\n  context.applyMiddleware('onRequest', {options, adapter, request: xhr, context})\n\n  xhr.send(options.body || null)\n\n  // Figure out which timeouts to use (if any)\n  if (delays) {\n    timers.connect = setTimeout(() => timeoutRequest('ETIMEDOUT'), delays.connect)\n  }\n\n  return {abort}\n\n  function abort() {\n    aborted = true\n\n    if (xhr) {\n      xhr.abort()\n    }\n  }\n\n  function timeoutRequest(code) {\n    timedOut = true\n    xhr.abort()\n    const error = new Error(\n      code === 'ESOCKETTIMEDOUT'\n        ? `Socket timed out on request to ${options.url}`\n        : `Connection timed out on request to ${options.url}`\n    )\n    error.code = code\n    context.channels.error.publish(error)\n  }\n\n  function resetTimers() {\n    if (!delays) {\n      return\n    }\n\n    stopTimers()\n    timers.socket = setTimeout(() => timeoutRequest('ESOCKETTIMEDOUT'), delays.socket)\n  }\n\n  function stopTimers(force) {\n    // Only clear the connect timeout if we've got a connection\n    if (force || aborted || (xhr.readyState >= 2 && timers.connect)) {\n      clearTimeout(timers.connect)\n    }\n\n    if (timers.socket) {\n      clearTimeout(timers.socket)\n    }\n  }\n\n  function onError(error) {\n    if (loaded) {\n      return\n    }\n\n    // Clean up\n    stopTimers(true)\n    loaded = true\n    xhr = null\n\n    // Annoyingly, details are extremely scarce and hidden from us.\n    // We only really know that it is a network error\n    const err = error || new Error(`Network error while attempting to reach ${options.url}`)\n    err.isNetworkError = true\n    err.request = options\n    callback(err)\n  }\n\n  function reduceResponse() {\n    let statusCode = xhr.status\n    let statusMessage = xhr.statusText\n\n    if (isXdr && statusCode === undefined) {\n      // IE8 CORS GET successful response doesn't have a status field, but body is fine\n      statusCode = 200\n    } else if (statusCode > 12000 && statusCode < 12156) {\n      // Yet another IE quirk where it emits weird status codes on network errors\n      // https://support.microsoft.com/en-us/kb/193625\n      return onError()\n    } else {\n      // Another IE bug where HTTP 204 somehow ends up as 1223\n      statusCode = xhr.status === 1223 ? 204 : xhr.status\n      statusMessage = xhr.status === 1223 ? 'No Content' : statusMessage\n    }\n\n    return {\n      body: xhr.response || xhr.responseText,\n      url: options.url,\n      method: options.method,\n      headers: isXdr ? {} : parseHeaders(xhr.getAllResponseHeaders()),\n      statusCode: statusCode,\n      statusMessage: statusMessage\n    }\n  }\n\n  function onLoad() {\n    if (aborted || loaded || timedOut) {\n      return\n    }\n\n    if (xhr.status === 0) {\n      onError(new Error('Unknown XHR error'))\n      return\n    }\n\n    // Prevent being called twice\n    stopTimers()\n    loaded = true\n    callback(null, reduceResponse())\n  }\n}\n"],"file":"browser-request.js"}