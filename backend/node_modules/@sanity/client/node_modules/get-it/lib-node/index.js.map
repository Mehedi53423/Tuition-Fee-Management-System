{"version":3,"sources":["../src/index.js"],"names":["pubsub","require","middlewareReducer","processOptions","validateOptions","httpRequester","channelNames","middlehooks","module","exports","createRequester","initMiddleware","httpRequest","loadedMiddleware","middleware","reduce","ware","name","request","opts","channels","target","applyMiddleware","options","context","ongoingRequest","unsubscribe","subscribe","ctx","err","res","onResponse","abort","returnValue","publish","reqErr","error","response","use","newMiddleware","Error","onReturn","length","forEach","key","push","clone"],"mappings":"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","sourcesContent":["const pubsub = require('nano-pubsub')\nconst middlewareReducer = require('./util/middlewareReducer')\nconst processOptions = require('./middleware/defaultOptionsProcessor')\nconst validateOptions = require('./middleware/defaultOptionsValidator')\nconst httpRequester = require('./request') // node-request in node, browser-request in browsers\n\nconst channelNames = ['request', 'response', 'progress', 'error', 'abort']\nconst middlehooks = [\n  'processOptions',\n  'validateOptions',\n  'interceptRequest',\n  'finalizeOptions',\n  'onRequest',\n  'onResponse',\n  'onError',\n  'onReturn',\n  'onHeaders'\n]\n\nmodule.exports = function createRequester(initMiddleware = [], httpRequest = httpRequester) {\n  const loadedMiddleware = []\n  const middleware = middlehooks.reduce(\n    (ware, name) => {\n      ware[name] = ware[name] || []\n      return ware\n    },\n    {\n      processOptions: [processOptions],\n      validateOptions: [validateOptions]\n    }\n  )\n\n  function request(opts) {\n    const channels = channelNames.reduce((target, name) => {\n      target[name] = pubsub()\n      return target\n    }, {})\n\n    // Prepare a middleware reducer that can be reused throughout the lifecycle\n    const applyMiddleware = middlewareReducer(middleware)\n\n    // Parse the passed options\n    const options = applyMiddleware('processOptions', opts)\n\n    // Validate the options\n    applyMiddleware('validateOptions', options)\n\n    // Build a context object we can pass to child handlers\n    const context = {options, channels, applyMiddleware}\n\n    // We need to hold a reference to the current, ongoing request,\n    // in order to allow cancellation. In the case of the retry middleware,\n    // a new request might be triggered\n    let ongoingRequest = null\n    const unsubscribe = channels.request.subscribe(ctx => {\n      // Let request adapters (node/browser) perform the actual request\n      ongoingRequest = httpRequest(ctx, (err, res) => onResponse(err, res, ctx))\n    })\n\n    // If we abort the request, prevent further requests from happening,\n    // and be sure to cancel any ongoing request (obviously)\n    channels.abort.subscribe(() => {\n      unsubscribe()\n      if (ongoingRequest) {\n        ongoingRequest.abort()\n      }\n    })\n\n    // See if any middleware wants to modify the return value - for instance\n    // the promise or observable middlewares\n    const returnValue = applyMiddleware('onReturn', channels, context)\n\n    // If return value has been modified by a middleware, we expect the middleware\n    // to publish on the 'request' channel. If it hasn't been modified, we want to\n    // trigger it right away\n    if (returnValue === channels) {\n      channels.request.publish(context)\n    }\n\n    return returnValue\n\n    function onResponse(reqErr, res, ctx) {\n      let error = reqErr\n      let response = res\n\n      // We're processing non-errors first, in case a middleware converts the\n      // response into an error (for instance, status >= 400 == HttpError)\n      if (!error) {\n        try {\n          response = applyMiddleware('onResponse', res, ctx)\n        } catch (err) {\n          response = null\n          error = err\n        }\n      }\n\n      // Apply error middleware - if middleware return the same (or a different) error,\n      // publish as an error event. If we *don't* return an error, assume it has been handled\n      error = error && applyMiddleware('onError', error, ctx)\n\n      // Figure out if we should publish on error/response channels\n      if (error) {\n        channels.error.publish(error)\n      } else if (response) {\n        channels.response.publish(response)\n      }\n    }\n  }\n\n  request.use = function use(newMiddleware) {\n    if (!newMiddleware) {\n      throw new Error('Tried to add middleware that resolved to falsey value')\n    }\n\n    if (typeof newMiddleware === 'function') {\n      throw new Error(\n        'Tried to add middleware that was a function. It probably expects you to pass options to it.'\n      )\n    }\n\n    if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n      throw new Error(\n        'Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event'\n      )\n    }\n\n    middlehooks.forEach(key => {\n      if (newMiddleware[key]) {\n        middleware[key].push(newMiddleware[key])\n      }\n    })\n\n    loadedMiddleware.push(newMiddleware)\n    return request\n  }\n\n  request.clone = function clone() {\n    return createRequester(loadedMiddleware)\n  }\n\n  initMiddleware.forEach(request.use)\n\n  return request\n}\n"],"file":"index.js"}