{"version":3,"sources":["../../src/middleware/keepAlive.js"],"names":["http","require","https","objectAssign","isHttpsProto","module","exports","config","ms","maxFree","agentOptions","keepAlive","keepAliveMsecs","maxFreeSockets","httpAgent","Agent","httpsAgent","agents","finalizeOptions","options","agent","isHttps","test","href","protocol","keepOpts","maxRedirects"],"mappings":";;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,eAAD,CAA5B;;AAEA,MAAMG,YAAY,GAAG,UAArB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,MAAM,GAAG,EAAV,KAAiB;AAChC,QAAMC,EAAE,GAAGD,MAAM,CAACC,EAAP,IAAa,IAAxB;AACA,QAAMC,OAAO,GAAGF,MAAM,CAACE,OAAP,IAAkB,GAAlC;AACA,QAAMC,YAAY,GAAG;AAACC,IAAAA,SAAS,EAAE,IAAZ;AAAkBC,IAAAA,cAAc,EAAEJ,EAAlC;AAAsCK,IAAAA,cAAc,EAAEJ;AAAtD,GAArB;AACA,QAAMK,SAAS,GAAG,IAAId,IAAI,CAACe,KAAT,CAAeL,YAAf,CAAlB;AACA,QAAMM,UAAU,GAAG,IAAId,KAAK,CAACa,KAAV,CAAgBL,YAAhB,CAAnB;AACA,QAAMO,MAAM,GAAG;AAACjB,IAAAA,IAAI,EAAEc,SAAP;AAAkBZ,IAAAA,KAAK,EAAEc;AAAzB,GAAf;AAEA,SAAO;AACLE,IAAAA,eAAe,EAAEC,OAAO,IAAI;AAC1B,UAAIA,OAAO,CAACC,KAAZ,EAAmB;AACjB,eAAOD,OAAP;AACD;;AAED,YAAME,OAAO,GAAGjB,YAAY,CAACkB,IAAb,CAAkBH,OAAO,CAACI,IAAR,IAAgBJ,OAAO,CAACK,QAA1C,CAAhB;AACA,YAAMC,QAAQ,GACZN,OAAO,CAACO,YAAR,KAAyB,CAAzB,GAA6B;AAACN,QAAAA,KAAK,EAAEC,OAAO,GAAGL,UAAH,GAAgBF;AAA/B,OAA7B,GAAyE;AAACG,QAAAA;AAAD,OAD3E;AAGA,aAAOd,YAAY,CAAC,EAAD,EAAKgB,OAAL,EAAcM,QAAd,CAAnB;AACD;AAXI,GAAP;AAaD,CArBD","sourcesContent":["const http = require('http')\nconst https = require('https')\nconst objectAssign = require('object-assign')\n\nconst isHttpsProto = /^https:/i\n\nmodule.exports = (config = {}) => {\n  const ms = config.ms || 1000\n  const maxFree = config.maxFree || 256\n  const agentOptions = {keepAlive: true, keepAliveMsecs: ms, maxFreeSockets: maxFree}\n  const httpAgent = new http.Agent(agentOptions)\n  const httpsAgent = new https.Agent(agentOptions)\n  const agents = {http: httpAgent, https: httpsAgent}\n\n  return {\n    finalizeOptions: options => {\n      if (options.agent) {\n        return options\n      }\n\n      const isHttps = isHttpsProto.test(options.href || options.protocol)\n      const keepOpts =\n        options.maxRedirects === 0 ? {agent: isHttps ? httpsAgent : httpAgent} : {agents}\n\n      return objectAssign({}, options, keepOpts)\n    }\n  }\n}\n"],"file":"keepAlive.js"}