{"version":3,"sources":["../../src/middleware/retry.js"],"names":["objectAssign","require","defaultShouldRetry","isStream","stream","pipe","retry","opts","maxRetries","retryDelay","getRetryDelay","allowRetry","shouldRetry","onError","err","context","options","max","attemptNumber","body","newContext","setTimeout","channels","request","publish","module","exports","attemptNum","Math","pow","random"],"mappings":";;AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,0BAAD,CAAlC;;AAEA,MAAME,QAAQ,GAAGC,MAAM,IACrBA,MAAM,KAAK,IAAX,IAAmB,OAAOA,MAAP,KAAkB,QAArC,IAAiD,OAAOA,MAAM,CAACC,IAAd,KAAuB,UAD1E;;AAGA,MAAMC,KAAK,GAAG,CAACC,IAAI,GAAG,EAAR,KAAe;AAC3B,QAAMC,UAAU,GAAGD,IAAI,CAACC,UAAL,IAAmB,CAAtC;AACA,QAAMC,UAAU,GAAGF,IAAI,CAACE,UAAL,IAAmBC,aAAtC;AACA,QAAMC,UAAU,GAAGJ,IAAI,CAACK,WAAL,IAAoBV,kBAAvC;AAEA,SAAO;AACLW,IAAAA,OAAO,EAAE,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACzB,YAAMC,OAAO,GAAGD,OAAO,CAACC,OAAxB;AACA,YAAMC,GAAG,GAAGD,OAAO,CAACR,UAAR,IAAsBA,UAAlC;AACA,YAAMI,WAAW,GAAGI,OAAO,CAACJ,WAAR,IAAuBD,UAA3C;AACA,YAAMO,aAAa,GAAGF,OAAO,CAACE,aAAR,IAAyB,CAA/C,CAJyB,CAMzB;;AACA,UAAIf,QAAQ,CAACa,OAAO,CAACG,IAAT,CAAZ,EAA4B;AAC1B,eAAOL,GAAP;AACD,OATwB,CAWzB;;;AACA,UAAI,CAACF,WAAW,CAACE,GAAD,EAAMI,aAAN,EAAqBF,OAArB,CAAZ,IAA6CE,aAAa,IAAID,GAAlE,EAAuE;AACrE,eAAOH,GAAP;AACD,OAdwB,CAgBzB;;;AACA,YAAMM,UAAU,GAAGpB,YAAY,CAAC,EAAD,EAAKe,OAAL,EAAc;AAC3CC,QAAAA,OAAO,EAAEhB,YAAY,CAAC,EAAD,EAAKgB,OAAL,EAAc;AAACE,UAAAA,aAAa,EAAEA,aAAa,GAAG;AAAhC,SAAd;AADsB,OAAd,CAA/B,CAjByB,CAqBzB;;AACAG,MAAAA,UAAU,CAAC,MAAMN,OAAO,CAACO,QAAR,CAAiBC,OAAjB,CAAyBC,OAAzB,CAAiCJ,UAAjC,CAAP,EAAqDX,UAAU,CAACS,aAAD,CAA/D,CAAV,CAtByB,CAwBzB;;AACA,aAAO,IAAP;AACD;AA3BI,GAAP;AA6BD,CAlCD;;AAoCAZ,KAAK,CAACM,WAAN,GAAoBV,kBAApB;AAEAuB,MAAM,CAACC,OAAP,GAAiBpB,KAAjB;;AAEA,SAASI,aAAT,CAAuBiB,UAAvB,EAAmC;AACjC,SAAO,MAAMC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYF,UAAZ,CAAN,GAAgCC,IAAI,CAACE,MAAL,KAAgB,GAAvD;AACD","sourcesContent":["const objectAssign = require('object-assign')\nconst defaultShouldRetry = require('../util/node-shouldRetry')\n\nconst isStream = stream =>\n  stream !== null && typeof stream === 'object' && typeof stream.pipe === 'function'\n\nconst retry = (opts = {}) => {\n  const maxRetries = opts.maxRetries || 5\n  const retryDelay = opts.retryDelay || getRetryDelay\n  const allowRetry = opts.shouldRetry || defaultShouldRetry\n\n  return {\n    onError: (err, context) => {\n      const options = context.options\n      const max = options.maxRetries || maxRetries\n      const shouldRetry = options.shouldRetry || allowRetry\n      const attemptNumber = options.attemptNumber || 0\n\n      // We can't retry if body is a stream, since it'll be drained\n      if (isStream(options.body)) {\n        return err\n      }\n\n      // Give up?\n      if (!shouldRetry(err, attemptNumber, options) || attemptNumber >= max) {\n        return err\n      }\n\n      // Create a new context with an increased attempt number, so we can exit if we reach a limit\n      const newContext = objectAssign({}, context, {\n        options: objectAssign({}, options, {attemptNumber: attemptNumber + 1})\n      })\n\n      // Wait a given amount of time before doing the request again\n      setTimeout(() => context.channels.request.publish(newContext), retryDelay(attemptNumber))\n\n      // Signal that we've handled the error and that it should not propagate further\n      return null\n    }\n  }\n}\n\nretry.shouldRetry = defaultShouldRetry\n\nmodule.exports = retry\n\nfunction getRetryDelay(attemptNum) {\n  return 100 * Math.pow(2, attemptNum) + Math.random() * 100\n}\n"],"file":"retry.js"}