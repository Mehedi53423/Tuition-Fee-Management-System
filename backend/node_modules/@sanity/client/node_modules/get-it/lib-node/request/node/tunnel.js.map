{"version":3,"sources":["../../../src/request/node/tunnel.js"],"names":["url","require","tunnel","objectAssign","uriParts","defaultProxyHeaderWhiteList","defaultProxyHeaderExclusiveList","exports","shouldEnable","options","tunnelOption","Boolean","uri","parse","protocol","applyAgent","opts","proxy","proxyHeaderWhiteList","concat","map","header","toLowerCase","proxyHeaderExclusiveList","proxyHeaders","getAllowedProxyHeaders","headers","host","constructProxyHost","Object","keys","reduce","isAllowed","indexOf","tunnelFn","getTunnelFn","tunnelOptions","constructTunnelOptions","agent","getUriParts","tunnelFnName","constructTunnelFnName","part","uriProtocol","proxyProtocol","join","port","proxyHost","hostname","whiteList","filter","set","proxyAuth","auth","ca","cert","key","passphrase","pfx","ciphers","rejectUnauthorized","secureOptions","secureProtocol"],"mappings":"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","sourcesContent":["/**\n * Code borrowed from https://github.com/request/request\n * Modified to be less request-specific, more functional\n * Apache License 2.0\n */\nconst url = require('url')\nconst tunnel = require('tunnel-agent')\nconst objectAssign = require('object-assign')\n\nconst uriParts = [\n  'protocol',\n  'slashes',\n  'auth',\n  'host',\n  'port',\n  'hostname',\n  'hash',\n  'search',\n  'query',\n  'pathname',\n  'path',\n  'href'\n]\n\nconst defaultProxyHeaderWhiteList = [\n  'accept',\n  'accept-charset',\n  'accept-encoding',\n  'accept-language',\n  'accept-ranges',\n  'cache-control',\n  'content-encoding',\n  'content-language',\n  'content-location',\n  'content-md5',\n  'content-range',\n  'content-type',\n  'connection',\n  'date',\n  'expect',\n  'max-forwards',\n  'pragma',\n  'referer',\n  'te',\n  'user-agent',\n  'via'\n]\n\nconst defaultProxyHeaderExclusiveList = ['proxy-authorization']\n\nexports.shouldEnable = (options, tunnelOption) => {\n  // Tunnel HTTPS by default. Allow the user to override this setting.\n\n  // If user has specified a specific tunnel override...\n  if (typeof options.tunnel !== 'undefined') {\n    return Boolean(options.tunnel)\n  }\n\n  // If the destination is HTTPS, tunnel.\n  const uri = url.parse(options.url)\n  if (uri.protocol === 'https:') {\n    return true\n  }\n\n  // Otherwise, do not use tunnel.\n  return false\n}\n\nexports.applyAgent = (opts = {}, proxy) => {\n  const options = objectAssign({}, opts)\n\n  // Setup proxy header exclusive list and whitelist\n  const proxyHeaderWhiteList = defaultProxyHeaderWhiteList\n    .concat(options.proxyHeaderWhiteList || [])\n    .map(header => header.toLowerCase())\n\n  const proxyHeaderExclusiveList = defaultProxyHeaderExclusiveList\n    .concat(options.proxyHeaderExclusiveList || [])\n    .map(header => header.toLowerCase())\n\n  // Get the headers we should send to the proxy\n  const proxyHeaders = getAllowedProxyHeaders(options.headers, proxyHeaderWhiteList)\n  proxyHeaders.host = constructProxyHost(options)\n\n  // Reduce headers to the ones not exclusive for the proxy\n  options.headers = Object.keys(options.headers || {}).reduce((headers, header) => {\n    const isAllowed = proxyHeaderExclusiveList.indexOf(header.toLowerCase()) === -1\n    if (isAllowed) {\n      headers[header] = options.headers[header]\n    }\n\n    return headers\n  }, {})\n\n  const tunnelFn = getTunnelFn(options, proxy)\n  const tunnelOptions = constructTunnelOptions(options, proxy, proxyHeaders)\n  options.agent = tunnelFn(tunnelOptions)\n\n  return options\n}\n\nfunction getTunnelFn(options, proxy) {\n  const uri = getUriParts(options)\n  const tunnelFnName = constructTunnelFnName(uri, proxy)\n  return tunnel[tunnelFnName]\n}\n\nfunction getUriParts(options) {\n  return uriParts.reduce((uri, part) => {\n    uri[part] = options[part]\n    return uri\n  }, {})\n}\n\nfunction constructTunnelFnName(uri, proxy) {\n  const uriProtocol = uri.protocol === 'https:' ? 'https' : 'http'\n  const proxyProtocol = proxy.protocol === 'https:' ? 'Https' : 'Http'\n  return [uriProtocol, proxyProtocol].join('Over')\n}\n\nfunction constructProxyHost(uri) {\n  const port = uri.port\n  const protocol = uri.protocol\n  let proxyHost = `${uri.hostname}:`\n\n  if (port) {\n    proxyHost += port\n  } else if (protocol === 'https:') {\n    proxyHost += '443'\n  } else {\n    proxyHost += '80'\n  }\n\n  return proxyHost\n}\n\nfunction getAllowedProxyHeaders(headers, whiteList) {\n  return Object.keys(headers)\n    .filter(header => whiteList.indexOf(header.toLowerCase()) !== -1)\n    .reduce((set, header) => {\n      set[header] = headers[header]\n      return set\n    }, {})\n}\n\nfunction constructTunnelOptions(options, proxy, proxyHeaders) {\n  return {\n    proxy: {\n      host: proxy.hostname,\n      port: +proxy.port,\n      proxyAuth: proxy.auth,\n      headers: proxyHeaders\n    },\n    headers: options.headers,\n    ca: options.ca,\n    cert: options.cert,\n    key: options.key,\n    passphrase: options.passphrase,\n    pfx: options.pfx,\n    ciphers: options.ciphers,\n    rejectUnauthorized: options.rejectUnauthorized,\n    secureOptions: options.secureOptions,\n    secureProtocol: options.secureProtocol\n  }\n}\n"],"file":"tunnel.js"}