{"version":3,"sources":["../../src/request/node-request.js"],"names":["qs","require","url","http","https","concat","follow","timedOut","isStream","toStream","objectAssign","progressStream","decompressResponse","getProxyOptions","rewriteUriForProxy","tunneling","adapter","reduceResponse","res","reqUrl","method","body","headers","statusCode","statusMessage","module","exports","context","cb","options","uri","parse","bodyType","Buffer","isBuffer","Error","lengthHeader","bodySize","byteLength","aborted","callback","err","channels","abort","subscribe","reqOpts","lowerCaseHeaders","maxRedirects","proxy","tunnel","shouldEnable","injectedResponse","applyMiddleware","undefined","cbTimer","setImmediate","clearImmediate","applyAgent","auth","username","password","split","map","item","unescape","from","authBase64","toString","transport","getRequestTransport","debug","agent","host","port","tryCompressed","compress","finalOptions","request","response","resStream","responseUrl","stream","data","rawBody","reduced","timeout","once","bodyStream","progress","getProgressStream","pipe","end","bodyIsStream","length","time","isHttpsRequest","protocol","transports","isHttpsProxy","test","Object","keys","reduce","acc","header","toLowerCase"],"mappings":"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","sourcesContent":["/* eslint-disable no-process-env */\nconst qs = require('querystring')\nconst url = require('url')\nconst http = require('http')\nconst https = require('https')\nconst concat = require('simple-concat')\nconst follow = require('follow-redirects')\nconst timedOut = require('@sanity/timed-out')\nconst isStream = require('is-stream')\nconst toStream = require('into-stream')\nconst objectAssign = require('object-assign')\nconst progressStream = require('progress-stream')\nconst decompressResponse = require('decompress-response')\nconst {getProxyOptions, rewriteUriForProxy} = require('./node/proxy')\nconst tunneling = require('./node/tunnel')\n\nconst adapter = 'node'\n\n// Reduce a fully fledged node-style response object to\n// something that works in both browser and node environment\nconst reduceResponse = (res, reqUrl, method, body) => ({\n  body,\n  url: reqUrl,\n  method: method,\n  headers: res.headers,\n  statusCode: res.statusCode,\n  statusMessage: res.statusMessage\n})\n\nmodule.exports = (context, cb) => {\n  const options = context.options\n  const uri = objectAssign({}, url.parse(options.url))\n  const bodyType = isStream(options.body) ? 'stream' : typeof options.body\n\n  if (\n    bodyType !== 'undefined' &&\n    bodyType !== 'stream' &&\n    bodyType !== 'string' &&\n    !Buffer.isBuffer(options.body)\n  ) {\n    throw new Error(`Request body must be a string, buffer or stream, got ${bodyType}`)\n  }\n\n  const lengthHeader = {}\n  if (options.bodySize) {\n    lengthHeader['content-length'] = options.bodySize\n  } else if (options.body && bodyType !== 'stream') {\n    lengthHeader['content-length'] = Buffer.byteLength(options.body)\n  }\n\n  // Make sure callback is not called in the event of a cancellation\n  let aborted = false\n  const callback = (err, res) => !aborted && cb(err, res)\n  context.channels.abort.subscribe(() => {\n    aborted = true\n  })\n\n  // Create a reduced subset of options meant for the http.request() method\n  let reqOpts = objectAssign({}, uri, {\n    method: options.method,\n    headers: objectAssign({}, lowerCaseHeaders(options.headers), lengthHeader),\n    maxRedirects: options.maxRedirects\n  })\n\n  // Figure out proxying/tunnel options\n  const proxy = getProxyOptions(options)\n  const tunnel = proxy && tunneling.shouldEnable(options)\n\n  // Allow middleware to inject a response, for instance in the case of caching or mocking\n  const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n    adapter,\n    context\n  })\n\n  // If middleware injected a response, treat it as we normally would and return it\n  // Do note that the injected response has to be reduced to a cross-environment friendly response\n  if (injectedResponse) {\n    const cbTimer = setImmediate(callback, null, injectedResponse)\n    const abort = () => clearImmediate(cbTimer)\n    return {abort}\n  }\n\n  // We're using the follow-redirects module to transparently follow redirects\n  if (options.maxRedirects !== 0) {\n    reqOpts.maxRedirects = options.maxRedirects || 5\n  }\n\n  // Apply currect options for proxy tunneling, if enabled\n  if (proxy && tunnel) {\n    reqOpts = tunneling.applyAgent(reqOpts, proxy)\n  } else if (proxy && !tunnel) {\n    reqOpts = rewriteUriForProxy(reqOpts, uri, proxy)\n  }\n\n  // Handle proxy authorization if present\n  if (!tunnel && proxy && proxy.auth && !reqOpts.headers['proxy-authorization']) {\n    const [username, password] = proxy.auth.username\n      ? [proxy.auth.username, proxy.auth.password]\n      : proxy.auth.split(':').map(item => qs.unescape(item))\n\n    const auth = Buffer.from(`${username}:${password}`, 'utf8')\n    const authBase64 = auth.toString('base64')\n    reqOpts.headers['proxy-authorization'] = `Basic ${authBase64}`\n  }\n\n  // Figure out transport (http/https, forwarding/non-forwarding agent)\n  const transport = getRequestTransport(reqOpts, proxy, tunnel)\n  if (typeof options.debug === 'function' && proxy) {\n    options.debug(\n      'Proxying using %s',\n      reqOpts.agent ? 'tunnel agent' : `${reqOpts.host}:${reqOpts.port}`\n    )\n  }\n\n  // See if we should try to request a compressed response (and decompress on return)\n  const tryCompressed = reqOpts.method !== 'HEAD'\n  if (tryCompressed && !reqOpts.headers['accept-encoding'] && options.compress !== false) {\n    reqOpts.headers['accept-encoding'] = 'br, gzip, deflate'\n  }\n\n  const finalOptions = context.applyMiddleware('finalizeOptions', reqOpts)\n  const request = transport.request(finalOptions, response => {\n    const res = tryCompressed ? decompressResponse(response) : response\n    const resStream = context.applyMiddleware('onHeaders', res, {\n      headers: response.headers,\n      adapter,\n      context\n    })\n\n    // On redirects, `responseUrl` is set\n    const reqUrl = response.responseUrl || options.url\n\n    if (options.stream) {\n      callback(null, reduceResponse(res, reqUrl, reqOpts.method, resStream))\n      return\n    }\n\n    // Concatenate the response body, then parse the response with middlewares\n    concat(resStream, (err, data) => {\n      if (err) {\n        return callback(err)\n      }\n\n      const body = options.rawBody ? data : data.toString()\n      const reduced = reduceResponse(res, reqUrl, reqOpts.method, body)\n      return callback(null, reduced)\n    })\n  })\n\n  if (options.timeout) {\n    timedOut(request, options.timeout)\n  }\n\n  request.once('error', callback)\n\n  // Cheating a bit here; since we're not concerned about the \"bundle size\" in node,\n  // and modifying the body stream would be sorta tricky, we're just always going\n  // to put a progress stream in the middle here. Note that\n  const {bodyStream, progress} = getProgressStream(options)\n\n  // Let middleware know we're about to do a request\n  context.applyMiddleware('onRequest', {options, adapter, request, context, progress})\n\n  if (bodyStream) {\n    bodyStream.pipe(request)\n  } else {\n    request.end(options.body)\n  }\n\n  return {abort: () => request.abort()}\n}\n\nfunction getProgressStream(options) {\n  if (!options.body) {\n    return {}\n  }\n\n  const bodyIsStream = isStream(options.body)\n  const length = options.bodySize || (bodyIsStream ? null : Buffer.byteLength(options.body))\n  if (!length) {\n    return bodyIsStream ? {bodyStream: options.body} : {}\n  }\n\n  const progress = progressStream({time: 16, length})\n  const bodyStream = bodyIsStream ? options.body : toStream(options.body)\n  return {bodyStream: bodyStream.pipe(progress), progress}\n}\n\nfunction getRequestTransport(reqOpts, proxy, tunnel) {\n  const isHttpsRequest = reqOpts.protocol === 'https:'\n  const transports =\n    reqOpts.maxRedirects === 0\n      ? {http: http, https: https}\n      : {http: follow.http, https: follow.https}\n\n  if (!proxy || tunnel) {\n    return isHttpsRequest ? transports.https : transports.http\n  }\n\n  // Assume the proxy is an HTTPS proxy if port is 443, or if there is a\n  // `protocol` option set that starts with https\n  let isHttpsProxy = proxy.port === 443\n  if (proxy.protocol) {\n    isHttpsProxy = /^https:?/.test(proxy.protocol)\n  }\n\n  return isHttpsProxy ? transports.https : transports.http\n}\n\nfunction lowerCaseHeaders(headers) {\n  return Object.keys(headers || {}).reduce((acc, header) => {\n    acc[header.toLowerCase()] = headers[header]\n    return acc\n  }, {})\n}\n"],"file":"node-request.js"}