"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChangeResolver = ChangeResolver;

var _hooks = require("@sanity/base/hooks");

var _internal = require("@sanity/base/_internal");

var _react = _interopRequireWildcard(require("react"));

var _DocumentChangeContext = require("./DocumentChangeContext");

var _FieldChange = require("./FieldChange");

var _GroupChange = require("./GroupChange");

var _excluded = ["change", "hidden", "readOnly"],
    _excluded2 = ["hidden", "document"],
    _excluded3 = ["readOnly", "document", "children"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ChangeResolver(props) {
  var change = props.change,
      hidden = props.hidden,
      readOnly = props.readOnly,
      restProps = _objectWithoutProperties(props, _excluded);

  var _useContext = (0, _react.useContext)(_DocumentChangeContext.DocumentChangeContext),
      value = _useContext.value;

  if (change.type === 'field') {
    // Resolve the readOnly property if it's a function
    return /*#__PURE__*/_react.default.createElement(ConditionalHiddenChange, _extends({
      hidden: hidden || change.schemaType.hidden,
      document: value,
      value: change.diff.toValue
    }, restProps), /*#__PURE__*/_react.default.createElement(ConditionalReadOnlyChange, _extends({
      readOnly: readOnly || change.schemaType.readOnly,
      document: value,
      value: change.diff.toValue
    }, restProps), /*#__PURE__*/_react.default.createElement(_FieldChange.FieldChange, _extends({
      change: change
    }, restProps))));
  }

  if (change.type === 'group') {
    var _change$schemaType, _change$schemaType2;

    // Resolve the group's readOnly property if it's a function
    return /*#__PURE__*/_react.default.createElement(ConditionalHiddenChange, _extends({
      hidden: hidden || (change === null || change === void 0 ? void 0 : (_change$schemaType = change.schemaType) === null || _change$schemaType === void 0 ? void 0 : _change$schemaType.hidden),
      document: value,
      value: undefined
    }, restProps), /*#__PURE__*/_react.default.createElement(ConditionalReadOnlyChange, _extends({
      readOnly: readOnly || ((_change$schemaType2 = change.schemaType) === null || _change$schemaType2 === void 0 ? void 0 : _change$schemaType2.readOnly),
      document: value,
      value: undefined
    }, restProps), /*#__PURE__*/_react.default.createElement(_GroupChange.GroupChange, _extends({
      change: change
    }, restProps, {
      "data-testid": "group-change-".concat(change.fieldsetName)
    }))));
  }

  return /*#__PURE__*/_react.default.createElement("div", null, "Unknown change type: ", change.type);
}

var ConditionalHiddenChange = _ref => {
  var hidden = _ref.hidden,
      document = _ref.document,
      props = _objectWithoutProperties(_ref, _excluded2);

  var isHidden = (0, _hooks.unstable_useConditionalProperty)(_objectSpread(_objectSpread({}, props), {}, {
    document: document,
    checkProperty: hidden,
    checkPropertyKey: 'hidden'
  }));
  return isHidden ? null : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, props.children);
};

var ConditionalReadOnlyChange = _ref2 => {
  var readOnly = _ref2.readOnly,
      document = _ref2.document,
      children = _ref2.children,
      props = _objectWithoutProperties(_ref2, _excluded3);

  var isReadOnly = (0, _hooks.unstable_useConditionalProperty)(_objectSpread(_objectSpread({}, props), {}, {
    document: document,
    checkProperty: readOnly,
    checkPropertyKey: 'readOnly'
  }));
  return /*#__PURE__*/_react.default.createElement(_internal.ConditionalReadOnlyContextProvider, {
    readOnly: isReadOnly
  }, children);
};