"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FieldChange = FieldChange;

var _reactHooks = require("@sanity/react-hooks");

var _react = _interopRequireWildcard(require("react"));

var _hooks = require("@sanity/base/hooks");

var _ui = require("@sanity/ui");

var _internal = require("@sanity/base/_internal");

var _undoChange = require("../changes/undoChange");

var _DiffContext = require("../contexts/DiffContext");

var _ChangeBreadcrumb = require("./ChangeBreadcrumb");

var _DiffErrorBoundary = require("./DiffErrorBoundary");

var _DiffInspectWrapper = require("./DiffInspectWrapper");

var _DocumentChangeContext = require("./DocumentChangeContext");

var _FallbackDiff = require("./FallbackDiff");

var _RevertChangesButton = require("./RevertChangesButton");

var _ValueError = require("./ValueError");

var _FieldChange = require("./FieldChange.styled");

var _excluded = ["change", "hidden", "readOnly"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function FieldChange(props) {
  var _useConditionalReadOn;

  var change = props.change,
      hidden = props.hidden,
      readOnly = props.readOnly,
      restProps = _objectWithoutProperties(props, _excluded);

  var conditionalReadOnly = (_useConditionalReadOn = (0, _internal.useConditionalReadOnly)()) !== null && _useConditionalReadOn !== void 0 ? _useConditionalReadOn : readOnly;
  var DiffComponent = change.diffComponent || _FallbackDiff.FallbackDiff;

  var _useContext = (0, _react.useContext)(_DocumentChangeContext.DocumentChangeContext),
      documentId = _useContext.documentId,
      schemaType = _useContext.schemaType,
      rootDiff = _useContext.rootDiff,
      isComparingCurrent = _useContext.isComparingCurrent,
      _useContext$FieldWrap = _useContext.FieldWrapper,
      FieldWrapper = _useContext$FieldWrap === void 0 ? _react.default.Fragment : _useContext$FieldWrap,
      value = _useContext.value;

  var docOperations = (0, _reactHooks.useDocumentOperation)(documentId, schemaType.name);

  var _React$useState = _react.default.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      confirmRevertOpen = _React$useState2[0],
      setConfirmRevertOpen = _React$useState2[1];

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      revertHovered = _useState2[0],
      setRevertHovered = _useState2[1];

  var _useState3 = (0, _react.useState)(null),
      _useState4 = _slicedToArray(_useState3, 2),
      revertButtonElement = _useState4[0],
      setRevertButtonElement = _useState4[1];

  var _useDocumentPairPermi = (0, _hooks.unstable_useDocumentPairPermissions)({
    id: documentId,
    type: schemaType.name,
    permission: 'update'
  }),
      _useDocumentPairPermi2 = _slicedToArray(_useDocumentPairPermi, 2),
      permissions = _useDocumentPairPermi2[0],
      isPermissionsLoading = _useDocumentPairPermi2[1];

  var handleRevertChanges = (0, _react.useCallback)(() => {
    (0, _undoChange.undoChange)(change, rootDiff, docOperations);
  }, [change, rootDiff, docOperations]);
  var handleRevertChangesConfirm = (0, _react.useCallback)(() => {
    setConfirmRevertOpen(true);
  }, []);

  var closeRevertChangesConfirmDialog = _react.default.useCallback(() => {
    setConfirmRevertOpen(false);
  }, []);

  var handleRevertButtonMouseEnter = (0, _react.useCallback)(() => {
    setRevertHovered(true);
  }, []);
  var handleRevertButtonMouseLeave = (0, _react.useCallback)(() => {
    setRevertHovered(false);
  }, []);
  (0, _ui.useClickOutside)(() => setConfirmRevertOpen(false), [revertButtonElement]);
  var content = (0, _react.useMemo)(() => hidden ? null : /*#__PURE__*/_react.default.createElement(_ui.Stack, _extends({
    space: 1,
    as: _FieldChange.FieldChangeContainer
  }, restProps), change.showHeader && /*#__PURE__*/_react.default.createElement(_ChangeBreadcrumb.ChangeBreadcrumb, {
    change: change,
    titlePath: change.titlePath
  }), /*#__PURE__*/_react.default.createElement(FieldWrapper, {
    path: change.path,
    hasHover: revertHovered
  }, /*#__PURE__*/_react.default.createElement(_DiffInspectWrapper.DiffInspectWrapper, {
    change: change,
    as: _FieldChange.DiffBorder,
    "data-revert-field-hover": revertHovered ? '' : undefined,
    "data-error": change.error ? '' : undefined,
    "data-revert-all-hover": true
  }, change.error ? /*#__PURE__*/_react.default.createElement(_ValueError.ValueError, {
    error: change.error
  }) : /*#__PURE__*/_react.default.createElement(_DiffErrorBoundary.DiffErrorBoundary, null, /*#__PURE__*/_react.default.createElement(_DiffContext.DiffContext.Provider, {
    value: {
      path: change.path
    }
  }, /*#__PURE__*/_react.default.createElement(DiffComponent, {
    diff: change.diff,
    schemaType: change.schemaType
  }))), isComparingCurrent && !isPermissionsLoading && (permissions === null || permissions === void 0 ? void 0 : permissions.granted) && /*#__PURE__*/_react.default.createElement(_FieldChange.PopoverWrapper, {
    content: /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 3,
      sizing: "border"
    }, "Are you sure you want to revert the changes?", /*#__PURE__*/_react.default.createElement(_ui.Grid, {
      columns: 2,
      gap: 2,
      marginTop: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
      mode: "ghost",
      onClick: closeRevertChangesConfirmDialog
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      align: "center"
    }, "Cancel")), /*#__PURE__*/_react.default.createElement(_ui.Button, {
      tone: "critical",
      onClick: handleRevertChanges
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      align: "center"
    }, "Revert change")))),
    open: confirmRevertOpen,
    portal: true,
    placement: "left",
    ref: setRevertButtonElement
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    flex: 1
  }, /*#__PURE__*/_react.default.createElement(_RevertChangesButton.RevertChangesButton, {
    onClick: handleRevertChangesConfirm,
    onMouseEnter: handleRevertButtonMouseEnter,
    onMouseLeave: handleRevertButtonMouseLeave,
    selected: confirmRevertOpen,
    disabled: conditionalReadOnly,
    "data-testid": "single-change-revert-button-".concat(change === null || change === void 0 ? void 0 : change.key)
  })))))), [hidden, conditionalReadOnly, confirmRevertOpen, isPermissionsLoading, permissions]);
  return content;
}