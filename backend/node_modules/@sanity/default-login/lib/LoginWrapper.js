"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LoginWrapper;

var _react = _interopRequireDefault(require("react"));

var _logos = require("@sanity/logos");

var _ui = require("@sanity/ui");

var _hooks = require("@sanity/base/hooks");

var _ErrorDialog = _interopRequireDefault(require("./ErrorDialog"));

var _UnauthorizedUser = _interopRequireDefault(require("./UnauthorizedUser"));

var _versionedClient = require("./versionedClient");

var _legacyParts = require("./legacyParts");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultLoadingScreen = /*#__PURE__*/_react.default.createElement(_ui.Container, {
  padding: 4,
  height: "fill"
}, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
  justify: "center",
  align: "center",
  height: "fill"
}, /*#__PURE__*/_react.default.createElement(_ui.Spinner, null)));

var handleRetry = _legacyParts.userStore.actions.retry;

function getProjectId() {
  var _versionedClient$conf = _versionedClient.versionedClient.config(),
      useProjectHostname = _versionedClient$conf.useProjectHostname,
      projectId = _versionedClient$conf.projectId;

  return useProjectHostname ? projectId : undefined;
}

function LoginWrapper(props) {
  var _props$title = props.title,
      title = _props$title === void 0 ? 'Choose a login provider' : _props$title,
      _props$SanityLogo = props.SanityLogo,
      SanityLogo = _props$SanityLogo === void 0 ? _logos.SanityLogo : _props$SanityLogo,
      _props$LoadingScreen = props.LoadingScreen,
      LoadingScreen = _props$LoadingScreen === void 0 ? defaultLoadingScreen : _props$LoadingScreen,
      description = props.description,
      sanityLogo = props.sanityLogo,
      children = props.children;
  var projectId = getProjectId();

  var _useCurrentUser = (0, _hooks.useCurrentUser)(),
      user = _useCurrentUser.value,
      isLoading = _useCurrentUser.isLoading,
      error = _useCurrentUser.error;

  if (sanityLogo) {
    var warning = 'sanityLogo is a deprecated property on LoginWrapper. Pass a React component to the SanityLogo property instead.';
    console.warn(warning); // eslint-disable-line no-console
  }

  if (isLoading) {
    return typeof LoadingScreen === 'function' ? /*#__PURE__*/_react.default.createElement(LoadingScreen, {
      center: true,
      fullscreen: true
    }) : LoadingScreen;
  }

  if (error) {
    return /*#__PURE__*/_react.default.createElement(_ErrorDialog.default, {
      onRetry: handleRetry,
      error: error
    });
  }

  if (!user) {
    return /*#__PURE__*/_react.default.createElement(_legacyParts.LoginDialog, {
      title: title,
      description: description,
      SanityLogo: SanityLogo,
      projectId: projectId
    });
  }

  if (projectId && !user.role) {
    return /*#__PURE__*/_react.default.createElement(_UnauthorizedUser.default, {
      user: user
    });
  }

  return typeof children === 'function' ? children(user) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children);
}