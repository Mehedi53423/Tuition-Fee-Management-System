"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getProviders;

var _defaultLogin = _interopRequireDefault(require("config:@sanity/default-login"));

var _versionedClient = require("../versionedClient");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getProviders() {
  var config = _defaultLogin.default || {};
  return _versionedClient.versionedClient.request({
    uri: '/auth/providers',
    withCredentials: true
  }).then(res => {
    var providers = res.providers,
        thirdPartyLogin = res.thirdPartyLogin,
        sso = res.sso;
    var customProviders = config.providers && config.providers.entries || [];

    if (customProviders.length === 0) {
      return providers;
    }

    var custom = customProviders.map(provider => {
      // A user may want to remove certain login options (eg GitHub) and thus provide "official"
      // login options through the config. These shouldn't be treated as custom login providers
      // which require the third-party login feature, but as the official provider
      var isOfficial = providers.some(official => official.url === provider.url);
      var isSupported = isOfficial || thirdPartyLogin || sso && Object.values(sso).some(Boolean);
      return _objectSpread(_objectSpread({}, provider), {}, {
        custom: !isOfficial,
        supported: isSupported
      });
    });

    if (config.providers.mode === 'replace') {
      return custom;
    } // Append to the list of official providers, but replace any provider that has
    // the same URL with the custom one (allows customizing the title, name)


    return providers.filter(official => custom.some(provider => provider.url !== official.url)).concat(custom);
  });
}