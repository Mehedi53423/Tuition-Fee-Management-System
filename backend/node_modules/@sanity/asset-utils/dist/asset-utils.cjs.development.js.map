{"version":3,"file":"asset-utils.cjs.development.js","sources":["../src/hotspotCrop.ts","../src/utils.ts","../src/constants.ts","../src/asserters.ts","../src/paths.ts","../src/parse.ts","../src/resolve.ts","../src/urls.ts"],"sourcesContent":["import type {SanityImageCrop, SanityImageHotspot} from './types'\n\n/**\n * Default crop (equals to \"whole image\")\n */\nexport const DEFAULT_CROP: Readonly<SanityImageCrop> = Object.freeze({\n  left: 0,\n  top: 0,\n  bottom: 0,\n  right: 0,\n})\n\n/**\n * Default hotspot (equals to horizontal/vertical center, full size of image)\n */\nexport const DEFAULT_HOTSPOT: Readonly<SanityImageHotspot> = Object.freeze({\n  x: 0.5,\n  y: 0.5,\n  height: 1,\n  width: 1,\n})\n\n/**\n * Returns cloned version of the default crop (prevents accidental mutations)\n *\n * @returns Default image crop object\n */\nexport const getDefaultCrop = (): SanityImageCrop => ({...DEFAULT_CROP})\n\n/**\n * Returns cloned version of the default hotspot (prevents accidental mutations)\n *\n * @returns Default image hotspot object\n */\nexport const getDefaultHotspot = (): SanityImageHotspot => ({...DEFAULT_HOTSPOT})\n\n/**\n * Returns whether or not the passed crop has the default values for a crop region\n *\n * @param crop The crop to return whether or not is the default crop\n * @returns True if passed crop matches default, false otherwise\n */\nexport const isDefaultCrop = (crop: SanityImageCrop): boolean => {\n  const {top, bottom, left, right} = crop\n  const {\n    top: defaultTop,\n    bottom: defaultBottom,\n    left: defaultLeft,\n    right: defaultRight,\n  } = DEFAULT_CROP\n\n  return (\n    top === defaultTop && bottom === defaultBottom && left === defaultLeft && right === defaultRight\n  )\n}\n\n/**\n * Returns whether or not the passed hotspot has the default values for a hotspot region\n *\n * @param hotspot The hotspot to return whether or not is the default hotspot\n * @returns True if passed hotspot matches default, false otherwise\n */\nexport const isDefaultHotspot = (hotspot: SanityImageHotspot): boolean => {\n  const {x, y, width, height} = hotspot\n  const {x: defaultX, y: defaultY, width: defaultWidth, height: defaultHeight} = DEFAULT_HOTSPOT\n\n  return x === defaultX && y === defaultY && width === defaultWidth && height === defaultHeight\n}\n","/**\n * @internal\n */\nexport type MethodReturnType<T> = T extends (...args: unknown[]) => infer R ? R : any // eslint-disable-line @typescript-eslint/no-explicit-any\n\n/**\n * @internal\n */\nexport type ArgumentTypes<F extends Function> = F extends (...args: infer A) => unknown ? A : never\n\n/**\n * Error type thrown when the library fails to resolve a value, such as an asset ID,\n * filename or project ID/dataset information.\n *\n * The `input` property holds the value passed as the input, which failed to be\n * resolved to something meaningful.\n */\nexport class UnresolvableError extends Error {\n  unresolvable = true\n\n  // The input may not be a valid source, so let's not type it as one\n  input?: unknown\n\n  constructor(inputSource: unknown, message = 'Failed to resolve asset ID from source') {\n    super(message)\n    this.input = inputSource\n  }\n}\n\n/**\n * Checks whether or not an error instance is of type UnresolvableError\n *\n * @param err - Error to check for unresolvable error type\n * @returns True if the passed error instance appears to be an unresolveable error\n */\nexport function isUnresolvableError(err: Error): err is UnresolvableError {\n  const error = err as UnresolvableError\n  return Boolean(error.unresolvable && 'input' in error)\n}\n\n/**\n * Returns a getter which returns `undefined` instead of throwing,\n * if encountering an `UnresolvableError`\n *\n * @param method - Function to use as resolver\n * @returns Function that returns `undefined` if passed resolver throws UnresolvableError\n * @internal\n */\nexport function getForgivingResolver<T extends Function>(method: T) {\n  return function (...args: ArgumentTypes<T>): MethodReturnType<T> | undefined {\n    try {\n      return method(...args)\n    } catch (err) {\n      if (isUnresolvableError(err)) {\n        return undefined\n      }\n\n      throw err\n    }\n  }\n}\n","/**\n * @internal\n */\nexport const cdnUrl = 'https://cdn.sanity.io'\n\n/**\n * @internal\n */\nexport const fileAssetFilenamePattern = /^([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+\\.[a-z0-9]+$/\n\n/**\n * @internal\n */\nexport const fileAssetIdPattern = /^file-[a-zA-Z0-9_]+-[a-z0-9]+$/\n\n/**\n * @internal\n */\nexport const imageAssetFilenamePattern = /^([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})-\\d+x\\d+\\.[a-z0-9]+$/\n\n/**\n * @internal\n */\nexport const imageAssetIdPattern = /^image-[a-zA-Z0-9_]+-\\d+x\\d+-[a-z0-9]+$/\n\n/**\n * @internal\n */\nexport const assetFilenamePattern = /^([a-zA-Z0-9_]+\\.[a-z0-9]+|[a-zA-Z0-9_]+-\\d+x\\d+\\.[a-z0-9]+)$/\n\n/**\n * @internal\n */\nexport const pathPattern = /^(images|files)\\/([a-z0-9]+)\\/([a-z0-9][-\\w]*)\\//\n\n/**\n * @internal\n */\nexport const idPattern = /^(?:image-[a-zA-Z0-9_]+-\\d+x\\d+-[a-z0-9]+|file-[a-zA-Z0-9_]+-[a-z0-9]+)$/\n\n/**\n * For use in cases where the project and dataset doesn't really matter\n *\n * @internal\n */\nexport const dummyProject = {projectId: 'a', dataset: 'b'}\n","import type {\n  SanityAssetIdStub,\n  SanityAssetObjectStub,\n  SanityAssetPathStub,\n  SanityAssetUrlStub,\n  SanityFileAsset,\n  SanityImageAsset,\n  SanityReference,\n} from './types'\n\n/**\n * Checks whether or not the given source is a Sanity reference\n * (an object containing _ref string key)\n *\n * @param ref - Possible reference\n * @returns Whether or not the passed object is a reference\n */\nexport function isReference(ref: unknown): ref is SanityReference {\n  return isObject(ref) && typeof (ref as SanityReference)._ref === 'string'\n}\n\n/**\n * Checks whether or not the given source is an asset ID stub\n * (an object containing an `_id` property)\n *\n * @param stub - Possible asset id stub\n * @returns Whether or not the passed object is an object id stub\n */\nexport function isAssetIdStub(stub: unknown): stub is SanityAssetIdStub {\n  return isObject(stub) && typeof (stub as SanityAssetIdStub)._id === 'string'\n}\n\n/**\n * Checks whether or not the given source is an asset path stub\n * (an object containing a `path` property)\n *\n * @param stub - Possible asset path stub\n * @returns Whether or not the passed object is an object path stub\n */\nexport function isAssetPathStub(stub: unknown): stub is SanityAssetPathStub {\n  return isObject(stub) && typeof (stub as SanityAssetPathStub).path === 'string'\n}\n\n/**\n * Checks whether or not the given source is an asset URL stub\n * (an object containing a `url` property)\n *\n * @param stub - Possible asset url stub\n * @returns Whether or not the passed object is an object url stub\n */\nexport function isAssetUrlStub(stub: unknown): stub is SanityAssetUrlStub {\n  return isObject(stub) && typeof (stub as SanityAssetUrlStub).url === 'string'\n}\n\n/**\n * Checks whether or not the given source is a (partial) sanity file asset document.\n * Only checks the `_type` property, all other properties _may_ be missing\n *\n * @param src - Source to check\n * @returns Whether or not the given source is a file asset\n */\nexport function isSanityFileAsset(src: unknown): src is SanityFileAsset {\n  return isObject(src) && (src as SanityFileAsset)._type === 'sanity.fileAsset'\n}\n\n/**\n * Checks whether or not the given source is a (partial) sanity image asset document.\n * Only checks the `_type` property, all other properties _may_ be missing\n *\n * @param src - Source to check\n * @returns Whether or not the given source is a file asset\n */\nexport function isSanityImageAsset(src: unknown): src is SanityImageAsset {\n  return isObject(src) && (src as SanityImageAsset)._type === 'sanity.imageAsset'\n}\n\n/**\n * Checks whether or not the given source is an asset object stub\n *\n * @param stub - Possible asset object stub\n * @returns Whether or not the passed object is an object stub\n */\nexport function isAssetObjectStub(stub: unknown): stub is SanityAssetObjectStub {\n  const item = stub as SanityAssetObjectStub\n  return isObject(item) && item.asset && typeof item.asset === 'object'\n}\n\n/**\n * Checks whether or not the passed object is an object (and not `null`)\n *\n * @param obj Item to check whether or not is an object\n * @returns Whether or not `obj` is an object\n * @internal\n */\nexport function isObject(obj: unknown): obj is object {\n  return obj !== null && !Array.isArray(obj) && typeof obj === 'object'\n}\n","import type {\n  FileUrlBuilderOptions,\n  ImageUrlBuilderOptions,\n  PathBuilderOptions,\n  SanityAssetSource,\n  SanityFileUrlParts,\n  SanityImageUrlParts,\n} from './types'\nimport {pathPattern, fileAssetFilenamePattern, imageAssetFilenamePattern, cdnUrl} from './constants'\nimport {isAssetObjectStub, isAssetPathStub, isAssetUrlStub, isReference} from './asserters'\nimport {getForgivingResolver, UnresolvableError} from './utils'\n\n/**\n * Builds the base image path from the minimal set of parts required to assemble it\n *\n * @param asset - An asset-like shape defining ID, dimensions and extension\n * @param options - Project ID and dataset the image belongs to, along with other options\n * @return string\n */\nexport function buildImagePath(\n  asset: ImageUrlBuilderOptions | SanityImageUrlParts,\n  options?: PathBuilderOptions\n): string {\n  const projectId = options?.projectId || asset.projectId\n  const dataset = options?.dataset || asset.dataset\n  if (!projectId || !dataset) {\n    throw new Error('Project details (projectId and dataset) required to resolve path for image')\n  }\n\n  const dimensions =\n    'metadata' in asset ? asset.metadata.dimensions : {width: asset.width, height: asset.height}\n  const originalFilename = 'originalFilename' in asset ? asset.originalFilename : undefined\n  const {assetId, extension, vanityFilename} = asset\n  const {width, height} = dimensions\n  const vanity = getVanityStub(originalFilename, vanityFilename, options)\n\n  return `images/${projectId}/${dataset}/${assetId}-${width}x${height}.${extension}${vanity}`\n}\n\n/**\n * Builds the base image URL from the minimal set of parts required to assemble it\n *\n * @param asset - An asset-like shape defining ID, dimensions and extension\n * @param options - Project ID and dataset the image belongs to\n * @return string\n */\nexport function buildImageUrl(\n  asset: ImageUrlBuilderOptions | SanityImageUrlParts,\n  options?: PathBuilderOptions\n): string {\n  return `${cdnUrl}/${buildImagePath(asset, options)}`\n}\n\n/**\n * Builds the base file path from the minimal set of parts required to assemble it\n *\n * @param asset - An asset-like shape defining ID, dimensions and extension\n * @param options - Project ID and dataset the file belongs to, along with other options\n * @return string\n */\nexport function buildFilePath(\n  asset: FileUrlBuilderOptions | SanityFileUrlParts,\n  options?: PathBuilderOptions\n): string {\n  const projectId = options?.projectId || asset.projectId\n  const dataset = options?.dataset || asset.dataset\n  if (!projectId || !dataset) {\n    throw new Error('Project details (projectId and dataset) required to resolve path for file')\n  }\n\n  const originalFilename = 'originalFilename' in asset ? asset.originalFilename : undefined\n  const {assetId, extension, vanityFilename} = asset\n  const vanity = getVanityStub(originalFilename, vanityFilename, options)\n\n  return `files/${projectId}/${dataset}/${assetId}.${extension}${vanity}`\n}\n\n/**\n * Builds the base file URL from the minimal set of parts required to assemble it\n *\n * @param asset - An asset-like shape defining ID and extension\n * @param options - Project ID and dataset the file belongs to, along with other options\n * @return string\n */\nexport function buildFileUrl(asset: FileUrlBuilderOptions, project?: PathBuilderOptions): string {\n  return `${cdnUrl}/${buildFilePath(asset, project)}`\n}\n\n/**\n * Checks whether or not the given URL contains an asset path\n *\n * @param url - URL or path name\n * @returns Whether or not it contained an asset path\n */\nfunction hasPath(urlOrPath: string): boolean {\n  return pathPattern.test(tryGetUrlPath(urlOrPath) || '')\n}\n\n/**\n * Tries to get the asset path from a given asset source\n *\n * @param src - The source image to infer an asset path from\n * @returns A path if resolvable, undefined otherwise\n */\nexport function tryGetAssetPath(src: SanityAssetSource): string | undefined {\n  if (isAssetObjectStub(src)) {\n    return tryGetAssetPath(src.asset)\n  }\n\n  if (isReference(src)) {\n    return undefined\n  }\n\n  if (typeof src === 'string') {\n    return hasPath(src) ? getUrlPath(src) : undefined\n  }\n\n  if (isAssetPathStub(src)) {\n    return src.path\n  }\n\n  if (isAssetUrlStub(src)) {\n    return getUrlPath(src.url)\n  }\n\n  return undefined\n}\n\n/**\n * Strips the CDN URL and query params from a URL, eg:\n * `https://cdn.sanity.io/images/project/dataset/filename-200x200.jpg?foo=bar` =>\n * `images/project/dataset/filename-200x200.jpg`\n *\n * @param url - URL to get path name from\n * @returns The path of a CDN URL\n * @throws If URL is not a valid Sanity asset URL\n */\nexport function getUrlPath(url: string): string {\n  if (pathPattern.test(url)) {\n    // Already just a path\n    return url\n  }\n\n  if (!url.startsWith(`${cdnUrl}/`)) {\n    throw new UnresolvableError(`Failed to resolve path from URL \"${url}\"`)\n  }\n\n  const qsPos = url.indexOf('?')\n  const toIndex = qsPos === -1 ? undefined : qsPos\n  return url.slice(cdnUrl.length + 1, toIndex)\n}\n\n/**\n * See {@link getUrlPath}\n *\n * @inheritFrom {@link getUrlPath}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetUrlPath = getForgivingResolver(getUrlPath)\n\n/**\n * Strips the CDN URL, path and query params from a URL, eg:\n * `https://cdn.sanity.io/images/project/dataset/filename-200x200.jpg?foo=bar` =>\n * `filename-200x200.jpg`\n *\n * @param url - URL to get filename from\n * @returns The filename of an URL, if URL matches the CDN URL\n * @throws If URL is not a valid Sanity asset URL\n */\nexport function getUrlFilename(url: string): string {\n  const path = tryGetUrlPath(url) || url\n  const filename = path.replace(/^(images|files)\\/[a-z0-9]+\\/[a-z0-9][-\\w]\\/*/, '')\n  if (!isValidFilename(filename)) {\n    throw new UnresolvableError(`Failed to resolve filename from URL \"${url}\"`)\n  }\n\n  return filename\n}\n\n/**\n * See {@link getUrlFilename}\n *\n * @inheritFrom {@link getUrlFilename}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetUrlFilename = getForgivingResolver(getUrlFilename)\n\n/**\n * Checks whether or not a given filename matches the expected Sanity asset filename pattern\n *\n * @param filename - Filename to check for validity\n * @returns Whether or not the specified filename is valid\n */\nexport function isValidFilename(filename: string): boolean {\n  return fileAssetFilenamePattern.test(filename) || imageAssetFilenamePattern.test(filename)\n}\n\n/**\n * Get the \"path stub\" at the end of the path, if the user hasn't explicitly opted out of this behavior\n */\nfunction getVanityStub(\n  originalFilename: string | undefined,\n  vanityFilename: string | undefined,\n  options?: PathBuilderOptions\n): string {\n  const vanity = vanityFilename || originalFilename\n  return options?.useVanityName === false || !vanity ? '' : `/${vanity}`\n}\n","import type {\n  SanityAssetIdParts,\n  SanityFileAssetIdParts,\n  SanityImageAssetIdParts,\n  SanityAssetUrlParts,\n  SanityFileUrlParts,\n  SanityImageUrlParts,\n} from './types'\nimport {\n  cdnUrl,\n  fileAssetIdPattern,\n  imageAssetFilenamePattern,\n  imageAssetIdPattern,\n  pathPattern,\n} from './constants'\nimport {tryGetUrlFilename, isValidFilename} from './paths'\n\n/**\n * @internal\n */\nconst exampleFileId = 'file-027401f31c3ac1e6d78c5d539ccd1beff72b9b11-pdf'\n\n/**\n * @internal\n */\nconst exampleImageId = 'image-027401f31c3ac1e6d78c5d539ccd1beff72b9b11-2000x3000-jpg'\n\n/**\n * Parses a Sanity asset document ID into individual parts (type, id, extension, width/height etc)\n *\n * @param documentId - Document ID to parse into named parts\n * @returns Object of named properties\n * @throws If document ID is invalid\n */\nexport function parseAssetId(documentId: string): SanityAssetIdParts {\n  if (imageAssetIdPattern.test(documentId)) {\n    return parseImageAssetId(documentId)\n  }\n\n  if (fileAssetIdPattern.test(documentId)) {\n    return parseFileAssetId(documentId)\n  }\n\n  throw new Error(`Invalid image/file asset ID: ${documentId}`)\n}\n\n/**\n * Parses a Sanity file asset document ID into individual parts (type, id, extension)\n *\n * @param documentId - File asset document ID to parse into named parts\n * @returns Object of named properties\n * @throws If document ID invalid\n */\nexport function parseFileAssetId(documentId: string): SanityFileAssetIdParts {\n  if (!fileAssetIdPattern.test(documentId)) {\n    throw new Error(\n      `Malformed file asset ID '${documentId}'. Expected an id like \"${exampleFileId}\"`\n    )\n  }\n\n  const [, assetId, extension] = documentId.split('-')\n  return {type: 'file', assetId, extension}\n}\n\n/**\n * Parses a Sanity image asset document ID into individual parts (type, id, extension, width, height)\n *\n * @param documentId - Image asset document ID to parse into named parts\n * @returns Object of named properties\n * @throws If document ID invalid\n */\nexport function parseImageAssetId(documentId: string): SanityImageAssetIdParts {\n  const [, assetId, dimensionString, extension] = documentId.split('-')\n  const [width, height] = (dimensionString || '').split('x').map(Number)\n\n  if (!assetId || !dimensionString || !extension || !(width > 0) || !(height > 0)) {\n    throw new Error(`Malformed asset ID '${documentId}'. Expected an id like \"${exampleImageId}\".`)\n  }\n\n  return {type: 'image', assetId, width, height, extension}\n}\n\n/**\n * Parses a Sanity asset filename into individual parts (type, id, extension, width, height)\n *\n * @param filename - Filename to parse into named parts\n * @returns Object of named properties\n * @throws If image/filename is invalid\n */\nexport function parseAssetFilename(filename: string): SanityAssetIdParts {\n  const file = tryGetUrlFilename(filename) || ''\n  if (!isValidFilename(file)) {\n    throw new Error(`Invalid image/file asset filename: ${filename}`)\n  }\n\n  try {\n    const type = imageAssetFilenamePattern.test(file) ? 'image' : 'file'\n    const assetId = file.replace(/\\.([a-z0-9+]+)$/i, '-$1')\n    return parseAssetId(`${type}-${assetId}`)\n  } catch (err) {\n    throw new Error(`Invalid image/file asset filename: ${filename}`)\n  }\n}\n\n/**\n * Parses a full Sanity asset URL into individual parts\n * (type, project ID, dataset, id, extension, width, height)\n *\n * @param url - Full URL to parse into named parts\n * @returns Object of named properties\n * @throws If URL is invalid or not a Sanity asset URL\n */\nexport function parseAssetUrl(url: string): SanityAssetUrlParts {\n  if (!url.startsWith(cdnUrl)) {\n    throw new Error(`URL is not a valid Sanity asset URL: ${url}`)\n  }\n\n  const path = url.slice(cdnUrl.length).replace(/^\\/+/, '')\n  const [projectPath, , projectId, dataset] = path.match(pathPattern) || []\n  if (!projectId || !dataset) {\n    throw new Error(`URL is not a valid Sanity asset URL: ${url}`)\n  }\n\n  const [filename, vanityFilename] = path.slice(projectPath.length).split('/')\n  const parsed = parseAssetFilename(filename)\n\n  return {\n    ...parsed,\n    projectId,\n    dataset,\n    vanityFilename,\n  }\n}\n\n/**\n * Parses a full Sanity image asset URL into individual parts\n * (type, project ID, dataset, id, extension, width, height)\n *\n * @param url - Full URL to parse into named parts\n * @returns Object of named properties\n * @throws If URL is invalid or not a Sanity image asset URL\n */\nexport function parseImageAssetUrl(url: string): SanityImageUrlParts {\n  const parsed = parseAssetUrl(url)\n  if (parsed.type !== 'image') {\n    throw new Error(`URL is not a valid Sanity image asset URL: ${url}`)\n  }\n\n  return parsed\n}\n\n/**\n * Parses a full Sanity file asset URL into individual parts\n * (type, project ID, dataset, id, extension, width, height)\n *\n * @param url - Full URL to parse into named parts\n * @returns Object of named properties\n * @throws If URL is invalid or not a Sanity file asset URL\n */\nexport function parseFileAssetUrl(url: string): SanityFileUrlParts {\n  const parsed = parseAssetUrl(url)\n  if (parsed.type !== 'file') {\n    throw new Error(`URL is not a valid Sanity file asset URL: ${url}`)\n  }\n\n  return parsed\n}\n\n/**\n * Validates that a given URL is a Sanity asset URL, and returns the asset type if valid.\n *\n * @param url URL to extract asset type from\n * @returns Asset type if valid URL, false otherwise\n * @internal\n */\nexport function getAssetUrlType(url: string): 'image' | 'file' | false {\n  try {\n    return parseAssetUrl(url).type\n  } catch (err) {\n    return false\n  }\n}\n","import type {\n  PathBuilderOptions,\n  ResolvedSanityFile,\n  ResolvedSanityImage,\n  SanityAssetSource,\n  SanityFileAsset,\n  SanityFileObjectStub,\n  SanityFileSource,\n  SanityImageAsset,\n  SanityImageDimensions,\n  SanityImageObjectStub,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport {getDefaultCrop, getDefaultHotspot} from './hotspotCrop'\nimport {getForgivingResolver, UnresolvableError} from './utils'\nimport {parseImageAssetId, parseFileAssetId} from './parse'\nimport {\n  isAssetIdStub,\n  isAssetObjectStub,\n  isAssetPathStub,\n  isAssetUrlStub,\n  isReference,\n  isSanityImageAsset,\n} from './asserters'\nimport {\n  cdnUrl,\n  dummyProject,\n  fileAssetFilenamePattern,\n  idPattern,\n  imageAssetFilenamePattern,\n  pathPattern,\n} from './constants'\nimport {\n  buildFilePath,\n  buildFileUrl,\n  buildImagePath,\n  buildImageUrl,\n  getUrlPath,\n  tryGetAssetPath,\n} from './paths'\nimport {isSanityFileAsset} from '.'\n\n/**\n * Returns the width, height and aspect ratio of a passed image asset, from any\n * inferrable structure (id, url, path, asset document, image object etc)\n *\n * @param src - Input source (image object, asset, reference, id, url, path)\n * @returns Object with width, height and aspect ratio properties\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getImageDimensions(src: SanityImageSource): SanityImageDimensions {\n  const imageId = getAssetDocumentId(src)\n  const {width, height} = parseImageAssetId(imageId)\n  const aspectRatio = width / height\n  return {width, height, aspectRatio}\n}\n\n/**\n * See {@link getImageDimensions}\n *\n * @inheritFrom {@link getImageDimensions}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetImageDimensions = getForgivingResolver(getImageDimensions)\n\n/**\n * Returns the file extension for a given asset\n *\n * @param src - Input source (file/image object, asset, reference, id, url, path)\n * @returns The file extension, if resolvable (no `.` included)\n *\n * @throws {@link UnresolvableError}\n * Throws if passed asset source could not be resolved to an asset ID\n */\nexport function getExtension(src: SanityAssetSource): string {\n  return isFileSource(src)\n    ? getFile(src, dummyProject).asset.extension\n    : getImage(src, dummyProject).asset.extension\n}\n\n/**\n * See {@link getExtension}\n *\n * @inheritFrom {@link getExtension}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetExtension = getForgivingResolver(getExtension)\n\n/**\n * Tries to resolve an image object with as much information as possible,\n * from any inferrable structure (id, url, path, image object etc)\n *\n * @param src - Input source (image object, asset, reference, id, url, path)\n * @param project Project ID and dataset the image belongs to\n * @returns Image object\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getImage(\n  src: SanityImageSource,\n  project?: SanityProjectDetails\n): ResolvedSanityImage {\n  const projectDetails = project || tryGetProject(src)\n  const asset = getImageAsset(src, projectDetails)\n\n  const img = src as SanityImageObjectStub\n  return {\n    asset,\n    crop: img.crop || getDefaultCrop(),\n    hotspot: img.hotspot || getDefaultHotspot(),\n  }\n}\n\n/**\n * See {@link getImage}\n *\n * @inheritFrom {@link getImage}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetImage = getForgivingResolver(getImage)\n\n/**\n * Tries to resolve a (partial) image asset document with as much information as possible,\n * from any inferrable structure (id, url, path, image object etc)\n *\n * @param src - Input source (image object, asset, reference, id, url, path)\n * @param project - Project ID and dataset the image belongs to\n * @returns Image asset document\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getImageAsset(\n  src: SanityImageSource,\n  project?: SanityProjectDetails\n): SanityImageAsset {\n  const projectDetails = project || getProject(src)\n  const pathOptions: PathBuilderOptions = {...projectDetails, useVanityName: false}\n\n  const _id = getAssetDocumentId(src)\n  const sourceObj = src as SanityImageObjectStub\n  const source = (sourceObj.asset || src) as SanityImageAsset\n  const metadata = source.metadata || {}\n  const {assetId, width, height, extension} = parseImageAssetId(_id)\n  const aspectRatio = width / height\n  const baseAsset: SanityImageAsset = {\n    ...(isSanityImageAsset(src) ? src : {}),\n    _id,\n    _type: 'sanity.imageAsset',\n    assetId,\n    extension,\n    metadata: {\n      ...metadata,\n      dimensions: {width, height, aspectRatio},\n    },\n\n    // Placeholders, overwritten below\n    url: '',\n    path: '',\n  }\n\n  return {\n    ...baseAsset,\n    path: buildImagePath(baseAsset, pathOptions),\n    url: buildImageUrl(baseAsset, pathOptions),\n  }\n}\n\n/**\n * See {@link getImageAsset}\n *\n * @inheritFrom {@link getImageAsset}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetImageAsset = getForgivingResolver(getImageAsset)\n\n/**\n * Tries to resolve an file object with as much information as possible,\n * from any inferrable structure (id, url, path, file object etc)\n *\n * @param src - Input source (file object, asset, reference, id, url, path)\n * @param project Project ID and dataset the file belongs to\n * @returns File object\n *\n * @throws {@link UnresolvableError}\n * Throws if passed file source could not be resolved to an asset ID\n */\nexport function getFile(src: SanityFileSource, project?: SanityProjectDetails): ResolvedSanityFile {\n  const projectDetails = project || tryGetProject(src)\n  const asset = getFileAsset(src, projectDetails)\n  return {asset}\n}\n\n/**\n * See {@link getFile}\n *\n * @inheritFrom {@link getFile}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetFile = getForgivingResolver(getFile)\n\n/**\n * Tries to resolve a (partial) file asset document with as much information as possible,\n * from any inferrable structure (id, url, path, file object etc)\n *\n * @param src - Input source (file object, asset, reference, id, url, path)\n * @param options - Project ID and dataset the file belongs to, along with other options\n * @returns File asset document\n *\n * @throws {@link UnresolvableError}\n * Throws if passed file source could not be resolved to an asset ID\n */\nexport function getFileAsset(src: SanityFileSource, options?: PathBuilderOptions): SanityFileAsset {\n  const projectDetails: PathBuilderOptions = {...(options || getProject(src)), useVanityName: false}\n\n  const _id = getAssetDocumentId(src)\n  const sourceObj = src as SanityFileObjectStub\n  const source = (sourceObj.asset || src) as SanityFileAsset\n  const {assetId, extension} = parseFileAssetId(_id)\n  const baseAsset: SanityFileAsset = {\n    ...(isSanityFileAsset(src) ? src : {}),\n    _id,\n    _type: 'sanity.fileAsset',\n    assetId,\n    extension,\n    metadata: source.metadata || {},\n\n    // Placeholders, overwritten below\n    url: '',\n    path: '',\n  }\n\n  return {\n    ...baseAsset,\n    path: buildFilePath(baseAsset, projectDetails),\n    url: buildFileUrl(baseAsset, projectDetails),\n  }\n}\n\n/**\n * See {@link getFileAsset}\n *\n * @inheritFrom {@link getFileAsset}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetFileAsset = getForgivingResolver(getFileAsset)\n\n/**\n * Tries to resolve the asset document ID from any inferrable structure\n *\n * @param src - Input source (image/file object, asset, reference, id, url, path)\n * @returns The asset document ID\n *\n * @throws {@link UnresolvableError}\n * Throws if passed asset source could not be resolved to an asset document ID\n */\nexport function getAssetDocumentId(src: SanityAssetSource): string {\n  const source = isAssetObjectStub(src) ? src.asset : src\n\n  let id = ''\n  if (typeof source === 'string') {\n    id = getIdFromString(source)\n  } else if (isReference(source)) {\n    id = source._ref\n  } else if (isAssetIdStub(source)) {\n    id = source._id\n  } else if (isAssetPathStub(source)) {\n    id = idFromUrl(`${cdnUrl}/${source.path}`)\n  } else if (isAssetUrlStub(source)) {\n    id = idFromUrl(source.url)\n  }\n\n  const hasId = id && idPattern.test(id)\n  if (!hasId) {\n    throw new UnresolvableError(src)\n  }\n\n  return id\n}\n\n/**\n * See {@link getAssetDocumentId}\n *\n * @inheritFrom {@link getAssetDocumentId}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetAssetDocumentId = getForgivingResolver(getAssetDocumentId)\n\n/**\n * Tries to cooerce a string (ID, URL or path) to an image asset ID\n *\n * @param str - Input string (ID, URL or path)\n * @returns string\n *\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getIdFromString(str: string): string {\n  if (idPattern.test(str)) {\n    // Already an ID\n    return str\n  }\n\n  if (str.indexOf(`${cdnUrl}/images`) === 0 || str.indexOf(`${cdnUrl}/files`) === 0) {\n    // Full URL\n    return idFromUrl(str)\n  }\n\n  if (pathPattern.test(str)) {\n    // Path\n    return idFromUrl(`${cdnUrl}/${str}`)\n  }\n\n  if (isFileAssetFilename(str)) {\n    // Just a filename (projectId/dataset irrelevant: just need asset ID)\n    return idFromUrl(`${cdnUrl}/files/a/b/${str}`)\n  }\n\n  if (isImageAssetFilename(str)) {\n    // Just a filename (projectId/dataset irrelevant: just need asset ID)\n    return idFromUrl(`${cdnUrl}/images/a/b/${str}`)\n  }\n\n  throw new UnresolvableError(str)\n}\n\n/**\n * See {@link getIdFromString}\n *\n * @inheritFrom {@link getIdFromString}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetIdFromString = getForgivingResolver(getIdFromString)\n\n/**\n * Converts from a full asset URL to just the asset document ID\n *\n * @param url - A full asset URL to convert\n * @returns string\n */\nfunction idFromUrl(url: string): string {\n  const path = getUrlPath(url)\n  const [type, , , fileName] = path.split('/')\n  const prefix = type.replace(/s$/, '')\n  return `${prefix}-${fileName.replace(/\\./g, '-')}`\n}\n\n/**\n * Resolves project ID and dataset the image belongs to, based on full URL or path\n * @param source - Image URL or path\n * @returns object | undefined\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getProject(src: SanityImageSource): SanityProjectDetails {\n  const path = tryGetAssetPath(src)\n  if (!path) {\n    throw new UnresolvableError(src, 'Failed to resolve project ID and dataset from source')\n  }\n\n  const [, , projectId, dataset] = path.match(pathPattern) || []\n  if (!projectId || !dataset) {\n    throw new UnresolvableError(src, 'Failed to resolve project ID and dataset from source')\n  }\n\n  return {projectId, dataset}\n}\n\n/**\n * See {@link getProject}\n *\n * @inheritFrom {@link getProject}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetProject = getForgivingResolver(getProject)\n\n/**\n * Returns whether or not the passed filename is a valid image asset filename\n *\n * @param filename - Filename to validate\n * @returns Whether or not the filename is an image asset filename\n */\nexport function isImageAssetFilename(filename: string): boolean {\n  return imageAssetFilenamePattern.test(filename)\n}\n\n/**\n * Returns whether or not the passed filename is a valid file asset filename\n *\n * @param filename - Filename to validate\n * @returns Whether or not the filename is a file asset filename\n */\nexport function isFileAssetFilename(filename: string): boolean {\n  return fileAssetFilenamePattern.test(filename)\n}\n\n/**\n * Returns whether or not the passed filename is a valid file or image asset filename\n *\n * @param filename - Filename to validate\n * @returns Whether or not the filename is an asset filename\n */\nexport function isAssetFilename(filename: string): boolean {\n  return isImageAssetFilename(filename) || isFileAssetFilename(filename)\n}\n\n/**\n * Return whether or not the passed source is a file source\n *\n * @param src - Source to check\n * @returns Whether or not the given source is a file source\n */\nexport function isFileSource(src: SanityAssetSource): src is SanityFileSource {\n  const assetId = getAssetDocumentId(src)\n  return assetId.startsWith('file-')\n}\n\n/**\n * Return whether or not the passed source is an image source\n *\n * @param src - Source to check\n * @returns Whether or not the given source is an image source\n */\nexport function isImageSource(src: SanityAssetSource): src is SanityImageSource {\n  const assetId = getAssetDocumentId(src)\n  return assetId.startsWith('image-')\n}\n","import {getAssetUrlType} from './parse'\n\n/**\n * Checks whether or not a given URL is a valid Sanity asset URL\n *\n * @param url URL to test\n * @returns True if url is a valid Sanity asset URL, false otherwise\n */\nexport function isSanityAssetUrl(url: string): boolean {\n  return getAssetUrlType(url) !== false\n}\n\n/**\n * Checks whether or not a given URL is a valid Sanity image asset URL\n *\n * @param url URL to test\n * @returns True if url is a valid Sanity image asset URL, false otherwise\n */\nexport function isSanityImageUrl(url: string): boolean {\n  return getAssetUrlType(url) === 'image'\n}\n\n/**\n * Checks whether or not a given URL is a valid Sanity file asset URL\n *\n * @param url URL to test\n * @returns True if url is a valid Sanity file asset URL, false otherwise\n */\nexport function isSanityFileUrl(url: string): boolean {\n  return getAssetUrlType(url) === 'file'\n}\n"],"names":["DEFAULT_CROP","Object","freeze","left","top","bottom","right","DEFAULT_HOTSPOT","x","y","height","width","getDefaultCrop","getDefaultHotspot","isDefaultCrop","crop","defaultTop","defaultBottom","defaultLeft","defaultRight","isDefaultHotspot","hotspot","defaultX","defaultY","defaultWidth","defaultHeight","UnresolvableError","inputSource","message","input","Error","isUnresolvableError","err","error","Boolean","unresolvable","getForgivingResolver","method","undefined","cdnUrl","fileAssetFilenamePattern","fileAssetIdPattern","imageAssetFilenamePattern","imageAssetIdPattern","pathPattern","idPattern","dummyProject","projectId","dataset","isReference","ref","isObject","_ref","isAssetIdStub","stub","_id","isAssetPathStub","path","isAssetUrlStub","url","isSanityFileAsset","src","_type","isSanityImageAsset","isAssetObjectStub","item","asset","obj","Array","isArray","buildImagePath","options","dimensions","metadata","originalFilename","assetId","extension","vanityFilename","vanity","getVanityStub","buildImageUrl","buildFilePath","buildFileUrl","project","hasPath","urlOrPath","test","tryGetUrlPath","tryGetAssetPath","getUrlPath","startsWith","qsPos","indexOf","toIndex","slice","length","getUrlFilename","filename","replace","isValidFilename","tryGetUrlFilename","useVanityName","exampleFileId","exampleImageId","parseAssetId","documentId","parseImageAssetId","parseFileAssetId","split","type","dimensionString","map","Number","parseAssetFilename","file","parseAssetUrl","match","projectPath","parsed","parseImageAssetUrl","parseFileAssetUrl","getAssetUrlType","getImageDimensions","imageId","getAssetDocumentId","aspectRatio","tryGetImageDimensions","getExtension","isFileSource","getFile","getImage","tryGetExtension","projectDetails","tryGetProject","getImageAsset","img","tryGetImage","getProject","pathOptions","sourceObj","source","baseAsset","tryGetImageAsset","getFileAsset","tryGetFile","tryGetFileAsset","id","getIdFromString","idFromUrl","hasId","tryGetAssetDocumentId","str","isFileAssetFilename","isImageAssetFilename","tryGetIdFromString","fileName","prefix","isAssetFilename","isImageSource","isSanityAssetUrl","isSanityImageUrl","isSanityFileUrl"],"mappings":"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"}