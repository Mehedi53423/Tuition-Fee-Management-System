"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = normalizeValidationRules;

var _Rule = _interopRequireDefault(require("../Rule"));

var _slugValidator = require("../validators/slugValidator");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ruleConstraintTypes = {
  array: true,
  boolean: true,
  date: true,
  number: true,
  object: true,
  string: true
};

var isRuleConstraint = typeString => typeString in ruleConstraintTypes;

function getTypeChain(type, visited) {
  if (!type) return [];
  if (visited.has(type)) return [];
  visited.add(type);
  var next = type.type ? getTypeChain(type.type, visited) : [];
  return [...next, type];
}

function baseRuleReducer(inputRule, type) {
  var baseRule = inputRule;

  if (isRuleConstraint(type.jsonType)) {
    baseRule = baseRule.type(type.jsonType);
  }

  var typeOptionsList = // if type.options is truthy
  (type === null || type === void 0 ? void 0 : type.options) && // and type.options is an object (non-null from the previous)
  typeof type.options === 'object' && // and if `list` is in options
  'list' in type.options && // then finally access the list
  type.options.list;

  if (Array.isArray(typeOptionsList)) {
    baseRule = baseRule.valid(typeOptionsList.map(option => extractValueFromListOption(option, type)));
  }

  if (type.name === 'datetime') return baseRule.type('Date');
  if (type.name === 'date') return baseRule.type('Date');
  if (type.name === 'url') return baseRule.uri();
  if (type.name === 'slug') return baseRule.custom(_slugValidator.slugValidator);
  if (type.name === 'reference') return baseRule.reference();
  if (type.name === 'email') return baseRule.email();
  return baseRule;
}

function hasValueField(typeDef) {
  if (!typeDef) return false;
  if (!('fields' in typeDef) && typeDef.type) return hasValueField(typeDef.type);
  if (!('fields' in typeDef)) return false;
  if (!Array.isArray(typeDef.fields)) return false;
  return typeDef.fields.some(field => field.name === 'value');
}

function extractValueFromListOption(option, typeDef) {
  // If you define a `list` option with object items, where the item has a `value` field,
  // we don't want to treat that as the value but rather the surrounding object
  // This differs from the case where you have a title/value pair setup for a string/number, for instance
  if (typeDef.jsonType === 'object' && hasValueField(typeDef)) return option;
  return option.value === undefined ? option : option.value;
}
/**
 * Takes in `SchemaValidationValue` and returns an array of `Rule` instances.
 */


function normalizeValidationRules(typeDef) {
  if (!typeDef) {
    return [];
  }

  var validation = typeDef.validation;

  if (Array.isArray(validation)) {
    return validation.flatMap(i => normalizeValidationRules(_objectSpread(_objectSpread({}, typeDef), {}, {
      validation: i
    })));
  }

  if (validation instanceof _Rule.default) {
    return [validation];
  }

  var baseRule = // using an object + Object.values to de-dupe the type chain by type name
  Object.values(getTypeChain(typeDef, new Set()).reduce((acc, type) => {
    acc[type.name] = type;
    return acc;
  }, {})).reduce(baseRuleReducer, new _Rule.default(typeDef));

  if (!validation) {
    return [baseRule];
  }

  return normalizeValidationRules(_objectSpread(_objectSpread({}, typeDef), {}, {
    validation: validation(baseRule)
  }));
}