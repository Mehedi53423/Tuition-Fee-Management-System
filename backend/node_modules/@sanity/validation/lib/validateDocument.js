"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = validateDocument;
exports.resolveTypeForArrayItem = resolveTypeForArrayItem;
exports.validateItem = validateItem;

var _uniqBy2 = _interopRequireDefault(require("lodash/uniqBy"));

var _types = require("@sanity/types");

var _typeString = _interopRequireDefault(require("./util/typeString"));

var _ValidationError = _interopRequireDefault(require("./ValidationError"));

var _normalizeValidationRules = _interopRequireDefault(require("./util/normalizeValidationRules"));

var _excluded = ["value", "type", "path", "parent"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var isRecord = maybeRecord => typeof maybeRecord === 'object' && maybeRecord !== null && !Array.isArray(maybeRecord);

var isNonNullable = value => value !== null && value !== undefined;
/**
 * @internal
 */


function resolveTypeForArrayItem(item, candidates) {
  // if there is only one type available, assume that it's the correct one
  if (candidates.length === 1) return candidates[0];

  var itemType = (0, _types.isTypedObject)(item) && item._type;

  var primitive = item === undefined || item === null || !itemType && (0, _typeString.default)(item).toLowerCase();

  if (primitive && primitive !== 'object') {
    return candidates.find(candidate => candidate.jsonType === primitive);
  }

  return candidates.find(candidate => {
    var _candidate$type;

    return ((_candidate$type = candidate.type) === null || _candidate$type === void 0 ? void 0 : _candidate$type.name) === itemType;
  }) || candidates.find(candidate => candidate.name === itemType) || candidates.find(candidate => candidate.name === 'object' && primitive === 'object');
}

function validateDocument(_x, _x2, _x3) {
  return _validateDocument.apply(this, arguments);
}
/**
 * this is used make optional properties required by replacing optionals with
 * `T[P] | undefined`. this is used to prevent errors in `validateItem` where
 * an option from a previous invocation would be incorrectly passed down.
 *
 * https://medium.com/terria/typescript-transforming-optional-properties-to-required-properties-that-may-be-undefined-7482cb4e1585
 */


function _validateDocument() {
  _validateDocument = _asyncToGenerator(function* (doc, schema, context) {
    var documentType = schema.get(doc._type);

    if (!documentType) {
      console.warn('Schema type for object type "%s" not found, skipping validation', doc._type);
      return [];
    }

    try {
      return yield validateItem({
        parent: undefined,
        value: doc,
        path: [],
        document: doc,
        type: documentType,
        getDocumentExists: context === null || context === void 0 ? void 0 : context.getDocumentExists
      });
    } catch (err) {
      console.error(err);
      return [{
        type: 'validation',
        level: 'error',
        path: [],
        item: new _ValidationError.default(err === null || err === void 0 ? void 0 : err.message)
      }];
    }
  });
  return _validateDocument.apply(this, arguments);
}

function validateItem(_x4) {
  return _validateItem.apply(this, arguments);
}

function _validateItem() {
  _validateItem = _asyncToGenerator(function* (_ref) {
    var value = _ref.value,
        type = _ref.type,
        _ref$path = _ref.path,
        path = _ref$path === void 0 ? [] : _ref$path,
        parent = _ref.parent,
        restOfContext = _objectWithoutProperties(_ref, _excluded);

    var rules = (0, _normalizeValidationRules.default)(type); // run validation for the current value

    var selfChecks = rules.map(rule => rule.validate(value, _objectSpread(_objectSpread({}, restOfContext), {}, {
      parent,
      path,
      type
    }))); // run validation for nested values (conditionally)

    var nestedChecks = [];
    var selfIsRequired = rules.some(rule => rule.isRequired());
    var shouldRunNestedObjectValidation = // run nested validation for objects
    (type === null || type === void 0 ? void 0 : type.jsonType) === 'object' && ( // if the value is truthy
    !!value || // or
    // (the value is null or undefined) and the top-level value is required
    (value === null || value === undefined) && selfIsRequired);

    if (shouldRunNestedObjectValidation) {
      var fieldTypes = type.fields.reduce((acc, field) => {
        acc[field.name] = field.type;
        return acc;
      }, {}); // Validation for rules set at the object level with `Rule.fields({/* ... */})`

      nestedChecks = nestedChecks.concat(rules.map(rule => rule._fieldRules).filter(isNonNullable).flatMap(fieldResults => Object.entries(fieldResults)).flatMap(_ref2 => {
        var _ref3 = _slicedToArray(_ref2, 2),
            name = _ref3[0],
            validation = _ref3[1];

        var fieldType = fieldTypes[name];
        return (0, _normalizeValidationRules.default)(_objectSpread(_objectSpread({}, fieldType), {}, {
          validation
        })).map(subRule => {
          var nestedValue = isRecord(value) ? value[name] : undefined;
          return subRule.validate(nestedValue, _objectSpread(_objectSpread({}, restOfContext), {}, {
            parent: value,
            path: path.concat(name),
            type: fieldType
          }));
        });
      })); // Validation from each field's schema `validation: Rule => {/* ... */}` function

      nestedChecks = nestedChecks.concat(type.fields.map(field => validateItem(_objectSpread(_objectSpread({}, restOfContext), {}, {
        parent: value,
        value: isRecord(value) ? value[field.name] : undefined,
        path: path.concat(field.name),
        type: field.type
      }))));
    } // note: unlike objects, arrays should not run nested validation for undefined
    // values because we won't have a valid path to put a marker (i.e. missing the
    // key or index in the path) and the downstream form builder won't have a
    // valid target component


    var shouldRunNestedValidationForArrays = (type === null || type === void 0 ? void 0 : type.jsonType) === 'array' && Array.isArray(value);

    if (shouldRunNestedValidationForArrays) {
      nestedChecks = nestedChecks.concat(value.map(item => validateItem(_objectSpread(_objectSpread({}, restOfContext), {}, {
        parent: value,
        value: item,
        path: path.concat((0, _types.isKeyedObject)(item) ? {
          _key: item._key
        } : value.indexOf(item)),
        type: resolveTypeForArrayItem(item, type.of)
      }))));
    } // markDefs also do no run nested validation if the parent object is undefined
    // for a similar reason to arrays


    var shouldRunNestedValidationForMarkDefs = (0, _types.isBlock)(value) && value.markDefs.length && (0, _types.isBlockSchemaType)(type);

    if (shouldRunNestedValidationForMarkDefs) {
      var _type$fields = _slicedToArray(type.fields, 1),
          spanChildrenField = _type$fields[0];

      var spanType = spanChildrenField.type.of.find(_types.isSpanSchemaType);
      var annotations = ((spanType === null || spanType === void 0 ? void 0 : spanType.annotations) || []).reduce((map, annotationType) => {
        map.set(annotationType.name, annotationType);
        return map;
      }, new Map());
      nestedChecks = nestedChecks.concat(value.markDefs.map(markDef => validateItem(_objectSpread(_objectSpread({}, restOfContext), {}, {
        parent: value,
        value: markDef,
        path: path.concat(['markDefs', {
          _key: markDef._key
        }]),
        type: annotations.get(markDef._type)
      }))));
    }

    var results = (yield Promise.all([...selfChecks, ...nestedChecks])).flat(); // run `uniqBy` if `_fieldRules` are present because they can
    // cause repeat markers

    if (rules.some(rule => rule._fieldRules)) {
      return (0, _uniqBy2.default)(results, rule => JSON.stringify(rule));
    }

    return results;
  });
  return _validateItem.apply(this, arguments);
}