"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConditionalReadOnlyField = void 0;

var _react = _interopRequireWildcard(require("react"));

var _hooks = require("@sanity/base/hooks");

var _internal = require("@sanity/base/_internal");

var _withDocument = _interopRequireDefault(require("../../../utils/withDocument"));

var _excluded = ["readOnly"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ConditionalReadOnlyField = _ref => {
  var readOnly = _ref.readOnly,
      rest = _objectWithoutProperties(_ref, _excluded);

  return typeof readOnly === 'function' ? /*#__PURE__*/_react.default.createElement(ConditionalReadOnlyWithDocument, _extends({}, rest, {
    readOnly: readOnly
  })) : /*#__PURE__*/_react.default.createElement(_internal.ConditionalReadOnlyContextProvider, {
    readOnly: readOnly
  }, rest.children);
};

exports.ConditionalReadOnlyField = ConditionalReadOnlyField;
var ConditionalReadOnlyWithDocument = (0, _withDocument.default)( /*#__PURE__*/(0, _react.forwardRef)(function ConditionalReadOnlyWithDocument(props, ref
/* ignore ref as there's no place to put it */
) {
  var readOnly = props.readOnly,
      value = props.value,
      parent = props.parent,
      document = props.document,
      children = props.children;
  var isReadOnly = (0, _hooks.unstable_useConditionalProperty)({
    checkProperty: readOnly,
    checkPropertyKey: 'readOnly',
    value,
    parent,
    document
  });
  return /*#__PURE__*/_react.default.createElement(_internal.ConditionalReadOnlyContextProvider, {
    readOnly: isReadOnly
  }, children);
}));