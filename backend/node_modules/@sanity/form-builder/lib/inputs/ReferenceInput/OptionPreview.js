"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OptionPreview = OptionPreview;

var _react = _interopRequireDefault(require("react"));

var _ui = require("@sanity/ui");

var _Alert = require("../../components/Alert");

var _useReferenceInfo2 = require("./useReferenceInfo");

var _ReferencePreview = require("./ReferencePreview");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable max-nested-callbacks,no-nested-ternary */

/**
 * Used to preview a referenced type
 * Takes the reference type as props
 * @param props
 * @constructor
 */
function OptionPreview(props) {
  var _useReferenceInfo = (0, _useReferenceInfo2.useReferenceInfo)(props.id, props.getReferenceInfo),
      isLoading = _useReferenceInfo.isLoading,
      referenceInfo = _useReferenceInfo.result,
      error = _useReferenceInfo.error;

  if (isLoading) {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.TextSkeleton, {
      style: {
        maxWidth: 320
      },
      radius: 1,
      animated: true
    }), /*#__PURE__*/_react.default.createElement(_ui.TextSkeleton, {
      style: {
        maxWidth: 200
      },
      radius: 1,
      size: 1,
      animated: true
    }));
  }

  if (error) {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 1
    }, /*#__PURE__*/_react.default.createElement(_Alert.Alert, {
      title: "Failed to load referenced document"
    }, "Error: ", error.message));
  }

  if (!referenceInfo) {
    return null;
  }

  if (referenceInfo.availability.reason === 'PERMISSION_DENIED') {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 1
    }, "Insufficient permissions to view this document");
  }

  var refType = props.type.to.find(toType => toType.name === referenceInfo.type);

  if (!refType) {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 1
    }, "Search returned a type that's not valid for this reference: \"$", referenceInfo.type, "\"");
  }

  return referenceInfo && refType && /*#__PURE__*/_react.default.createElement(_ReferencePreview.ReferencePreview, {
    availability: referenceInfo.availability,
    id: referenceInfo.id,
    layout: "default",
    preview: referenceInfo.preview,
    refType: refType,
    showTypeLabel: props.type.to.length > 1
  });
}