"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PreviewReferenceValue = PreviewReferenceValue;

var _react = _interopRequireDefault(require("react"));

var _ui = require("@sanity/ui");

var _Preview = _interopRequireDefault(require("../../Preview"));

var _ReferencePreview = require("./ReferencePreview");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function PreviewReferenceValue(props) {
  var _referenceInfo$result;

  var referenceInfo = props.referenceInfo,
      type = props.type,
      value = props.value;

  if (referenceInfo.isLoading || referenceInfo.error) {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.TextSkeleton, {
      style: {
        maxWidth: 320
      },
      radius: 1,
      animated: !referenceInfo.error
    }), /*#__PURE__*/_react.default.createElement(_ui.TextSkeleton, {
      style: {
        maxWidth: 200
      },
      radius: 1,
      size: 1,
      animated: !referenceInfo.error
    }));
  }

  var showTypeLabel = type.to.length > 1;

  if (referenceInfo.result.availability.reason === 'NOT_FOUND' && value._strengthenOnPublish) {
    var _refType = type.to.find(toType => {
      var _value$_strengthenOnP;

      return toType.name === (value === null || value === void 0 ? void 0 : (_value$_strengthenOnP = value._strengthenOnPublish) === null || _value$_strengthenOnP === void 0 ? void 0 : _value$_strengthenOnP.type);
    });

    if (!_refType) {
      return /*#__PURE__*/_react.default.createElement("div", null, "Invalid reference type");
    }

    if (value._strengthenOnPublish) {
      var _value$_strengthenOnP2;

      var stub = {
        _id: value._ref,
        _type: (_value$_strengthenOnP2 = value._strengthenOnPublish) === null || _value$_strengthenOnP2 === void 0 ? void 0 : _value$_strengthenOnP2.type
      };
      return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
        align: "center"
      }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
        flex: 1
      }, /*#__PURE__*/_react.default.createElement(_Preview.default, {
        type: _refType,
        value: stub,
        layout: "default"
      })), /*#__PURE__*/_react.default.createElement(_ui.Box, null, /*#__PURE__*/_react.default.createElement(_ui.Inline, {
        space: 4
      }, showTypeLabel && /*#__PURE__*/_react.default.createElement(_ui.Label, {
        size: 1,
        muted: true
      }, _refType.title))));
    }
  }

  var refTypeName = (_referenceInfo$result = referenceInfo.result) === null || _referenceInfo$result === void 0 ? void 0 : _referenceInfo$result.type;
  var refType = type.to.find(toType => toType.name === refTypeName);

  if (!refType) {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 2
    }, "The referenced document is of invalid type: (", refTypeName || 'unknown', ")", /*#__PURE__*/_react.default.createElement("pre", null, JSON.stringify(value, null, 2)));
  }

  return /*#__PURE__*/_react.default.createElement(_ReferencePreview.ReferencePreview, {
    availability: referenceInfo.result.availability,
    id: value._ref,
    layout: "default",
    preview: referenceInfo.result.preview,
    refType: refType,
    showTypeLabel: showTypeLabel
  });
}