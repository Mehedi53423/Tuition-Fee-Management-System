"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CreateButton = CreateButton;

var _react = _interopRequireDefault(require("react"));

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _components = require("@sanity/base/components");

var _excluded = ["enabled"],
    _excluded2 = ["createOptions", "onCreate", "id"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ConditionalTooltip(props) {
  var enabled = props.enabled,
      rest = _objectWithoutProperties(props, _excluded);

  return enabled ? /*#__PURE__*/_react.default.createElement(_ui.Tooltip, rest) : props.children;
}

var INLINE_BLOCK_STYLE = {
  display: 'inline-flex'
};
var FULL_WIDTH = {
  width: '100%'
};

function CreateButton(props) {
  var createOptions = props.createOptions,
      onCreate = props.onCreate,
      id = props.id,
      rest = _objectWithoutProperties(props, _excluded2);

  var canCreateAny = createOptions.some(option => option.permission.granted);

  if (!canCreateAny) {
    return /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
      content: /*#__PURE__*/_react.default.createElement(_ui.Box, {
        padding: 2
      }, /*#__PURE__*/_react.default.createElement(_components.InsufficientPermissionsMessage, {
        operationLabel: "create a new reference"
      }))
    }, /*#__PURE__*/_react.default.createElement("div", {
      style: INLINE_BLOCK_STYLE
    }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
      text: "Create new",
      mode: "ghost",
      disabled: true,
      icon: _icons.AddIcon,
      style: FULL_WIDTH
    })));
  }

  return createOptions.length > 1 ? /*#__PURE__*/_react.default.createElement(_ui.MenuButton, {
    button: /*#__PURE__*/_react.default.createElement(_ui.Button, _extends({}, rest, {
      text: "Create new\u2026",
      mode: "ghost",
      icon: _icons.AddIcon
    })),
    id: id,
    menu: /*#__PURE__*/_react.default.createElement(_ui.Menu, {
      ref: props.menuRef
    }, createOptions.map(createOption => /*#__PURE__*/_react.default.createElement(ConditionalTooltip, {
      enabled: !createOption.permission.granted,
      key: createOption.id,
      content: /*#__PURE__*/_react.default.createElement(_ui.Box, {
        padding: 2
      }, /*#__PURE__*/_react.default.createElement(_components.InsufficientPermissionsMessage, {
        operationLabel: "create this type of document"
      })),
      portal: true
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
      disabled: !createOption.permission.granted,
      icon: createOption.icon,
      text: createOption.title,
      onClick: () => onCreate(createOption)
    }))))),
    placement: "right",
    popover: {
      portal: true,
      tone: 'default'
    }
  }) : /*#__PURE__*/_react.default.createElement(_ui.Button, _extends({}, rest, {
    text: "Create new",
    mode: "ghost",
    disabled: !createOptions[0].permission.granted,
    onClick: () => onCreate(createOptions[0]),
    icon: _icons.AddIcon
  }));
}