"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useReferenceInfo = useReferenceInfo;

var _react = require("react");

var _operators = require("rxjs/operators");

var _rxjs = require("rxjs");

var _reactRx = require("react-rx");

var _usePrevious = require("../../hooks/usePrevious");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// eslint-disable-next-line @typescript-eslint/no-empty-function
var noop = () => {};

var INITIAL_LOADING_STATE = {
  isLoading: true,
  result: undefined,
  error: undefined,
  retry: noop
};
var EMPTY_STATE = {
  isLoading: false,
  result: undefined,
  error: undefined,
  retry: noop
};

function useReferenceInfo(id, getReferenceInfo) {
  var _useState = (0, _react.useState)(0),
      _useState2 = _slicedToArray(_useState, 2),
      retryAttempt = _useState2[0],
      setRetryAttempt = _useState2[1];

  var retry = (0, _react.useCallback)(() => {
    setRetryAttempt(current => current + 1);
  }, []);
  var referenceInfo = (0, _reactRx.useMemoObservable)(() => (0, _rxjs.of)(id).pipe((0, _operators.concatMap)(refId => refId ? getReferenceInfo(refId).pipe((0, _operators.map)(result => ({
    isLoading: false,
    result,
    error: undefined,
    retry
  })), (0, _operators.startWith)(INITIAL_LOADING_STATE), (0, _operators.catchError)(err => {
    console.error(err);
    return (0, _rxjs.of)({
      isLoading: false,
      result: undefined,
      error: err,
      retry
    });
  })) : (0, _rxjs.of)(EMPTY_STATE))), [retryAttempt, getReferenceInfo, id, retry], INITIAL_LOADING_STATE); // workaround for a "bug" with useMemoObservable that doesn't
  // return the initial value upon resubscription

  var previousId = (0, _usePrevious.usePrevious)(id, id);

  if (previousId !== id) {
    return INITIAL_LOADING_STATE;
  }

  return referenceInfo;
}