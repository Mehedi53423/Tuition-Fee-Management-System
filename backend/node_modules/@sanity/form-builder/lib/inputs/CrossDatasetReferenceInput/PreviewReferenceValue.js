"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PreviewReferenceValue = PreviewReferenceValue;

var _react = _interopRequireDefault(require("react"));

var _ui = require("@sanity/ui");

var _CrossDatasetReferencePreview = require("./CrossDatasetReferencePreview");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function PreviewReferenceValue(props) {
  var _referenceInfo$result;

  var value = props.value,
      type = props.type,
      showStudioUrlIcon = props.showStudioUrlIcon,
      hasStudioUrl = props.hasStudioUrl,
      referenceInfo = props.referenceInfo;

  if (referenceInfo.isLoading || referenceInfo.error) {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.TextSkeleton, {
      style: {
        maxWidth: 320
      },
      radius: 1,
      animated: !referenceInfo.error
    }), /*#__PURE__*/_react.default.createElement(_ui.TextSkeleton, {
      style: {
        maxWidth: 200
      },
      radius: 1,
      size: 1,
      animated: !referenceInfo.error
    }));
  }

  var showTypeLabel = type.to.length > 1;
  var refTypeName = (_referenceInfo$result = referenceInfo.result) === null || _referenceInfo$result === void 0 ? void 0 : _referenceInfo$result.type;
  var refType = type.to.find(toType => toType.type === refTypeName);

  if (referenceInfo.result.availability.available && !refType) {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      as: "p"
    }, "The referenced document is of invalid type: (", refTypeName || 'unknown', ")", /*#__PURE__*/_react.default.createElement("pre", null, JSON.stringify(value, null, 2))));
  }

  return /*#__PURE__*/_react.default.createElement(_CrossDatasetReferencePreview.CrossDatasetReferencePreview, {
    availability: referenceInfo.result.availability,
    hasStudioUrl: hasStudioUrl,
    showStudioUrlIcon: showStudioUrlIcon,
    preview: referenceInfo.result.preview,
    refType: refType,
    projectId: type.projectId,
    dataset: type.dataset,
    id: value._ref,
    showTypeLabel: showTypeLabel
  });
}