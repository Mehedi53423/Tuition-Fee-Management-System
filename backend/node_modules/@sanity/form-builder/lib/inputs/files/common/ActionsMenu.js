"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ActionsMenu = ActionsMenu;

var _react = _interopRequireWildcard(require("react"));

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _FileInputMenuItem = require("./FileInputMenuItem/FileInputMenuItem");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ActionsMenu(props) {
  var onUpload = props.onUpload,
      onReset = props.onReset,
      readOnly = props.readOnly,
      accept = props.accept,
      directUploads = props.directUploads,
      browse = props.browse,
      downloadUrl = props.downloadUrl,
      copyUrl = props.copyUrl;

  var _useToast = (0, _ui.useToast)(),
      pushToast = _useToast.push;

  var handleCopyURL = (0, _react.useCallback)(() => {
    navigator.clipboard.writeText(copyUrl);
    pushToast({
      closable: true,
      status: 'success',
      title: 'The url is copied to the clipboard'
    });
  }, [pushToast, copyUrl]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Label, {
    muted: true,
    size: 1
  }, "Replace")), /*#__PURE__*/_react.default.createElement(_FileInputMenuItem.FileInputMenuItem, {
    icon: _icons.UploadIcon,
    mode: "bleed",
    onSelect: onUpload,
    accept: accept,
    text: "Upload",
    "data-testid": "file-input-upload-button",
    disabled: readOnly || !directUploads,
    fontSize: 2
  }), browse, /*#__PURE__*/_react.default.createElement(_ui.MenuDivider, null), /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
    as: "a",
    icon: _icons.DownloadIcon,
    text: "Download",
    href: downloadUrl
  }), /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
    icon: _icons.ClipboardIcon,
    text: "Copy URL",
    onClick: handleCopyURL
  }), /*#__PURE__*/_react.default.createElement(_ui.MenuDivider, null), /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
    tone: "critical",
    icon: _icons.ResetIcon,
    text: "Clear field",
    onClick: onReset,
    disabled: readOnly,
    "data-testid": "file-input-clear"
  }));
}