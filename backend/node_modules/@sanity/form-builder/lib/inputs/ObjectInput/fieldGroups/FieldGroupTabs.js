"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FieldGroupTabs = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _GroupTab = require("./GroupTab");

var _excluded = ["fields"],
    _excluded2 = ["fields"],
    _excluded3 = ["onClick", "disabled"];

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var Root = (0, _styledComponents.default)(_ui.ElementQuery)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  /* Hide on small screens */\n  &[data-eq-max~='0'] [data-ui='TabList'] {\n    display: none;\n  }\n\n  /* Hide on medium to large screens */\n  [data-ui='Select'] {\n    display: none;\n  }\n\n  /* Show on small screens */\n  &[data-eq-max~='0'] [data-ui='Select'] {\n    display: block;\n  }\n"])));
/* For medium to large screens, use TabList and Tab from Sanity UI  */

var GroupTabs = _ref => {
  var inputId = _ref.inputId,
      groups = _ref.groups,
      onClick = _ref.onClick,
      selectedName = _ref.selectedName,
      _ref$shouldAutoFocus = _ref.shouldAutoFocus,
      shouldAutoFocus = _ref$shouldAutoFocus === void 0 ? true : _ref$shouldAutoFocus,
      disabled = _ref.disabled;
  return /*#__PURE__*/_react.default.createElement(_ui.TabList, {
    space: 2,
    "data-testid": "field-group-tabs"
  }, groups.map(group => {
    var _ref2;

    var fields = group.fields,
        restGroup = _objectWithoutProperties(group, _excluded);

    if (!fields || fields.length === 0) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement(_GroupTab.GroupTab, _extends({
      key: "".concat(inputId, "-").concat(group.name, "-tab"),
      "aria-controls": "".concat(inputId, "-field-group-fields"),
      onClick: onClick,
      selected: (_ref2 = selectedName === group.name) !== null && _ref2 !== void 0 ? _ref2 : group.default,
      autoFocus: selectedName === group.name && shouldAutoFocus,
      parent: groups,
      disabled: disabled
    }, restGroup));
  }).filter(Boolean));
};
/* For small screens, use Select from Sanity UI  */


var GroupSelect = _ref3 => {
  var groups = _ref3.groups,
      inputId = _ref3.inputId,
      onSelect = _ref3.onSelect,
      selectedName = _ref3.selectedName,
      _ref3$shouldAutoFocus = _ref3.shouldAutoFocus,
      shouldAutoFocus = _ref3$shouldAutoFocus === void 0 ? true : _ref3$shouldAutoFocus,
      disabled = _ref3.disabled;
  var handleSelect = (0, _react.useCallback)(event => {
    onSelect(event.currentTarget.value);
  }, [onSelect]);
  return /*#__PURE__*/_react.default.createElement(_ui.Select, {
    fontSize: 2,
    onChange: handleSelect,
    muted: true,
    "data-testid": "field-group-select",
    "aria-label": "Field groups",
    autoFocus: shouldAutoFocus,
    disabled: disabled,
    value: selectedName
  }, groups.map(group => {
    // Separate hidden in order to resolve it to a boolean type
    var fields = group.fields,
        restGroup = _objectWithoutProperties(group, _excluded2);

    if (!fields || fields.length === 0) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement(_GroupTab.GroupOption, _extends({
      key: "".concat(inputId, "-").concat(group.name, "-tab"),
      "aria-controls": "".concat(inputId, "-field-group-fields"),
      selected: selectedName === group.name,
      parent: groups
    }, restGroup));
  }));
};

var FieldGroupTabs = /*#__PURE__*/_react.default.memo(function FieldGroupTabs(_ref4) {
  var onClick = _ref4.onClick,
      _ref4$disabled = _ref4.disabled,
      disabled = _ref4$disabled === void 0 ? false : _ref4$disabled,
      props = _objectWithoutProperties(_ref4, _excluded3);

  var groups = props.groups;
  var handleClick = (0, _react.useCallback)(groupName => {
    onClick(groupName);
  }, [onClick]);
  return /*#__PURE__*/_react.default.createElement(Root, {
    "data-testid": "field-group-root"
  }, /*#__PURE__*/_react.default.createElement(GroupTabs, _extends({}, props, {
    disabled: disabled,
    onClick: handleClick
  })), /*#__PURE__*/_react.default.createElement(GroupSelect, _extends({}, props, {
    disabled: disabled,
    onSelect: handleClick
  })));
});

exports.FieldGroupTabs = FieldGroupTabs;