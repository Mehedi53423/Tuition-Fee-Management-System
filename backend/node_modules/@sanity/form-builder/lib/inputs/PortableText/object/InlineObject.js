"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InlineObject = void 0;

var _react = _interopRequireWildcard(require("react"));

var _color = require("@sanity/color");

var _portableTextEditor = require("@sanity/portable-text-editor");

var _paths = require("@sanity/util/paths");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _ui = require("@sanity/ui");

var _Preview = _interopRequireDefault(require("../../../Preview"));

var _legacyParts = require("../../../legacyParts");

var _InlineObjectToolbarPopover = require("./InlineObjectToolbarPopover");

var _templateObject, _templateObject2, _templateObject3;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function rootStyle(_ref) {
  var theme = _ref.theme;
  var _theme$sanity = theme.sanity,
      color = _theme$sanity.color,
      radius = _theme$sanity.radius;
  return (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    line-height: 0;\n    border-radius: ", "px;\n    padding: 2px;\n    box-shadow: inset 0 0 0 1px var(--card-border-color);\n    height: calc(1em - 1px);\n    margin-top: 0.0625em;\n    cursor: default;\n\n    &:not([hidden]) {\n      display: inline-flex;\n      align-items: center;\n      vertical-align: top;\n    }\n\n    &[data-ready-only] {\n      cursor: default;\n    }\n\n    &[data-focused] {\n      box-shadow: inset 0 0 0 1px ", ";\n      color: ", ";\n    }\n\n    &:not([data-focused]):not([data-selected]) {\n      @media (hover: hover) {\n        &:hover {\n          --card-border-color: ", ";\n        }\n      }\n    }\n\n    &[data-markers] {\n      --card-bg-color: ", ";\n    }\n\n    &[data-warning] {\n      --card-bg-color: ", ";\n\n      @media (hover: hover) {\n        &:hover {\n          --card-border-color: ", ";\n        }\n      }\n    }\n\n    &[data-invalid] {\n      --card-bg-color: ", ";\n      --card-border-color: ", ";\n\n      @media (hover: hover) {\n        &:hover {\n          --card-border-color: ", ";\n        }\n      }\n    }\n  "])), radius[2], color.selectable.primary.selected.border, color.selectable.primary.pressed.fg, color.input.default.hovered.border, color.dark ? _color.hues.purple[950].hex : _color.hues.purple[50].hex, color.muted.caution.hovered.bg, color.muted.caution.hovered.border, color.input.invalid.enabled.bg, color.input.invalid.enabled.border, color.input.invalid.hovered.border);
}

var Root = (0, _styledComponents.default)(_ui.Card)(rootStyle);

var PreviewSpan = _styledComponents.default.span(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: block;\n  max-width: calc(5em + 80px);\n  position: relative;\n"])));

var TooltipBox = (0, _styledComponents.default)(_ui.Box)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  max-width: 250px;\n"])));

var InlineObject = /*#__PURE__*/_react.default.forwardRef(function InlineObject(props, forwardedRef) {
  var _props$attributes = props.attributes,
      focused = _props$attributes.focused,
      selected = _props$attributes.selected,
      path = _props$attributes.path,
      isEditing = props.isEditing,
      markers = props.markers,
      onFocus = props.onFocus,
      readOnly = props.readOnly,
      renderCustomMarkers = props.renderCustomMarkers,
      scrollElement = props.scrollElement,
      type = props.type,
      value = props.value;
  var editor = (0, _portableTextEditor.usePortableTextEditor)();
  var refElm = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      popoverOpen = _useState2[0],
      setPopoverOpen = _useState2[1];

  var hasError = (0, _react.useMemo)(() => markers.filter(marker => marker.type === 'validation' && marker.level === 'error').length > 0, [markers]);
  var hasWarning = (0, _react.useMemo)(() => markers.filter(marker => marker.type === 'validation' && marker.level === 'warning').length > 0, [markers]);
  var hasMarkers = markers.length > 0;
  var tone = (0, _react.useMemo)(() => {
    if (hasError) {
      return 'critical';
    }

    if (hasWarning) {
      return 'caution';
    }

    if (selected || focused) {
      return 'primary';
    }

    return undefined;
  }, [focused, hasError, hasWarning, selected]);
  var preview = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(PreviewSpan, null, /*#__PURE__*/_react.default.createElement(_Preview.default, {
    type: type,
    value: value,
    fallbackTitle: "Click to edit",
    layout: "inline"
  })), [type, value]);
  var markersToolTip = (0, _react.useMemo)(() => markers.length > 0 ? /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    placement: "top",
    portal: "editor",
    content: /*#__PURE__*/_react.default.createElement(TooltipBox, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(_legacyParts.Markers, {
      markers: markers,
      renderCustomMarkers: renderCustomMarkers
    }))
  }, preview) : undefined, [markers, preview, renderCustomMarkers]);
  var handleEditClick = (0, _react.useCallback)(() => {
    _portableTextEditor.PortableTextEditor.blur(editor);

    onFocus(path.concat(_paths.FOCUS_TERMINATOR));
    setPopoverOpen(false);
  }, [editor, path, onFocus]);
  var handleRemoveClick = (0, _react.useCallback)(event => {
    event.preventDefault();
    event.stopPropagation();
    var point = {
      path,
      offset: 0
    };
    var selection = {
      anchor: point,
      focus: point
    };

    _portableTextEditor.PortableTextEditor.delete(editor, selection, {
      mode: 'children'
    });

    _portableTextEditor.PortableTextEditor.focus(editor);
  }, [editor, path]);
  (0, _react.useEffect)(() => {
    if (isEditing) {
      setPopoverOpen(false);
    } else if (focused) {
      setPopoverOpen(true);
    } else {
      setPopoverOpen(false);
    }
  }, [editor, focused, isEditing, selected]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(Root, {
    "data-focused": focused || undefined,
    "data-invalid": hasError || undefined,
    "data-warning": hasWarning || undefined,
    "data-selected": selected || undefined,
    "data-read-only": readOnly || undefined,
    "data-markers": hasMarkers || undefined,
    tone: tone,
    forwardedAs: "span",
    contentEditable: false,
    ref: forwardedRef
  }, /*#__PURE__*/_react.default.createElement("span", {
    ref: refElm,
    onDoubleClick: handleEditClick
  }, markersToolTip || preview)), !readOnly && !isEditing && /*#__PURE__*/_react.default.createElement(_InlineObjectToolbarPopover.InlineObjectToolbarPopover, {
    onDelete: handleRemoveClick,
    onEdit: handleEditClick,
    open: popoverOpen,
    referenceElement: refElm.current,
    scrollElement: scrollElement,
    setOpen: setPopoverOpen,
    title: (type === null || type === void 0 ? void 0 : type.title) || type.name
  }));
});

exports.InlineObject = InlineObject;