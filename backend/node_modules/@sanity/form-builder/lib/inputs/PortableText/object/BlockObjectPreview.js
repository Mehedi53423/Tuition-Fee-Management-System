"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockObjectPreview = BlockObjectPreview;

var _router = require("@sanity/base/router");

var _icons = require("@sanity/icons");

var _portableTextEditor = require("@sanity/portable-text-editor");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _autoId = require("@reach/auto-id");

var _Preview = _interopRequireDefault(require("../../../Preview"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var POPOVER_PROPS = {
  constrainSize: true,
  placement: 'bottom',
  portal: 'default',
  tone: 'default'
};
var LAYOUT = 'block';

function BlockObjectPreview(props) {
  var _type$preview;

  var focused = props.focused,
      value = props.value,
      type = props.type,
      readOnly = props.readOnly,
      onClickingEdit = props.onClickingEdit,
      onClickingDelete = props.onClickingDelete;
  var editor = (0, _portableTextEditor.usePortableTextEditor)();
  var menuButtonId = (0, _autoId.useId)();
  var menuButton = (0, _react.useRef)();
  var isTabbing = (0, _react.useRef)(false);
  var isCustomPreviewComponent = Boolean((_type$preview = type.preview) === null || _type$preview === void 0 ? void 0 : _type$preview.component);
  var referenceLink = (0, _react.useMemo)(() => /*#__PURE__*/(0, _react.forwardRef)(function ReferenceLink(linkProps, ref) {
    return /*#__PURE__*/_react.default.createElement(_router.IntentLink, _extends({}, linkProps, {
      intent: "edit",
      params: {
        id: value._ref
      },
      ref: ref
    }));
  }), [value === null || value === void 0 ? void 0 : value._ref]); // Go to menu when tabbed to
  // Focus block on escape

  (0, _ui.useGlobalKeyDown)((0, _react.useCallback)(event => {
    if (!focused) {
      return;
    }

    if (event.key === 'Escape') {
      event.preventDefault();
      event.stopPropagation();
      isTabbing.current = false;

      _portableTextEditor.PortableTextEditor.focus(editor);
    }

    if (event.key === 'Tab') {
      if (menuButton.current && !isTabbing.current) {
        event.preventDefault();
        event.stopPropagation();
        menuButton.current.focus();
        isTabbing.current = true;
      }
    }
  }, [focused, editor]));

  var actions = /*#__PURE__*/_react.default.createElement(_ui.MenuButton, {
    button: /*#__PURE__*/_react.default.createElement(_ui.Button, {
      "aria-label": "Open menu",
      fontSize: 1,
      iconRight: _icons.EllipsisVerticalIcon,
      mode: "bleed",
      paddingX: 2
    }),
    ref: menuButton,
    id: menuButtonId,
    menu: /*#__PURE__*/_react.default.createElement(_ui.Menu, null, (value === null || value === void 0 ? void 0 : value._ref) && /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
      as: referenceLink,
      "data-as": "a",
      icon: _icons.LinkIcon,
      text: "Open reference"
    }), readOnly && /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
      icon: _icons.EyeOpenIcon,
      onClick: onClickingEdit,
      text: "View"
    }), !readOnly && /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
      icon: _icons.EditIcon,
      onClick: onClickingEdit,
      text: "Edit"
    }), !readOnly && /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
      icon: _icons.TrashIcon,
      onClick: onClickingDelete,
      text: "Delete",
      tone: "critical"
    })),
    popover: POPOVER_PROPS
  });

  if (isCustomPreviewComponent) {
    return /*#__PURE__*/_react.default.createElement(_ui.Flex, null, /*#__PURE__*/_react.default.createElement(_ui.Box, {
      flex: 1
    }, /*#__PURE__*/_react.default.createElement(_Preview.default, {
      type: type,
      value: value,
      layout: LAYOUT
    })), /*#__PURE__*/_react.default.createElement(_ui.Box, {
      marginLeft: 1
    }, actions));
  }

  return /*#__PURE__*/_react.default.createElement(_Preview.default, {
    actions: actions,
    type: type,
    value: value,
    layout: LAYOUT
  });
}