"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockObject = void 0;

var _portableTextEditor = require("@sanity/portable-text-editor");

var _types = require("@sanity/types");

var _paths = require("@sanity/util/paths");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _legacyParts = require("../../../legacyParts");

var _BlockActions = require("../BlockActions");

var _common = require("../_common");

var _BlockObjectPreview = require("./BlockObjectPreview");

var _BlockObject = require("./BlockObject.styles");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var BlockObject = /*#__PURE__*/_react.default.forwardRef(function BlockObject(props, forwardedRef) {
  var _type$type;

  var _props$attributes = props.attributes,
      focused = _props$attributes.focused,
      selected = _props$attributes.selected,
      path = _props$attributes.path,
      block = props.block,
      blockRef = props.blockRef,
      editor = props.editor,
      isFullscreen = props.isFullscreen,
      markers = props.markers,
      onChange = props.onChange,
      onFocus = props.onFocus,
      readOnly = props.readOnly,
      renderBlockActions = props.renderBlockActions,
      renderCustomMarkers = props.renderCustomMarkers,
      type = props.type;
  var elementRef = (0, _react.useRef)();

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      reviewChangesHovered = _useState2[0],
      setReviewChangesHovered = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      hasChanges = _useState4[0],
      setHasChanges = _useState4[1];

  var handleMouseOver = (0, _react.useCallback)(() => setReviewChangesHovered(true), []);
  var handleMouseOut = (0, _react.useCallback)(() => setReviewChangesHovered(false), []);
  var handleOnHasChanges = (0, _react.useCallback)(changed => setHasChanges(changed), []);
  var handleEdit = (0, _react.useCallback)(() => {
    onFocus(path.concat(_paths.FOCUS_TERMINATOR));
  }, [onFocus, path]);
  var handleDoubleClickToOpen = (0, _react.useCallback)(e => {
    e.preventDefault();
    e.stopPropagation();

    _portableTextEditor.PortableTextEditor.blur(editor);

    handleEdit();
  }, [editor, handleEdit]);
  var handleDelete = (0, _react.useCallback)(() => {
    var sel = {
      focus: {
        path,
        offset: 0
      },
      anchor: {
        path,
        offset: 0
      }
    };

    _portableTextEditor.PortableTextEditor.delete(editor, sel, {
      mode: 'blocks'
    }); // The focus seems to get stuck somehow on the dropdown menu.
    // Setting focus like this seems to avoid that.


    setTimeout(() => _portableTextEditor.PortableTextEditor.focus(editor));
  }, [editor, path]);
  var blockPreview = (0, _react.useMemo)(() => {
    return /*#__PURE__*/_react.default.createElement(_BlockObjectPreview.BlockObjectPreview, {
      type: type,
      focused: focused,
      value: block,
      readOnly: readOnly,
      onClickingDelete: handleDelete,
      onClickingEdit: handleEdit
    });
  }, [focused, type, block, readOnly, handleDelete, handleEdit]);
  var tone = selected || focused ? 'primary' : 'default';
  var innerPaddingProps = (0, _react.useMemo)(() => {
    if (isFullscreen && !renderBlockActions) {
      return {
        paddingX: 5
      };
    }

    if (isFullscreen && renderBlockActions) {
      return {
        paddingLeft: 5,
        paddingRight: 2
      };
    }

    if (renderBlockActions) {
      return {
        paddingLeft: 3,
        paddingRight: 2
      };
    }

    return {
      paddingX: 3
    };
  }, [isFullscreen, renderBlockActions]); // These are marker that is only for the block level (things further up, like annotations and inline objects are dealt with in their respective components)

  var blockMarkers = (0, _react.useMemo)(() => markers.filter(marker => (0, _types.isKeySegment)(marker.path[0]) && marker.path[0]._key === block._key), [block._key, markers]);
  var errorMarkers = (0, _react.useMemo)(() => blockMarkers.filter(marker => marker.type === 'validation' && marker.level === 'error'), [blockMarkers]);
  var warningMarkers = (0, _react.useMemo)(() => blockMarkers.filter(marker => marker.type === 'validation' && marker.level === 'warning'), [blockMarkers]);
  var infoMarkers = (0, _react.useMemo)(() => blockMarkers.filter(marker => marker.type === 'validation' && marker.level === 'info'), [blockMarkers]);
  var hasMarkers = Boolean(blockMarkers.length > 0 && renderCustomMarkers);
  var hasErrors = errorMarkers.length > 0;
  var hasWarnings = warningMarkers.length > 0;
  var hasInfo = infoMarkers.length > 0;
  var isImagePreview = (type === null || type === void 0 ? void 0 : (_type$type = type.type) === null || _type$type === void 0 ? void 0 : _type$type.name) === 'image';
  var blockPath = (0, _react.useMemo)(() => [{
    _key: block._key
  }], [block._key]);
  var tooltipEnabled = hasErrors || hasWarnings || hasInfo || hasMarkers;
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    paddingBottom: 1,
    marginY: 3,
    contentEditable: false,
    ref: forwardedRef
  }, /*#__PURE__*/_react.default.createElement(_BlockObject.InnerFlex, {
    flex: 1
  }, /*#__PURE__*/_react.default.createElement(_BlockObject.PreviewContainer, _extends({
    flex: 1
  }, innerPaddingProps), /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    placement: "top",
    portal: "editor",
    disabled: !tooltipEnabled,
    content: tooltipEnabled && /*#__PURE__*/_react.default.createElement(_BlockObject.TooltipBox, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(_legacyParts.Markers, {
      markers: markers,
      renderCustomMarkers: renderCustomMarkers
    }))
  }, /*#__PURE__*/_react.default.createElement(_BlockObject.Root, {
    "data-focused": focused ? '' : undefined,
    "data-image-preview": isImagePreview ? '' : undefined,
    "data-invalid": hasErrors ? '' : undefined,
    "data-markers": hasMarkers ? '' : undefined,
    "data-selected": selected ? '' : undefined,
    "data-testid": "pte-block-object",
    "data-warning": hasWarnings ? '' : undefined,
    flex: 1,
    onDoubleClick: handleDoubleClickToOpen,
    padding: isImagePreview ? 0 : 1,
    ref: elementRef,
    tone: tone
  }, /*#__PURE__*/_react.default.createElement(_BlockObject.BlockPreview, {
    ref: blockRef
  }, blockPreview)))), /*#__PURE__*/_react.default.createElement(_BlockObject.BlockActionsOuter, {
    marginRight: 1
  }, /*#__PURE__*/_react.default.createElement(_BlockObject.BlockActionsInner, null, renderBlockActions && block && focused && !readOnly && /*#__PURE__*/_react.default.createElement(_BlockActions.BlockActions, {
    onChange: onChange,
    block: block,
    renderBlockActions: renderBlockActions
  }))), isFullscreen && /*#__PURE__*/_react.default.createElement(_BlockObject.ChangeIndicatorWrapper, {
    contentEditable: false,
    onMouseOver: handleMouseOver,
    onMouseLeave: handleMouseOut,
    $hasChanges: Boolean(hasChanges)
  }, /*#__PURE__*/_react.default.createElement(_common.StyledChangeIndicatorWithProvidedFullPath, {
    compareDeep: true,
    value: block,
    hasFocus: focused,
    path: blockPath,
    withHoverEffect: false,
    onHasChanges: handleOnHasChanges
  })), reviewChangesHovered && /*#__PURE__*/_react.default.createElement(_common.ReviewChangesHighlightBlock, null)));
});

exports.BlockObject = BlockObject;