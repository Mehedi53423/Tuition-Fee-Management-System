"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultObjectEditing = DefaultObjectEditing;

var _react = _interopRequireWildcard(require("react"));

var _autoId = require("@reach/auto-id");

var _presence = require("@sanity/base/presence");

var _ui = require("@sanity/ui");

var _FormBuilderInput = require("../../../../FormBuilderInput");

var _constants = require("./constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function DefaultObjectEditing(props) {
  var focusPath = props.focusPath,
      markers = props.markers,
      object = props.object,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onClose = props.onClose,
      onFocus = props.onFocus,
      path = props.path,
      presence = props.presence,
      readOnly = props.readOnly,
      type = props.type,
      _props$width = props.width,
      width = _props$width === void 0 ? 'medium' : _props$width;
  var dialogId = (0, _autoId.useId)();

  var _useLayer = (0, _ui.useLayer)(),
      isTopLayer = _useLayer.isTopLayer;

  var portal = (0, _ui.usePortal)();
  var handleChange = (0, _react.useCallback)(patchEvent => onChange(patchEvent, path), [onChange, path]);
  var handleClose = (0, _react.useCallback)(() => {
    if (isTopLayer) onClose();
  }, [isTopLayer, onClose]);
  var handleKeyDown = (0, _react.useCallback)(event => {
    if (event.key === 'Escape') handleClose();
  }, [handleClose]);
  (0, _react.useEffect)(() => {
    window.addEventListener('keydown', handleKeyDown);
    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, [handleKeyDown]);
  return /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
    id: dialogId || '',
    onClose: onClose,
    header: type.title,
    portal: "default",
    width: _constants.DIALOG_WIDTH_TO_UI_WIDTH[width]
  }, /*#__PURE__*/_react.default.createElement(_presence.PresenceOverlay, {
    margins: [0, 0, 1, 0]
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.PortalProvider, {
    element: portal.elements.default
  }, /*#__PURE__*/_react.default.createElement(_FormBuilderInput.FormBuilderInput, {
    focusPath: focusPath,
    level: 0,
    markers: markers,
    onBlur: onBlur,
    onChange: handleChange,
    onFocus: onFocus,
    path: path,
    presence: presence,
    readOnly: readOnly || type.readOnly,
    type: type,
    value: object
  })))));
}