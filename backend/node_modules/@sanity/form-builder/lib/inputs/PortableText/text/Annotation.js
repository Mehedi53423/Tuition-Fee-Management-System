"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Annotation = void 0;

var _react = _interopRequireWildcard(require("react"));

var _portableTextEditor = require("@sanity/portable-text-editor");

var _paths = require("@sanity/util/paths");

var _types = require("@sanity/types");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _ui = require("@sanity/ui");

var _color = require("@sanity/color");

var _Markers = _interopRequireDefault(require("../_legacyDefaultParts/Markers"));

var _ = require("./");

var _templateObject, _templateObject2;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var Root = _styledComponents.default.span(props => {
  var $toneKey = props.$toneKey,
      theme = props.theme;
  return (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      text-decoration: none;\n      display: inline;\n      background-color: ", ";\n      border-bottom: 1px dashed ", ";\n      color: ", ";\n\n      &[data-link] {\n        border-bottom: 1px solid ", ";\n      }\n\n      &[data-custom-markers] {\n        background-color: ", ";\n      }\n\n      &[data-warning] {\n        background-color: ", ";\n      }\n\n      &[data-error] {\n        background-color: ", ";\n      }\n    "])), theme.sanity.color.selectable[$toneKey].enabled.bg, theme.sanity.color.selectable[$toneKey].enabled.fg, theme.sanity.color.selectable[$toneKey].enabled.fg, theme.sanity.color.selectable[$toneKey].enabled.fg, theme.sanity.color.dark ? _color.hues.purple[950].hex : _color.hues.purple[50].hex, theme.sanity.color.muted.caution.hovered.bg, theme.sanity.color.muted.critical.hovered.bg);
});

var TooltipBox = (0, _styledComponents.default)(_ui.Box).attrs({
  forwardedAs: 'span'
})(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  max-width: 250px;\n"])));

var Annotation = /*#__PURE__*/_react.default.forwardRef(function Annotation(props, forwardedRef) {
  var attributes = props.attributes,
      children = props.children,
      hasError = props.hasError,
      hasWarning = props.hasWarning,
      markers = props.markers,
      onFocus = props.onFocus,
      renderCustomMarkers = props.renderCustomMarkers,
      scrollElement = props.scrollElement,
      readOnly = props.readOnly,
      type = props.type,
      value = props.value;
  var path = attributes.path;
  var annotationRef = (0, _react.useRef)(null);
  var editor = (0, _portableTextEditor.usePortableTextEditor)();
  var markDefPath = (0, _react.useMemo)(() => [path[0], 'markDefs', {
    _key: value._key
  }], [path, value._key]);

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      textElement = _useState2[0],
      setTextElement = _useState2[1];

  var text = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement("span", {
    ref: setTextElement,
    "data-annotation": ""
  }, children), [children]);
  var markersToolTip = (0, _react.useMemo)(() => markers.length > 0 ? /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    placement: "top",
    boundaryElement: annotationRef.current,
    portal: "default",
    content: /*#__PURE__*/_react.default.createElement(TooltipBox, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(_Markers.default, {
      markers: markers,
      renderCustomMarkers: renderCustomMarkers
    }))
  }, /*#__PURE__*/_react.default.createElement("span", null, text)) : undefined, [markers, renderCustomMarkers, text]);
  var handleEditClick = (0, _react.useCallback)(event => {
    event.preventDefault();
    event.stopPropagation();

    _portableTextEditor.PortableTextEditor.blur(editor);

    onFocus(markDefPath.concat(_paths.FOCUS_TERMINATOR));
  }, [editor, markDefPath, onFocus]);
  var handleRemoveClick = (0, _react.useCallback)(event => {
    event.preventDefault();
    event.stopPropagation();

    _portableTextEditor.PortableTextEditor.removeAnnotation(editor, type);

    _portableTextEditor.PortableTextEditor.focus(editor);
  }, [editor, type]);
  var isLink = (value === null || value === void 0 ? void 0 : value._type) === 'link';
  var toneKey = (0, _react.useMemo)(() => {
    if (hasError) {
      return 'critical';
    }

    if (hasWarning) {
      return 'caution';
    }

    if (isLink) {
      return 'primary';
    }

    return 'default';
  }, [isLink, hasError, hasWarning]);
  var hasCustomMarkers = markers.filter(m => !(0, _types.isValidationMarker)(m)).length > 0;
  return /*#__PURE__*/_react.default.createElement(Root, {
    $toneKey: toneKey,
    ref: annotationRef,
    "data-link": isLink ? '' : undefined,
    "data-error": hasError ? '' : undefined,
    "data-warning": hasWarning ? '' : undefined,
    "data-custom-markers": hasCustomMarkers ? '' : undefined
  }, /*#__PURE__*/_react.default.createElement("span", {
    ref: forwardedRef
  }, markersToolTip || text), !readOnly && /*#__PURE__*/_react.default.createElement(_.AnnotationToolbarPopover, {
    focused: attributes.focused,
    textElement: textElement,
    annotationElement: annotationRef === null || annotationRef === void 0 ? void 0 : annotationRef.current,
    scrollElement: scrollElement,
    onEdit: handleEditClick,
    onDelete: handleRemoveClick,
    title: (type === null || type === void 0 ? void 0 : type.title) || type.name
  }));
});

exports.Annotation = Annotation;