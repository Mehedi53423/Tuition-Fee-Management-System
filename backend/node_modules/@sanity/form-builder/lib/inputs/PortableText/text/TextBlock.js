"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextBlock = TextBlock;

var _types = require("@sanity/types");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _legacyParts = require("../../../legacyParts");

var _BlockActions = require("../BlockActions");

var _common = require("../_common");

var _constants = require("./constants");

var _TextBlock = require("./TextBlock.styles");

var _textStyles = require("./textStyles");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function TextBlock(props) {
  var attributes = props.attributes,
      block = props.block,
      blockRef = props.blockRef,
      children = props.children,
      isFullscreen = props.isFullscreen,
      markers = props.markers,
      onChange = props.onChange,
      readOnly = props.readOnly,
      renderBlockActions = props.renderBlockActions,
      renderCustomMarkers = props.renderCustomMarkers,
      spellCheck = props.spellCheck;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      reviewChangesHovered = _useState2[0],
      setReviewChangesHovered = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      hasChanges = _useState4[0],
      setHasChanges = _useState4[1];

  var focused = attributes.focused;
  var blockKey = block._key;
  var handleMouseOver = (0, _react.useCallback)(() => setReviewChangesHovered(true), []);
  var handleMouseOut = (0, _react.useCallback)(() => setReviewChangesHovered(false), []);
  var handleOnHasChanges = (0, _react.useCallback)(changed => setHasChanges(changed), []); // These are marker that is only for the block level (things further up, like annotations and inline objects are dealt with in their respective components)

  var blockMarkers = (0, _react.useMemo)(() => markers.filter(marker => marker.path.length === 1 && (0, _types.isKeySegment)(marker.path[0]) && marker.path[0]._key === blockKey), [blockKey, markers]);
  var errorMarkers = (0, _react.useMemo)(() => blockMarkers.filter(marker => (0, _types.isValidationMarker)(marker) && marker.level === 'error'), [blockMarkers]);
  var warningMarkers = (0, _react.useMemo)(() => blockMarkers.filter(marker => (0, _types.isValidationMarker)(marker) && marker.level === 'warning'), [blockMarkers]);
  var hasCustomMarkers = Boolean(renderCustomMarkers) && blockMarkers.filter(m => !(0, _types.isValidationMarker)(m)).length > 0;
  var hasErrors = errorMarkers.length > 0;
  var hasWarnings = warningMarkers.length > 0;
  var tooltipEnabled = hasErrors || hasWarnings || hasCustomMarkers;
  var blockPath = (0, _react.useMemo)(() => [{
    _key: blockKey
  }], [blockKey]);
  var text = (0, _react.useMemo)(() => {
    var TextStyle = _textStyles.TEXT_STYLES[block.style] || _textStyles.TEXT_STYLES.normal;
    return /*#__PURE__*/_react.default.createElement(_TextBlock.TextFlex, {
      align: "flex-start",
      $level: block === null || block === void 0 ? void 0 : block.level
    }, block.listItem && /*#__PURE__*/_react.default.createElement(_TextBlock.ListPrefixWrapper, {
      contentEditable: false
    }, /*#__PURE__*/_react.default.createElement(TextStyle, {
      "data-list-prefix": ""
    })), /*#__PURE__*/_react.default.createElement(TextStyle, {
      "data-text": ""
    }, children));
  }, [block.style, block.listItem, block.level, children]);
  var innerPaddingProps = (0, _react.useMemo)(() => {
    if (isFullscreen && !renderBlockActions) {
      return {
        paddingX: 5
      };
    }

    if (isFullscreen && renderBlockActions) {
      return {
        paddingLeft: 5,
        paddingRight: 2
      };
    }

    if (renderBlockActions) {
      return {
        paddingLeft: 3,
        paddingRight: 2
      };
    }

    return {
      paddingX: 3
    };
  }, [isFullscreen, renderBlockActions]);
  var outerPaddingProps = (0, _react.useMemo)(() => {
    if (block.listItem) {
      return {
        paddingY: 2
      };
    }

    return _constants.TEXT_STYLE_PADDING[block.style] || {
      paddingY: 2
    };
  }, [block]);
  return /*#__PURE__*/_react.default.createElement(_ui.Box, _extends({
    "data-testid": "text-block"
  }, outerPaddingProps), /*#__PURE__*/_react.default.createElement(_TextBlock.TextBlockFlexWrapper, {
    "data-testid": "text-block__wrapper"
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, _extends({
    flex: 1
  }, innerPaddingProps), /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    placement: "top",
    boundaryElement: blockRef === null || blockRef === void 0 ? void 0 : blockRef.current,
    portal: "editor",
    disabled: !tooltipEnabled,
    content: tooltipEnabled && /*#__PURE__*/_react.default.createElement(_TextBlock.TooltipBox, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(_legacyParts.Markers, {
      markers: blockMarkers,
      renderCustomMarkers: renderCustomMarkers
    }))
  }, /*#__PURE__*/_react.default.createElement(_TextBlock.TextRoot, {
    $level: block.level,
    "data-error": hasErrors ? '' : undefined,
    "data-warning": hasWarnings ? '' : undefined,
    "data-list-item": block.listItem,
    "data-custom-markers": hasCustomMarkers ? '' : undefined,
    "data-testid": "text-block__text",
    spellCheck: spellCheck,
    ref: blockRef
  }, text))), /*#__PURE__*/_react.default.createElement(_TextBlock.BlockExtrasContainer, {
    contentEditable: false
  }, renderBlockActions && /*#__PURE__*/_react.default.createElement(_TextBlock.BlockActionsOuter, {
    marginRight: 1
  }, /*#__PURE__*/_react.default.createElement(_TextBlock.BlockActionsInner, null, focused && !readOnly && /*#__PURE__*/_react.default.createElement(_BlockActions.BlockActions, {
    onChange: onChange,
    block: block,
    renderBlockActions: renderBlockActions
  }))), isFullscreen && /*#__PURE__*/_react.default.createElement(_TextBlock.ChangeIndicatorWrapper, {
    onMouseOver: handleMouseOver,
    onMouseOut: handleMouseOut,
    $hasChanges: Boolean(hasChanges)
  }, /*#__PURE__*/_react.default.createElement(_common.StyledChangeIndicatorWithProvidedFullPath, {
    compareDeep: true,
    value: block,
    hasFocus: focused,
    path: blockPath,
    withHoverEffect: false,
    onHasChanges: handleOnHasChanges
  }))), reviewChangesHovered && /*#__PURE__*/_react.default.createElement(_common.ReviewChangesHighlightBlock, null)));
}