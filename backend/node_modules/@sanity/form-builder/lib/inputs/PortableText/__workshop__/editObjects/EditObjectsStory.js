"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EditObjectsStory = EditObjectsStory;

var _portableTextEditor = require("@sanity/portable-text-editor");

var _ui = require("@sanity/ui");

var _uiWorkshop = require("@sanity/ui-workshop");

var _react = _interopRequireWildcard(require("react"));

var _FormBuilderContext = _interopRequireDefault(require("../../../../FormBuilderContext"));

var _object = require("../../object");

var _formBuilder = require("./formBuilder");

var _schemaType = require("./schemaType");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var TYPE_OPTIONS = {
  Annotation: 'annotation',
  'Object block': 'blockObject',
  'Inline object': 'inlineObject'
};
var TYPE_DATA = {
  annotation: {
    editorPath: [{
      _key: '1'
    }, 'children', {
      _key: '1-2'
    }],
    focusPath: [{
      _key: '1'
    }, 'markDefs', {
      _key: 'm1'
    }]
  },
  blockObject: {
    focusPath: [{
      _key: '2'
    }]
  },
  inlineObject: {
    focusPath: [{
      _key: '1'
    }, 'children', {
      _key: '1-3'
    }]
  }
};
var EMPTY_ARRAY = [];

function EditObjectsStory() {
  var open = (0, _uiWorkshop.useBoolean)('Open', false);
  var kind = (0, _uiWorkshop.useSelect)('Kind', TYPE_OPTIONS, 'annotation');
  var portal = (0, _ui.usePortal)();

  var _useMemo = (0, _react.useMemo)(() => {
    var _TYPE_DATA$kind, _TYPE_DATA$kind2, _TYPE_DATA$kind3;

    if (!open) {
      return {
        editorPath: EMPTY_ARRAY,
        focusPath: EMPTY_ARRAY
      };
    }

    return {
      editorPath: ((_TYPE_DATA$kind = TYPE_DATA[kind]) === null || _TYPE_DATA$kind === void 0 ? void 0 : _TYPE_DATA$kind.editorPath) || ((_TYPE_DATA$kind2 = TYPE_DATA[kind]) === null || _TYPE_DATA$kind2 === void 0 ? void 0 : _TYPE_DATA$kind2.focusPath) || EMPTY_ARRAY,
      focusPath: ((_TYPE_DATA$kind3 = TYPE_DATA[kind]) === null || _TYPE_DATA$kind3 === void 0 ? void 0 : _TYPE_DATA$kind3.focusPath) || EMPTY_ARRAY
    };
  }, [kind, open]),
      editorPath = _useMemo.editorPath,
      focusPath = _useMemo.focusPath;

  var markers = (0, _react.useMemo)(() => [], []);
  var presence = (0, _react.useMemo)(() => [], []);
  var readOnly = false;
  var value = (0, _react.useMemo)(() => [{
    _type: 'block',
    _key: '1',
    children: [{
      _type: 'span',
      _key: '1-1',
      text: 'test'
    }, {
      _type: 'span',
      _key: '1-2',
      text: 'annotation',
      marks: ['m1']
    }, {
      _type: 'myInlineObject',
      _key: '1-3',
      title: 'The inline object'
    }],
    markDefs: [{
      _type: 'link',
      _key: 'm1',
      url: 'test'
    }]
  }, {
    _type: 'myObjectBlock',
    _key: '2'
  }], []);
  var objectEditData = (0, _react.useMemo)(() => ({
    editorPath,
    formBuilderPath: focusPath,
    kind: kind,
    returnToSelection: null
  }), [editorPath, focusPath, kind]);
  var handleBlur = (0, _uiWorkshop.useAction)('onBlur');
  var handleChange = (0, _uiWorkshop.useAction)('onChange');
  var handleClose = (0, _uiWorkshop.useAction)('onClose');
  var handleFocus = (0, _uiWorkshop.useAction)('onFocus');
  var patchChannel = (0, _react.useMemo)(() => {
    return {
      onPatch: () => () => undefined
    };
  }, []);
  return /*#__PURE__*/_react.default.createElement(_ui.PortalProvider, {
    __unstable_elements: {
      default: portal.element
    }
  }, /*#__PURE__*/_react.default.createElement(_ui.LayerProvider, null, /*#__PURE__*/_react.default.createElement(_FormBuilderContext.default, {
    value: value,
    patchChannel: patchChannel,
    schema: _schemaType.schema,
    resolveInputComponent: _formBuilder.resolveInputComponent,
    resolvePreviewComponent: _formBuilder.resolvePreviewComponent
  }, /*#__PURE__*/_react.default.createElement(_portableTextEditor.PortableTextEditor, {
    onChange: handleChange,
    type: _schemaType.schemaType,
    value: value
  }, /*#__PURE__*/_react.default.createElement(_object.EditObject, {
    focusPath: focusPath,
    markers: markers,
    objectEditData: objectEditData,
    onBlur: handleBlur,
    onChange: handleChange,
    onClose: handleClose,
    onFocus: handleFocus,
    presence: presence,
    scrollElement: portal.boundaryElement,
    readOnly: readOnly,
    value: value
  })))));
}