"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderBlockActions = renderBlockActions;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _icons = require("@sanity/icons");

var _portableTextEditor = require("@sanity/portable-text-editor");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var BlockActions = /*#__PURE__*/(0, _react.memo)(function BlockActions(props) {
  var block = props.block,
      insert = props.insert;
  var handleDuplicate = (0, _react.useCallback)(() => {
    var dupBlock = _objectSpread(_objectSpread({}, block), {}, {
      _key: (0, _portableTextEditor.keyGenerator)()
    });

    if (dupBlock.children) {
      dupBlock.children = dupBlock.children.map(c => _objectSpread(_objectSpread({}, c), {}, {
        _key: (0, _portableTextEditor.keyGenerator)()
      }));
    }

    insert(dupBlock);
  }, [block, insert]);
  return /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    content: /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 1
    }, "Duplicate")),
    placement: "right",
    portal: "default"
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    "aria-label": "Duplicate",
    fontSize: 1,
    icon: _icons.CopyIcon,
    onClick: handleDuplicate,
    padding: 2,
    mode: "bleed"
  }));
});

function renderBlockActions(_ref) {
  var block = _ref.block,
      insert = _ref.insert;
  return /*#__PURE__*/_react.default.createElement(BlockActions, {
    block: block,
    insert: insert
  });
}