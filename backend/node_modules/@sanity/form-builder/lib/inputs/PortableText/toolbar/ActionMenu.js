"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ActionMenu = void 0;

var _react = _interopRequireWildcard(require("react"));

var _components = require("@sanity/base/components");

var _ui = require("@sanity/ui");

var _icons = require("@sanity/icons");

var _portableTextEditor = require("@sanity/portable-text-editor");

var _hooks = require("./hooks");

var _helpers = require("./helpers");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CollapseMenuMemo = /*#__PURE__*/(0, _react.memo)(_components.CollapseMenu);
var MENU_POPOVER_PROPS = {
  constrainSize: true,
  portal: true
};
var COLLAPSE_BUTTON_PROPS = {
  padding: 2,
  mode: 'bleed'
};
var ActionMenu = /*#__PURE__*/(0, _react.memo)(function ActionMenu(props) {
  var disabledProp = props.disabled,
      groups = props.groups,
      isFullscreen = props.isFullscreen,
      collapsed = props.collapsed;
  var focusBlock = (0, _hooks.useFocusBlock)();
  var features = (0, _hooks.useFeatures)();
  var editor = (0, _portableTextEditor.usePortableTextEditor)();
  var isVoidBlock = (focusBlock === null || focusBlock === void 0 ? void 0 : focusBlock._type) !== features.types.block.name;
  var isEmptyTextBlock = !isVoidBlock && (focusBlock === null || focusBlock === void 0 ? void 0 : focusBlock.children.length) === 1 && (focusBlock === null || focusBlock === void 0 ? void 0 : focusBlock.children[0].text) === '';
  var disabled = disabledProp || isVoidBlock;
  var actions = (0, _react.useMemo)(() => groups.reduce((acc, group) => {
    return acc.concat(group.actions.map( // eslint-disable-next-line max-nested-callbacks
    (action, actionIndex) => {
      if (actionIndex === 0) return _objectSpread(_objectSpread({}, action), {}, {
        firstInGroup: true
      });
      return action;
    }));
  }, []), [groups]);
  var activeKeys = (0, _hooks.useActiveActionKeys)({
    actions
  });
  var handleMenuClose = (0, _react.useCallback)(() => {
    _portableTextEditor.PortableTextEditor.focus(editor);
  }, [editor]);
  var children = (0, _react.useMemo)(() => actions.map(action => {
    var annotationDisabled = action.type === 'annotation' && isEmptyTextBlock;
    var active = activeKeys.includes(action.key);
    return /*#__PURE__*/_react.default.createElement(_components.CollapseMenuButton, _extends({
      disabled: disabled || annotationDisabled
    }, COLLAPSE_BUTTON_PROPS, {
      dividerBefore: action.firstInGroup,
      icon: (0, _helpers.getActionIcon)(action, active),
      key: action.key // eslint-disable-next-line react/jsx-no-bind
      ,
      onClick: () => action.handle(active),
      selected: active,
      text: action.title || action.key,
      tooltipText: action.title || action.key,
      tooltipProps: {
        disabled: disabled || annotationDisabled,
        placement: isFullscreen ? 'bottom' : 'top',
        portal: 'default'
      }
    }));
  }), [actions, activeKeys, disabled, isEmptyTextBlock, isFullscreen]);
  var menuButtonProps = (0, _react.useMemo)(() => ({
    button: /*#__PURE__*/_react.default.createElement(_ui.Button, {
      icon: _icons.EllipsisVerticalIcon,
      mode: "bleed",
      padding: 2,
      disabled: disabled
    }),
    popover: MENU_POPOVER_PROPS
  }), [disabled]);
  return /*#__PURE__*/_react.default.createElement(CollapseMenuMemo, {
    collapsed: collapsed,
    disableRestoreFocusOnClose: true,
    gap: 1,
    menuButtonProps: menuButtonProps,
    onMenuClose: handleMenuClose
  }, children);
});
exports.ActionMenu = ActionMenu;