"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockStyleSelect = void 0;

var _react = _interopRequireWildcard(require("react"));

var _portableTextEditor = require("@sanity/portable-text-editor");

var _ui = require("@sanity/ui");

var _icons = require("@sanity/icons");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _textStyles = require("../text/textStyles");

var _hooks = require("./hooks");

var _templateObject, _templateObject2;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var MenuButtonMemo = /*#__PURE__*/(0, _react.memo)(_ui.MenuButton);
var StyledMenuItem = (0, _styledComponents.default)(_ui.MenuItem)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  // Change the border color variable used by BlockQuote\n  // to make the border visible when the MenuItem is selected\n  &[data-selected] {\n    [data-option='blockquote'] {\n      --card-border-color: var(--card-muted-fg-color);\n    }\n  }\n"])));
var StyledButton = (0, _styledComponents.default)(_ui.Button)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  width: 100%;\n"])));
var MENU_POPOVER_PROPS = {
  constrainSize: true,
  placement: 'bottom-start',
  portal: 'default'
};
var TEXT_STYLE_OPTIONS = {
  h1: title => /*#__PURE__*/_react.default.createElement(_textStyles.Heading1, null, title),
  h2: title => /*#__PURE__*/_react.default.createElement(_textStyles.Heading2, null, title),
  h3: title => /*#__PURE__*/_react.default.createElement(_textStyles.Heading3, null, title),
  h4: title => /*#__PURE__*/_react.default.createElement(_textStyles.Heading4, null, title),
  h5: title => /*#__PURE__*/_react.default.createElement(_textStyles.Heading5, null, title),
  h6: title => /*#__PURE__*/_react.default.createElement(_textStyles.Heading6, null, title),
  normal: title => /*#__PURE__*/_react.default.createElement(_textStyles.Normal, null, title),
  blockquote: title => /*#__PURE__*/_react.default.createElement(_textStyles.BlockQuote, {
    "data-option": "blockquote"
  }, title)
};
var TEXT_STYLE_KEYS = Object.keys(TEXT_STYLE_OPTIONS);

var preventDefault = event => event.preventDefault();

var emptyStyle = {
  key: 'style-none',
  style: null,
  styleComponent: null,
  title: 'No style'
};
var BlockStyleSelect = /*#__PURE__*/(0, _react.memo)(function BlockStyleSelect(props) {
  var disabled = props.disabled,
      itemsProp = props.items;
  var editor = (0, _portableTextEditor.usePortableTextEditor)();
  var features = (0, _hooks.useFeatures)();
  var focusBlock = (0, _hooks.useFocusBlock)();

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      changed = _useState2[0],
      setChanged = _useState2[1];

  var _disabled = disabled || (focusBlock ? features.types.block.name !== focusBlock._type : false); // @todo: Explain what this does


  var activeKeys = (0, _hooks.useActiveStyleKeys)({
    items: itemsProp
  });

  var _useMemo = (0, _react.useMemo)(() => {
    var _activeItems = itemsProp.filter(item => activeKeys.includes(item.style));

    var _items = itemsProp;

    if (_activeItems.length === 0 && _items.length > 1) {
      _items = _items.concat([emptyStyle]);

      _activeItems.push(emptyStyle);
    }

    return {
      activeItems: _activeItems,
      items: _items
    };
  }, [activeKeys, itemsProp]),
      activeItems = _useMemo.activeItems,
      items = _useMemo.items;

  var menuButtonText = (0, _react.useMemo)(() => {
    if (activeItems.length > 1) return 'Multiple';
    if (activeItems.length === 1) return activeItems[0].title;
    return emptyStyle.title;
  }, [activeItems]); // Set focus back into the editor when the new value get's in

  (0, _react.useEffect)(() => {
    if (changed) {
      _portableTextEditor.PortableTextEditor.focus(editor);

      setChanged(false);
    }
  }, [activeItems, changed, editor]);
  var handleChange = (0, _react.useCallback)(item => {
    if (focusBlock && item.style !== focusBlock.style) {
      _portableTextEditor.PortableTextEditor.toggleBlockStyle(editor, item.style);
    }

    setChanged(true);
  }, [editor, focusBlock]);
  var renderOption = (0, _react.useCallback)((style, title) => {
    var hasTextStyle = TEXT_STYLE_KEYS.includes(style);
    var renderStyle = TEXT_STYLE_OPTIONS[style];

    if (hasTextStyle) {
      return renderStyle(title);
    }

    return /*#__PURE__*/_react.default.createElement(_ui.Text, null, title);
  }, []);
  var button = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(StyledButton, {
    disabled: _disabled,
    iconRight: _icons.SelectIcon,
    mode: "bleed",
    onClick: preventDefault,
    padding: 2,
    text: menuButtonText
  }), [_disabled, menuButtonText]);
  var menu = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(_ui.Menu, {
    disabled: _disabled
  }, items.map(item => {
    return /*#__PURE__*/_react.default.createElement(StyledMenuItem, {
      key: item.key,
      pressed: activeItems.includes(item) // eslint-disable-next-line react/jsx-no-bind
      ,
      onClick: _disabled ? undefined : () => handleChange(item)
    }, renderOption(item.style, (item === null || item === void 0 ? void 0 : item.title) || item.style));
  })), [_disabled, activeItems, handleChange, items, renderOption]);
  return /*#__PURE__*/_react.default.createElement(MenuButtonMemo, {
    popover: MENU_POPOVER_PROPS,
    id: "block-style-select",
    button: button,
    menu: menu
  });
});
exports.BlockStyleSelect = BlockStyleSelect;