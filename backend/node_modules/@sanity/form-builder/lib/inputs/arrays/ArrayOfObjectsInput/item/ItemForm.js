"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ItemForm = void 0;

var _types = require("@sanity/types");

var _react = _interopRequireWildcard(require("react"));

var _FormBuilderInput = require("../../../../FormBuilderInput");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var ItemForm = /*#__PURE__*/(0, _react.forwardRef)(function ItemForm(props, ref) {
  var type = props.type,
      value = props.value,
      markers = props.markers,
      focusPath = props.focusPath,
      onFocus = props.onFocus,
      onBlur = props.onBlur,
      onChange = props.onChange,
      ReferenceItemComponent = props.ReferenceItemComponent,
      insertableTypes = props.insertableTypes,
      readOnly = props.readOnly,
      isSortable = props.isSortable,
      filterField = props.filterField,
      presence = props.presence,
      onInsert = props.onInsert,
      compareValue = props.compareValue;
  var isReference = (0, _types.isReferenceSchemaType)(type);
  var Input = (0, _react.useMemo)(() => isReference ? /*#__PURE__*/(0, _react.forwardRef)(function Input_(givenProps, inputRef) {
    return /*#__PURE__*/_react.default.createElement(ReferenceItemComponent, _extends({}, givenProps, {
      insertableTypes: insertableTypes,
      onInsert: onInsert,
      isSortable: isSortable,
      onChange: onChange,
      ref: inputRef
    }));
  }) : undefined, [ReferenceItemComponent, insertableTypes, isReference, isSortable, onInsert, onChange]);
  return /*#__PURE__*/_react.default.createElement(_FormBuilderInput.FormBuilderInput, {
    type: type,
    level: 0,
    value: value,
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur,
    inputComponent: Input,
    compareValue: compareValue,
    focusPath: focusPath,
    readOnly: readOnly || type.readOnly || false,
    markers: markers,
    path: [{
      _key: value._key
    }],
    filterField: filterField,
    presence: presence,
    ref: ref
  });
});
exports.ItemForm = ItemForm;