"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultSource = void 0;

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _react = _interopRequireWildcard(require("react"));

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _versionedClient = require("../versionedClient");

var _AssetThumb = _interopRequireDefault(require("./AssetThumb"));

var _TableList = _interopRequireDefault(require("./TableList"));

var _templateObject, _templateObject2;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var PER_PAGE = 200;
var ASSET_TYPE_IMAGE = 'sanity.imageAsset';
var ASSET_TYPE_FILE = 'sanity.fileAsset';

var buildQuery = function buildQuery() {
  var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PER_PAGE;
  var assetType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ASSET_TYPE_IMAGE;
  return "\n  *[_type == \"".concat(assetType, "\"] | order(_updatedAt desc) [").concat(start, "...").concat(end, "] {\n    _id,\n    _updatedAt,\n    _createdAt,\n    url,\n    originalFilename,\n    mimeType,\n    extension,\n    size,\n    metadata {dimensions}\n  }\n");
};

var ThumbGrid = (0, _styledComponents.default)(_ui.Grid)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n"])));
var CardLoadMore = (0, _styledComponents.default)(_ui.Card)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  border-top: 1px solid var(--card-border-color);\n  position: sticky;\n  bottom: 0;\n  z-index: 200;\n"])));

var DefaultAssetSource = function DefaultAssetSource(props, ref) {
  var _elementId = (0, _react.useRef)("default-asset-source-".concat((0, _uniqueId2.default)()));

  var currentPageNumber = (0, _react.useRef)(0);
  var fetch$ = (0, _react.useRef)();

  var _useState = (0, _react.useState)([]),
      _useState2 = _slicedToArray(_useState, 2),
      assets = _useState2[0],
      setAssets = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isLastPage = _useState4[0],
      setIsLastPage = _useState4[1];

  var _useState5 = (0, _react.useState)(false),
      _useState6 = _slicedToArray(_useState5, 2),
      hasResetAutoFocus = _useState6[0],
      setHasResetFocus = _useState6[1];

  var _useState7 = (0, _react.useState)(true),
      _useState8 = _slicedToArray(_useState7, 2),
      isLoading = _useState8[0],
      setIsLoading = _useState8[1];

  var selectedAssets = props.selectedAssets,
      _props$assetType = props.assetType,
      assetType = _props$assetType === void 0 ? 'image' : _props$assetType,
      _props$dialogHeaderTi = props.dialogHeaderTitle,
      dialogHeaderTitle = _props$dialogHeaderTi === void 0 ? 'Select image' : _props$dialogHeaderTi,
      onClose = props.onClose,
      onSelect = props.onSelect;
  var fetchPage = (0, _react.useCallback)(pageNumber => {
    var start = pageNumber * PER_PAGE;
    var end = start + PER_PAGE;
    var isImageAssetType = assetType === 'image';
    var tag = isImageAssetType ? 'asset.image-list' : 'asset.file-list';
    var assetTypeParam = isImageAssetType ? ASSET_TYPE_IMAGE : ASSET_TYPE_FILE;
    setIsLoading(true);
    fetch$.current = _versionedClient.versionedClient.observable.fetch(buildQuery(start, end, assetTypeParam), {}, {
      tag
    }).subscribe(result => {
      setIsLastPage(result.length < PER_PAGE); // eslint-disable-next-line max-nested-callbacks

      setAssets(prevState => prevState.concat(result));
      setIsLoading(false);
    });
  }, [assetType, setIsLoading, setAssets, setIsLastPage]);
  var handleDeleteFinished = (0, _react.useCallback)(id => {
    // eslint-disable-next-line max-nested-callbacks
    setAssets(prevState => prevState.filter(asset => asset._id !== id));
  }, [setAssets]);
  var select = (0, _react.useCallback)(id => {
    var selected = assets.find(doc => doc._id === id);

    if (selected) {
      onSelect([{
        kind: 'assetDocumentId',
        value: id
      }]);
    }
  }, [assets, onSelect]);
  var handleItemClick = (0, _react.useCallback)(event => {
    event.preventDefault();
    select(event.currentTarget.getAttribute('data-id'));
  }, [select]);
  var handleItemKeyPress = (0, _react.useCallback)(event => {
    if (event.key === 'Enter') {
      event.preventDefault();
      select(event.currentTarget.getAttribute('data-id'));
    }
  }, [select]);
  var handleClose = (0, _react.useCallback)(() => {
    if (onClose) {
      onClose();
    }
  }, [onClose]);
  var handleFetchNextPage = (0, _react.useCallback)(event => {
    event.preventDefault();
    fetchPage(++currentPageNumber.current);
  }, [fetchPage]);
  (0, _react.useEffect)(() => {
    fetchPage(currentPageNumber.current);
    return () => {
      if (fetch$.current) {
        fetch$.current.unsubscribe();
      }
    };
  }, [fetchPage]);
  (0, _react.useEffect)(() => {
    // We focus on the first item after we're doing loading, but only on initial load, as
    // this will reset the scroll position to the top if we do it on the second page
    if (!isLoading && (!currentPageNumber.current || currentPageNumber.current === 0)) {
      setHasResetFocus(true);
    }
  }, [isLoading]);
  var renderedThumbView = (0, _react.useMemo)(() => {
    return /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 4
    }, /*#__PURE__*/_react.default.createElement(ThumbGrid, {
      gap: 2
    }, assets.map(asset => /*#__PURE__*/_react.default.createElement(_AssetThumb.default, {
      key: asset._id,
      asset: asset,
      isSelected: selectedAssets.some(selected => selected._id === asset._id),
      onClick: handleItemClick,
      onKeyPress: handleItemKeyPress,
      onDeleteFinished: handleDeleteFinished
    }))), isLoading && assets.length === 0 && /*#__PURE__*/_react.default.createElement(_ui.Flex, {
      justify: "center"
    }, /*#__PURE__*/_react.default.createElement(_ui.Spinner, {
      muted: true
    })), !isLoading && assets.length === 0 && /*#__PURE__*/_react.default.createElement(_ui.Text, {
      align: "center",
      muted: true
    }, "No images"));
  }, [assets, handleDeleteFinished, handleItemClick, handleItemKeyPress, isLoading, selectedAssets]);
  var renderedTableView = (0, _react.useMemo)(() => {
    return /*#__PURE__*/_react.default.createElement(_TableList.default, {
      isLoading: isLoading,
      assets: assets,
      selectedAssets: selectedAssets,
      onClick: handleItemClick,
      onKeyPress: handleItemKeyPress,
      onDeleteFinished: handleDeleteFinished
    });
  }, [isLoading, assets, selectedAssets, handleItemClick, handleItemKeyPress, handleDeleteFinished]);
  return /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
    ref: ref,
    id: _elementId.current,
    header: dialogHeaderTitle,
    width: 2,
    onClose: handleClose,
    __unstable_autoFocus: hasResetAutoFocus
  }, assetType === 'image' && renderedThumbView, assetType === 'file' && renderedTableView, assets.length > 0 && !isLastPage && /*#__PURE__*/_react.default.createElement(CardLoadMore, {
    tone: "default",
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    direction: "column"
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    type: "button",
    icon: _icons.DownloadIcon,
    loading: isLoading,
    onClick: handleFetchNextPage,
    text: "Load more",
    tone: "primary"
  }))));
};

var DefaultSource = /*#__PURE__*/_react.default.memo( /*#__PURE__*/_react.default.forwardRef(DefaultAssetSource));

exports.DefaultSource = DefaultSource;