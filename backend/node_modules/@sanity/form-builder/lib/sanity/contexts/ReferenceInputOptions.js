"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReferenceInputOptionsProvider = ReferenceInputOptionsProvider;
exports.useReferenceInputOptions = useReferenceInputOptions;

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Context = /*#__PURE__*/(0, _react.createContext)({});

/**
 * unstable
 * @internal
 */
function useReferenceInputOptions() {
  return (0, _react.useContext)(Context);
}
/**
 * unstable
 * @internal
 */


function ReferenceInputOptionsProvider(props) {
  var children = props.children,
      activePath = props.activePath,
      EditReferenceLinkComponent = props.EditReferenceLinkComponent,
      onEditReference = props.onEditReference,
      initialValueTemplateItems = props.initialValueTemplateItems;
  var contextValue = (0, _react.useMemo)(() => ({
    activePath,
    EditReferenceLinkComponent,
    onEditReference,
    initialValueTemplateItems
  }), [activePath, EditReferenceLinkComponent, onEditReference, initialValueTemplateItems]);
  return /*#__PURE__*/_react.default.createElement(Context.Provider, {
    value: contextValue
  }, children);
}