"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypeTester = TypeTester;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _typer = require("./typer");

var _templateObject, _templateObject2;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var HIGHLIGHT_CLASSNAME = 'js-highlight-selected-input';
var GlobalStyle = (0, _styledComponents.createGlobalStyle)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  .", " {\n    outline: 2px solid red;\n  }\n"])), HIGHLIGHT_CLASSNAME);

function getNameFromInput(input) {
  var classNames = input.classList.toString().split(' ').filter(name => name !== HIGHLIGHT_CLASSNAME).join('.');
  return "".concat(input.tagName.toLowerCase(), ".").concat(classNames);
}

var Sticky = _styledComponents.default.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: sticky;\n  top: 1rem;\n  z-index: 2;\n"])));

function TypeTester(_ref) {
  var readOnly = _ref.readOnly;
  var textAreaRef = (0, _react.useRef)();

  var _useState = (0, _react.useState)(),
      _useState2 = _slicedToArray(_useState, 2),
      focusedInput = _useState2[0],
      setFocusedInput = _useState2[1];

  var _useState3 = (0, _react.useState)(''),
      _useState4 = _slicedToArray(_useState3, 2),
      testOutput = _useState4[0],
      setTestOutput = _useState4[1];

  var _useState5 = (0, _react.useState)(false),
      _useState6 = _slicedToArray(_useState5, 2),
      isRunning = _useState6[0],
      setIsRunning = _useState6[1];

  var cancelTypeTester = (0, _react.useRef)(() => true);
  var handleFocus = (0, _react.useCallback)(e => {
    if (textAreaRef.current && e.target === textAreaRef.current) {
      return;
    }

    if (e.type === 'focusin' && e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {
      setFocusedInput(e.target);
    }
  }, [textAreaRef]);
  (0, _react.useEffect)(() => {
    document.addEventListener('focusin', handleFocus);
    return () => {
      document.removeEventListener('focusin', handleFocus);

      if (cancelTypeTester.current) {
        cancelTypeTester.current();
      }
    };
  }, [handleFocus]);
  var handleRunTest = (0, _react.useCallback)(() => {
    setIsRunning(true);
    setTestOutput('Running test...');
    cancelTypeTester.current = (0, _typer.runTest)({
      inputElement: focusedInput,
      times: 4,
      gracePeriod: 4000,
      onRun: output => {
        setTestOutput(existing => "".concat(existing, "\n").concat(output));
      },
      onFinished: () => {
        setIsRunning(false);
      }
    });
  }, [focusedInput]);
  var handleHighlightMouseOver = (0, _react.useCallback)(event => {
    if (event.type === 'mouseover') {
      focusedInput.classList.add(HIGHLIGHT_CLASSNAME);
    }

    if (event.type === 'mouseout') {
      focusedInput.classList.remove(HIGHLIGHT_CLASSNAME);
    }
  }, [focusedInput]);
  var handleHighlightClick = (0, _react.useCallback)(() => {
    if (focusedInput) {
      focusedInput.focus();
    }
  }, [focusedInput]);
  var isDisabled = (0, _react.useMemo)(() => {
    return isRunning || !focusedInput || !['INPUT', 'TEXTAREA'].includes(focusedInput.tagName) || readOnly;
  }, [focusedInput, isRunning, readOnly]);
  return /*#__PURE__*/_react.default.createElement(Sticky, null, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    padding: 4,
    tone: "default",
    border: true
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Label, {
    size: 0
  }, "Type Performance Tester"), /*#__PURE__*/_react.default.createElement(_ui.Text, {
    title: isDisabled ? undefined : "Click to focus input",
    size: 1,
    onClick: handleHighlightClick,
    onMouseOver: handleHighlightMouseOver,
    onMouseOut: handleHighlightMouseOver
  }, isDisabled && !isRunning ? 'No input selected' : "Selected input: ".concat(getNameFromInput(focusedInput))), /*#__PURE__*/_react.default.createElement(_ui.TextArea, {
    ref: textAreaRef,
    readOnly: true,
    rows: 6,
    value: testOutput
  }), /*#__PURE__*/_react.default.createElement(_ui.Button, {
    text: "Run test",
    onClick: handleRunTest,
    disabled: isDisabled,
    loading: isRunning
  }))), /*#__PURE__*/_react.default.createElement(GlobalStyle, null));
}