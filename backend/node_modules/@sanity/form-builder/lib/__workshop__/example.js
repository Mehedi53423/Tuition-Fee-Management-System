"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ExampleStory;

var _ui = require("@sanity/ui");

var _uiWorkshop = require("@sanity/ui-workshop");

var _react = _interopRequireWildcard(require("react"));

var _mutator = require("@sanity/mutator");

var _presence = require("@sanity/base/presence");

var _formBuilder = require("../sanity/legacyPartImplementations/form-builder");

var _applyPatch = require("../patch/applyPatch");

var _gradientPatchAdapter = require("../sanity/utils/gradientPatchAdapter");

var _data = require("./_common/data");

var _common = require("./_common");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var patchChannel = _formBuilder.FormBuilder.createPatchChannel();

function ExampleStory() {
  var _useProps = (0, _uiWorkshop.useProps)(),
      setPropValue = _useProps.setPropValue;

  var ref = _react.default.useRef();

  var toast = (0, _ui.useToast)();
  var isUseMutator = (0, _uiWorkshop.useBoolean)('Use Mutator', false, 'Props');

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      setFocused = _useState2[1];

  var _useState3 = (0, _react.useState)([]),
      _useState4 = _slicedToArray(_useState3, 2),
      focusPath = _useState4[0],
      setFocusPath = _useState4[1];

  var isReadOnly = (0, _uiWorkshop.useBoolean)('Read-only', false, 'Props');
  var isFilterFields = (0, _uiWorkshop.useBoolean)('Filter Fields', false, 'Props');
  var isHiddenGroup = (0, _uiWorkshop.useBoolean)('Hidden Group', false, 'Props');
  var isTypeTester = (0, _uiWorkshop.useBoolean)('Type Performance Tester', false, 'Props');
  var includeUnknownField = (0, _uiWorkshop.useBoolean)('Unknown Field in Value', false, 'Props');
  var isDebug = (0, _uiWorkshop.useBoolean)('Debug', false, 'Props');
  var isChangesOpen = (0, _uiWorkshop.useBoolean)('Changes Open', false, 'Props');
  var selectedSchemaKey = (0, _uiWorkshop.useSelect)('Schema', _data.schemaListOptions, Object.values(_data.schemaListOptions)[0], 'Props');

  var _useState5 = (0, _react.useState)((0, _data.getDummyDocument)()),
      _useState6 = _slicedToArray(_useState5, 2),
      documentValue = _useState6[0],
      setDocumentValue = _useState6[1];

  var _useState7 = (0, _react.useState)(""),
      _useState8 = _slicedToArray(_useState7, 2),
      fieldFilterSource = _useState8[0],
      setFieldFilterSource = _useState8[1];

  var _useState9 = (0, _react.useState)(""),
      _useState10 = _slicedToArray(_useState9, 2),
      fieldFilterValue = _useState10[0],
      setFieldFilterValue = _useState10[1];

  var EMPTY = [];
  var schema = (0, _react.useMemo)(() => {
    return (0, _data.getDummySchema)({
      schemaKey: selectedSchemaKey,
      hiddenGroup: isHiddenGroup
    });
  }, [isHiddenGroup, selectedSchemaKey]);
  var documentType = (0, _react.useMemo)(() => {
    return schema.get('dummy');
  }, [schema]);
  var handleChange = (0, _react.useCallback)(patchEvent => {
    setDocumentValue(currentDocumentValue => (0, _applyPatch.applyAll)(currentDocumentValue, patchEvent.patches));
  }, []);
  var handleChangeMutator = (0, _react.useCallback)(patchEvent => {
    var patcher = new _mutator.Patcher((0, _gradientPatchAdapter.toGradient)(patchEvent.patches).map(patch => _objectSpread(_objectSpread({}, patch), {}, {
      id: _data.DUMMY_DOCUMENT_ID
    })));
    setDocumentValue(currentDocumentValue => patcher.apply(currentDocumentValue));
  }, []);
  var handleBlur = (0, _react.useCallback)(() => setFocused(false), []);
  var handleFocus = (0, _react.useCallback)(path => {
    setFocusPath(path);
    setFocused(true);
  }, []);
  var handleChangeFieldFilterSource = (0, _react.useCallback)(value => {
    var handledValue = value && value.length > 0 ? value : "";
    setFieldFilterSource(handledValue);
  }, []);
  var handleChangeFieldFilter = (0, _react.useCallback)(value => {
    setFieldFilterValue(value);
    toast.push({
      status: 'success',
      title: value === "" ? "Cleared field filter" : "Updated field filter"
    });
  }, [toast]);
  var memoizedFieldFilter = (0, _react.useMemo)(() => {
    if (!fieldFilterValue || fieldFilterValue.length === 0) {
      return () => true;
    }

    try {
      var body = "const [type, field] = args; const result = ".concat(fieldFilterValue, "; return result(type, field);"); // eslint-disable-next-line no-new-func

      var filter = new Function('...args', body);
      return filter;
    } catch (error) {
      // eslint-disable-next-line no-console
      console.error("Failed filtering", error);
      return () => true;
    }
  }, [fieldFilterValue]);
  var fieldFilter = (0, _react.useCallback)((type, field) => {
    return memoizedFieldFilter(type, field);
  }, [memoizedFieldFilter]); // Remove any remaining field filter if you disable the option

  (0, _react.useEffect)(() => {
    if (!isFilterFields && fieldFilterSource.length > 0) {
      setFieldFilterSource("");
      setFieldFilterValue("");
      toast.push({
        status: 'success',
        title: "Cleared field filter"
      });
    }
  }, [fieldFilterSource.length, isFilterFields, toast]);
  (0, _react.useEffect)(() => {
    if (includeUnknownField) {
      setDocumentValue(currentDocumentValue => _objectSpread(_objectSpread({}, currentDocumentValue), {}, {
        isPublished: true
      }));
    } else {
      setDocumentValue(currentDocumentValue => {
        var newValue = _objectSpread({}, currentDocumentValue);

        delete newValue.isPublished;
        return newValue;
      });
    }
  }, [includeUnknownField]);
  (0, _react.useEffect)(() => {
    if (includeUnknownField && !(documentValue !== null && documentValue !== void 0 && documentValue.isPublished)) {
      setPropValue('Unknown Field in Value', false);
    }
  }, [documentValue]);
  return /*#__PURE__*/_react.default.createElement(_presence.PresenceOverlay, null, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Grid, {
    columns: isDebug ? [1, 1, 1, 12] : 1,
    gap: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 4,
    column: 6
  }, isFilterFields && /*#__PURE__*/_react.default.createElement(_common.FilterFieldInput, {
    value: fieldFilterSource,
    onChange: handleChangeFieldFilterSource,
    onFilter: handleChangeFieldFilter
  }), isTypeTester && /*#__PURE__*/_react.default.createElement(_common.TypeTester, {
    readOnly: isReadOnly
  }), /*#__PURE__*/_react.default.createElement(_common.FormBuilderTester, {
    patchChannel: patchChannel,
    schema: schema,
    value: documentValue,
    isChangesOpen: isChangesOpen
  }, /*#__PURE__*/_react.default.createElement(_formBuilder.FormBuilderInput, {
    type: documentType,
    onChange: isUseMutator ? handleChangeMutator : handleChange,
    level: 0,
    value: documentValue,
    onFocus: handleFocus,
    onBlur: handleBlur,
    focusPath: focusPath,
    readOnly: isReadOnly,
    isRoot: true,
    filterField: fieldFilter,
    ref: ref,
    path: EMPTY
  }))), isDebug && /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 4,
    column: 6
  }, /*#__PURE__*/_react.default.createElement(_common.FormDebugger, {
    value: documentValue,
    focusPath: focusPath
  })))));
}