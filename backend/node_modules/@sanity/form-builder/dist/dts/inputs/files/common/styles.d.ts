/// <reference types="react" />
import { DefaultTheme, StyledComponent } from 'styled-components';
export type { FileInfo } from '../../common/fileTarget';
export declare const FileTarget: import("react").ForwardRefExoticComponent<Pick<Omit<({
    cite?: string;
    data?: string;
    form?: string;
    label?: string;
    slot?: string;
    span?: number;
    style?: import("react").CSSProperties;
    summary?: string;
    title?: string;
    pattern?: string;
    default?: boolean;
    type?: string;
    className?: string;
    color?: string;
    height?: import("@sanity/ui").BoxHeight | import("@sanity/ui").BoxHeight[];
    id?: string;
    lang?: string;
    max?: string | number;
    media?: string;
    method?: string;
    min?: string | number;
    name?: string;
    target?: string;
    width?: string | number;
    role?: import("react").AriaRole;
    tabIndex?: number;
    crossOrigin?: string;
    display?: import("@sanity/ui").BoxDisplay | import("@sanity/ui").BoxDisplay[];
    href?: string;
    overflow?: import("@sanity/ui").BoxOverflow | import("@sanity/ui").BoxOverflow[];
    radius?: number | number[];
    'aria-activedescendant'?: string;
    'aria-atomic'?: boolean | "true" | "false";
    'aria-autocomplete'?: "list" | "none" | "inline" | "both";
    'aria-busy'?: boolean | "true" | "false";
    'aria-checked'?: boolean | "true" | "false" | "mixed";
    'aria-colcount'?: number;
    'aria-colindex'?: number;
    'aria-colspan'?: number;
    'aria-controls'?: string;
    'aria-current'?: boolean | "time" | "step" | "true" | "false" | "page" | "location" | "date";
    'aria-describedby'?: string;
    'aria-details'?: string;
    'aria-disabled'?: boolean | "true" | "false";
    'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup";
    'aria-errormessage'?: string;
    'aria-expanded'?: boolean | "true" | "false";
    'aria-flowto'?: string;
    'aria-grabbed'?: boolean | "true" | "false";
    'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    'aria-hidden'?: boolean | "true" | "false";
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling";
    'aria-keyshortcuts'?: string;
    'aria-label'?: string;
    'aria-labelledby'?: string;
    'aria-level'?: number;
    'aria-live'?: "off" | "assertive" | "polite";
    'aria-modal'?: boolean | "true" | "false";
    'aria-multiline'?: boolean | "true" | "false";
    'aria-multiselectable'?: boolean | "true" | "false";
    'aria-orientation'?: "horizontal" | "vertical";
    'aria-owns'?: string;
    'aria-placeholder'?: string;
    'aria-posinset'?: number;
    'aria-pressed'?: boolean | "true" | "false" | "mixed";
    'aria-readonly'?: boolean | "true" | "false";
    'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    'aria-required'?: boolean | "true" | "false";
    'aria-roledescription'?: string;
    'aria-rowcount'?: number;
    'aria-rowindex'?: number;
    'aria-rowspan'?: number;
    'aria-selected'?: boolean | "true" | "false";
    'aria-setsize'?: number;
    'aria-sort'?: "none" | "ascending" | "descending" | "other";
    'aria-valuemax'?: number;
    'aria-valuemin'?: number;
    'aria-valuenow'?: number;
    'aria-valuetext'?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onFocus?: import("react").FocusEventHandler<HTMLDivElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement>;
    onBlur?: import("react").FocusEventHandler<HTMLDivElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement>;
    onChange?: import("react").FormEventHandler<HTMLDivElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLDivElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onInput?: import("react").FormEventHandler<HTMLDivElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onReset?: import("react").FormEventHandler<HTMLDivElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onSubmit?: import("react").FormEventHandler<HTMLDivElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onInvalid?: import("react").FormEventHandler<HTMLDivElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onLoad?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onError?: import("react").ReactEventHandler<HTMLDivElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onAbort?: import("react").ReactEventHandler<HTMLDivElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLDivElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLDivElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEnded?: import("react").ReactEventHandler<HTMLDivElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPause?: import("react").ReactEventHandler<HTMLDivElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlay?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onProgress?: import("react").ReactEventHandler<HTMLDivElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onStalled?: import("react").ReactEventHandler<HTMLDivElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLDivElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLDivElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLDivElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onDrag?: import("react").DragEventHandler<HTMLDivElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEnd?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragExit?: import("react").DragEventHandler<HTMLDivElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLDivElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragOver?: import("react").DragEventHandler<HTMLDivElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragStart?: import("react").DragEventHandler<HTMLDivElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDrop?: import("react").DragEventHandler<HTMLDivElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onSelect?: import("react").ReactEventHandler<HTMLDivElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onScroll?: import("react").UIEventHandler<HTMLDivElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLDivElement>;
    onWheel?: import("react").WheelEventHandler<HTMLDivElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement>;
    onAnimationStart?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement>;
    key?: import("react").Key;
    ref?: import("react").Ref<import("react").Component<Pick<import("@sanity/ui").CardProps & Omit<import("react").HTMLProps<HTMLDivElement>, "height" | "as">, "cite" | "data" | "form" | "label" | "slot" | "span" | "style" | "summary" | "title" | "pattern" | "default" | "type" | "className" | "color" | "id" | "lang" | "max" | "media" | "method" | "min" | "name" | "target" | "width" | "role" | "tabIndex" | "crossOrigin" | "href" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "key" | "wrap" | "accept" | "acceptCharset" | "action" | "allowFullScreen" | "allowTransparency" | "alt" | "async" | "autoComplete" | "autoFocus" | "autoPlay" | "capture" | "cellPadding" | "cellSpacing" | "charSet" | "challenge" | "checked" | "classID" | "cols" | "colSpan" | "content" | "controls" | "coords" | "dateTime" | "defer" | "disabled" | "download" | "encType" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "frameBorder" | "headers" | "high" | "hrefLang" | "htmlFor" | "httpEquiv" | "integrity" | "keyParams" | "keyType" | "kind" | "list" | "loop" | "low" | "manifest" | "marginHeight" | "marginWidth" | "maxLength" | "mediaGroup" | "minLength" | "multiple" | "muted" | "nonce" | "noValidate" | "open" | "optimum" | "placeholder" | "playsInline" | "poster" | "preload" | "readOnly" | "rel" | "required" | "reversed" | "rows" | "rowSpan" | "sandbox" | "scope" | "scoped" | "scrolling" | "seamless" | "selected" | "shape" | "size" | "sizes" | "src" | "srcDoc" | "srcLang" | "srcSet" | "start" | "step" | "useMap" | "value" | "wmode" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "spellCheck" | "translate" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | keyof import("@sanity/ui").CardProps> & import("react").RefAttributes<HTMLDivElement>, any, any>> & import("react").Ref<HTMLDivElement>;
    as?: "symbol" | "object" | "a" | "abbr" | "address" | "area" | "article" | "aside" | "audio" | "b" | "base" | "bdi" | "bdo" | "big" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "footer" | "form" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "keygen" | "label" | "legend" | "li" | "link" | "main" | "map" | "mark" | "menu" | "menuitem" | "meta" | "meter" | "nav" | "noindex" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "progress" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "slot" | "script" | "section" | "select" | "small" | "source" | "span" | "strong" | "style" | "sub" | "summary" | "sup" | "table" | "template" | "tbody" | "td" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "track" | "u" | "ul" | "var" | "video" | "wbr" | "webview" | "svg" | "animate" | "animateMotion" | "animateTransform" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feDropShadow" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "mpath" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "switch" | "text" | "textPath" | "tspan" | "use" | "view" | import("react").ComponentClass<any, any> | import("react").FunctionComponent<any>;
    wrap?: string;
    accept?: string;
    acceptCharset?: string;
    action?: string;
    allowFullScreen?: boolean;
    allowTransparency?: boolean;
    alt?: string;
    async?: boolean;
    autoComplete?: string;
    autoFocus?: boolean;
    autoPlay?: boolean;
    capture?: boolean | "user" | "environment";
    cellPadding?: string | number;
    cellSpacing?: string | number;
    charSet?: string;
    challenge?: string;
    checked?: boolean;
    classID?: string;
    cols?: number;
    colSpan?: number;
    content?: string;
    controls?: boolean;
    coords?: string;
    dateTime?: string;
    defer?: boolean;
    disabled?: boolean;
    download?: any;
    encType?: string;
    formAction?: string;
    formEncType?: string;
    formMethod?: string;
    formNoValidate?: boolean;
    formTarget?: string;
    frameBorder?: string | number;
    headers?: string;
    high?: number;
    hrefLang?: string;
    htmlFor?: string;
    httpEquiv?: string;
    integrity?: string;
    keyParams?: string;
    keyType?: string;
    kind?: string;
    list?: string;
    loop?: boolean;
    low?: number;
    manifest?: string;
    marginHeight?: number;
    marginWidth?: number;
    maxLength?: number;
    mediaGroup?: string;
    minLength?: number;
    multiple?: boolean;
    muted?: boolean;
    nonce?: string;
    noValidate?: boolean;
    open?: boolean;
    optimum?: number;
    placeholder?: string;
    playsInline?: boolean;
    poster?: string;
    preload?: string;
    readOnly?: boolean;
    rel?: string;
    required?: boolean;
    reversed?: boolean;
    rows?: number;
    rowSpan?: number;
    sandbox?: string;
    scope?: string;
    scoped?: boolean;
    scrolling?: string;
    seamless?: boolean;
    selected?: boolean;
    shape?: string;
    size?: number;
    sizes?: string;
    src?: string;
    srcDoc?: string;
    srcLang?: string;
    srcSet?: string;
    start?: number;
    step?: string | number;
    useMap?: string;
    value?: string | number | readonly string[];
    wmode?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    contentEditable?: (boolean | "true" | "false") | "inherit";
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    spellCheck?: boolean | "true" | "false";
    translate?: "yes" | "no";
    radioGroup?: string;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "search" | "none" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    flex?: import("@sanity/ui").FlexValue | import("@sanity/ui").FlexValue[];
    sizing?: import("@sanity/ui").BoxSizing | import("@sanity/ui").BoxSizing[];
    column?: import("@sanity/ui").GridItemColumn | import("@sanity/ui").GridItemColumn[];
    columnStart?: import("@sanity/ui").GridItemColumnStart | import("@sanity/ui").GridItemColumnStart[];
    columnEnd?: import("@sanity/ui").GridItemColumnEnd | import("@sanity/ui").GridItemColumnEnd[];
    row?: import("@sanity/ui").GridItemRow | import("@sanity/ui").GridItemRow[];
    rowStart?: import("@sanity/ui").GridItemRowStart | import("@sanity/ui").GridItemRowStart[];
    rowEnd?: import("@sanity/ui").GridItemRowEnd | import("@sanity/ui").GridItemRowEnd[];
    margin?: number | number[];
    marginX?: number | number[];
    marginY?: number | number[];
    marginTop?: number | number[];
    marginRight?: number | number[];
    marginBottom?: number | number[];
    marginLeft?: number | number[];
    padding?: number | number[];
    paddingX?: number | number[];
    paddingY?: number | number[];
    paddingTop?: number | number[];
    paddingRight?: number | number[];
    paddingBottom?: number | number[];
    paddingLeft?: number | number[];
    __unstable_checkered?: boolean;
    __unstable_focusRing?: boolean;
    pressed?: boolean;
    scheme?: import("@sanity/ui").ThemeColorSchemeKey;
    tone?: import("@sanity/ui").CardTone;
    border?: boolean | boolean[];
    borderTop?: boolean | boolean[];
    borderRight?: boolean | boolean[];
    borderBottom?: boolean | boolean[];
    borderLeft?: boolean | boolean[];
    shadow?: number | number[];
    $border?: boolean;
} | {
    cite?: string;
    data?: string;
    form?: string;
    label?: string;
    slot?: string;
    span?: number;
    style?: import("react").CSSProperties;
    summary?: string;
    title?: string;
    pattern?: string;
    default?: boolean;
    type?: string;
    className?: string;
    color?: string;
    height?: import("@sanity/ui").BoxHeight | import("@sanity/ui").BoxHeight[];
    id?: string;
    lang?: string;
    max?: string | number;
    media?: string;
    method?: string;
    min?: string | number;
    name?: string;
    target?: string;
    width?: string | number;
    role?: import("react").AriaRole;
    tabIndex?: number;
    crossOrigin?: string;
    display?: import("@sanity/ui").BoxDisplay | import("@sanity/ui").BoxDisplay[];
    href?: string;
    overflow?: import("@sanity/ui").BoxOverflow | import("@sanity/ui").BoxOverflow[];
    radius?: number | number[];
    'aria-activedescendant'?: string;
    'aria-atomic'?: boolean | "true" | "false";
    'aria-autocomplete'?: "list" | "none" | "inline" | "both";
    'aria-busy'?: boolean | "true" | "false";
    'aria-checked'?: boolean | "true" | "false" | "mixed";
    'aria-colcount'?: number;
    'aria-colindex'?: number;
    'aria-colspan'?: number;
    'aria-controls'?: string;
    'aria-current'?: boolean | "time" | "step" | "true" | "false" | "page" | "location" | "date";
    'aria-describedby'?: string;
    'aria-details'?: string;
    'aria-disabled'?: boolean | "true" | "false";
    'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup";
    'aria-errormessage'?: string;
    'aria-expanded'?: boolean | "true" | "false";
    'aria-flowto'?: string;
    'aria-grabbed'?: boolean | "true" | "false";
    'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree";
    'aria-hidden'?: boolean | "true" | "false";
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling";
    'aria-keyshortcuts'?: string;
    'aria-label'?: string;
    'aria-labelledby'?: string;
    'aria-level'?: number;
    'aria-live'?: "off" | "assertive" | "polite";
    'aria-modal'?: boolean | "true" | "false";
    'aria-multiline'?: boolean | "true" | "false";
    'aria-multiselectable'?: boolean | "true" | "false";
    'aria-orientation'?: "horizontal" | "vertical";
    'aria-owns'?: string;
    'aria-placeholder'?: string;
    'aria-posinset'?: number;
    'aria-pressed'?: boolean | "true" | "false" | "mixed";
    'aria-readonly'?: boolean | "true" | "false";
    'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    'aria-required'?: boolean | "true" | "false";
    'aria-roledescription'?: string;
    'aria-rowcount'?: number;
    'aria-rowindex'?: number;
    'aria-rowspan'?: number;
    'aria-selected'?: boolean | "true" | "false";
    'aria-setsize'?: number;
    'aria-sort'?: "none" | "ascending" | "descending" | "other";
    'aria-valuemax'?: number;
    'aria-valuemin'?: number;
    'aria-valuenow'?: number;
    'aria-valuetext'?: string;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement>;
    onFocus?: import("react").FocusEventHandler<HTMLDivElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement>;
    onBlur?: import("react").FocusEventHandler<HTMLDivElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement>;
    onChange?: import("react").FormEventHandler<HTMLDivElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLDivElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onInput?: import("react").FormEventHandler<HTMLDivElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onReset?: import("react").FormEventHandler<HTMLDivElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onSubmit?: import("react").FormEventHandler<HTMLDivElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onInvalid?: import("react").FormEventHandler<HTMLDivElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement>;
    onLoad?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onError?: import("react").ReactEventHandler<HTMLDivElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLDivElement>;
    onAbort?: import("react").ReactEventHandler<HTMLDivElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLDivElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLDivElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onEnded?: import("react").ReactEventHandler<HTMLDivElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLDivElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPause?: import("react").ReactEventHandler<HTMLDivElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlay?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLDivElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onProgress?: import("react").ReactEventHandler<HTMLDivElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLDivElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onStalled?: import("react").ReactEventHandler<HTMLDivElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLDivElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLDivElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLDivElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onDrag?: import("react").DragEventHandler<HTMLDivElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEnd?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLDivElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragExit?: import("react").DragEventHandler<HTMLDivElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLDivElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragOver?: import("react").DragEventHandler<HTMLDivElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDragStart?: import("react").DragEventHandler<HTMLDivElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onDrop?: import("react").DragEventHandler<HTMLDivElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLDivElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLDivElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement>;
    onSelect?: import("react").ReactEventHandler<HTMLDivElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLDivElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLDivElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement>;
    onScroll?: import("react").UIEventHandler<HTMLDivElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLDivElement>;
    onWheel?: import("react").WheelEventHandler<HTMLDivElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement>;
    onAnimationStart?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement>;
    key?: import("react").Key;
    ref?: import("react").Ref<HTMLDivElement>;
    as?: "symbol" | "object" | "a" | "abbr" | "address" | "area" | "article" | "aside" | "audio" | "b" | "base" | "bdi" | "bdo" | "big" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "footer" | "form" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "keygen" | "label" | "legend" | "li" | "link" | "main" | "map" | "mark" | "menu" | "menuitem" | "meta" | "meter" | "nav" | "noindex" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "progress" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "slot" | "script" | "section" | "select" | "small" | "source" | "span" | "strong" | "style" | "sub" | "summary" | "sup" | "table" | "template" | "tbody" | "td" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "track" | "u" | "ul" | "var" | "video" | "wbr" | "webview" | "svg" | "animate" | "animateMotion" | "animateTransform" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feDropShadow" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "mpath" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "switch" | "text" | "textPath" | "tspan" | "use" | "view" | import("react").ComponentClass<any, any> | import("react").FunctionComponent<any>;
    wrap?: string;
    accept?: string;
    acceptCharset?: string;
    action?: string;
    allowFullScreen?: boolean;
    allowTransparency?: boolean;
    alt?: string;
    async?: boolean;
    autoComplete?: string;
    autoFocus?: boolean;
    autoPlay?: boolean;
    capture?: boolean | "user" | "environment";
    cellPadding?: string | number;
    cellSpacing?: string | number;
    charSet?: string;
    challenge?: string;
    checked?: boolean;
    classID?: string;
    cols?: number;
    colSpan?: number;
    content?: string;
    controls?: boolean;
    coords?: string;
    dateTime?: string;
    defer?: boolean;
    disabled?: boolean;
    download?: any;
    encType?: string;
    formAction?: string;
    formEncType?: string;
    formMethod?: string;
    formNoValidate?: boolean;
    formTarget?: string;
    frameBorder?: string | number;
    headers?: string;
    high?: number;
    hrefLang?: string;
    htmlFor?: string;
    httpEquiv?: string;
    integrity?: string;
    keyParams?: string;
    keyType?: string;
    kind?: string;
    list?: string;
    loop?: boolean;
    low?: number;
    manifest?: string;
    marginHeight?: number;
    marginWidth?: number;
    maxLength?: number;
    mediaGroup?: string;
    minLength?: number;
    multiple?: boolean;
    muted?: boolean;
    nonce?: string;
    noValidate?: boolean;
    open?: boolean;
    optimum?: number;
    placeholder?: string;
    playsInline?: boolean;
    poster?: string;
    preload?: string;
    readOnly?: boolean;
    rel?: string;
    required?: boolean;
    reversed?: boolean;
    rows?: number;
    rowSpan?: number;
    sandbox?: string;
    scope?: string;
    scoped?: boolean;
    scrolling?: string;
    seamless?: boolean;
    selected?: boolean;
    shape?: string;
    size?: number;
    sizes?: string;
    src?: string;
    srcDoc?: string;
    srcLang?: string;
    srcSet?: string;
    start?: number;
    step?: string | number;
    useMap?: string;
    value?: string | number | readonly string[];
    wmode?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    contentEditable?: (boolean | "true" | "false") | "inherit";
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    spellCheck?: boolean | "true" | "false";
    translate?: "yes" | "no";
    radioGroup?: string;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "search" | "none" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    flex?: import("@sanity/ui").FlexValue | import("@sanity/ui").FlexValue[];
    sizing?: import("@sanity/ui").BoxSizing | import("@sanity/ui").BoxSizing[];
    column?: import("@sanity/ui").GridItemColumn | import("@sanity/ui").GridItemColumn[];
    columnStart?: import("@sanity/ui").GridItemColumnStart | import("@sanity/ui").GridItemColumnStart[];
    columnEnd?: import("@sanity/ui").GridItemColumnEnd | import("@sanity/ui").GridItemColumnEnd[];
    row?: import("@sanity/ui").GridItemRow | import("@sanity/ui").GridItemRow[];
    rowStart?: import("@sanity/ui").GridItemRowStart | import("@sanity/ui").GridItemRowStart[];
    rowEnd?: import("@sanity/ui").GridItemRowEnd | import("@sanity/ui").GridItemRowEnd[];
    margin?: number | number[];
    marginX?: number | number[];
    marginY?: number | number[];
    marginTop?: number | number[];
    marginRight?: number | number[];
    marginBottom?: number | number[];
    marginLeft?: number | number[];
    padding?: number | number[];
    paddingX?: number | number[];
    paddingY?: number | number[];
    paddingTop?: number | number[];
    paddingRight?: number | number[];
    paddingBottom?: number | number[];
    paddingLeft?: number | number[];
    __unstable_checkered?: boolean;
    __unstable_focusRing?: boolean;
    pressed?: boolean;
    scheme?: import("@sanity/ui").ThemeColorSchemeKey;
    tone?: import("@sanity/ui").CardTone;
    border?: boolean | boolean[];
    borderTop?: boolean | boolean[];
    borderRight?: boolean | boolean[];
    borderBottom?: boolean | boolean[];
    borderLeft?: boolean | boolean[];
    shadow?: number | number[];
    $border?: boolean;
}) & {
    theme?: any;
} & ({} | {
    children?: import("react").ReactNode;
}), "onPaste" | "onKeyDown" | "onDragEnter" | "onDragLeave" | "onDragOver" | "onDrop"> & {
    onFiles?: (files: File[]) => void;
    onFilesOver?: (files: import("../../common/fileTarget").FileInfo[]) => void;
    onFilesOut?: () => void;
    disabled?: boolean;
}, "cite" | "data" | "form" | "label" | "slot" | "span" | "style" | "summary" | "title" | "pattern" | "default" | "type" | "className" | "color" | "height" | "id" | "lang" | "max" | "media" | "method" | "min" | "name" | "target" | "width" | "role" | "tabIndex" | "crossOrigin" | "display" | "href" | "overflow" | "radius" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeaveCapture" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "key" | "theme" | "as" | "wrap" | "accept" | "acceptCharset" | "action" | "allowFullScreen" | "allowTransparency" | "alt" | "async" | "autoComplete" | "autoFocus" | "autoPlay" | "capture" | "cellPadding" | "cellSpacing" | "charSet" | "challenge" | "checked" | "classID" | "cols" | "colSpan" | "content" | "controls" | "coords" | "dateTime" | "defer" | "download" | "encType" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "frameBorder" | "headers" | "high" | "hrefLang" | "htmlFor" | "httpEquiv" | "integrity" | "keyParams" | "keyType" | "kind" | "list" | "loop" | "low" | "manifest" | "marginHeight" | "marginWidth" | "maxLength" | "mediaGroup" | "minLength" | "multiple" | "muted" | "nonce" | "noValidate" | "open" | "optimum" | "placeholder" | "playsInline" | "poster" | "preload" | "readOnly" | "rel" | "required" | "reversed" | "rows" | "rowSpan" | "sandbox" | "scope" | "scoped" | "scrolling" | "seamless" | "selected" | "shape" | "size" | "sizes" | "src" | "srcDoc" | "srcLang" | "srcSet" | "start" | "step" | "useMap" | "value" | "wmode" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "spellCheck" | "translate" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "flex" | "sizing" | "column" | "columnStart" | "columnEnd" | "row" | "rowStart" | "rowEnd" | "margin" | "marginX" | "marginY" | "marginTop" | "marginRight" | "marginBottom" | "marginLeft" | "padding" | "paddingX" | "paddingY" | "paddingTop" | "paddingRight" | "paddingBottom" | "paddingLeft" | "__unstable_checkered" | "__unstable_focusRing" | "pressed" | "scheme" | "tone" | "border" | "borderTop" | "borderRight" | "borderBottom" | "borderLeft" | "shadow" | keyof {
    onFiles?: (files: File[]) => void;
    onFilesOver?: (files: import("../../common/fileTarget").FileInfo[]) => void;
    onFilesOut?: () => void;
    disabled?: boolean;
} | "$border"> & import("react").RefAttributes<HTMLElement>>;
export declare const Overlay: StyledComponent<'div', DefaultTheme>;
//# sourceMappingURL=styles.d.ts.map