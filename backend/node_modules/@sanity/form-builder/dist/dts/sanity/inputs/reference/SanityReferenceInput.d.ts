import React from 'react';
import { Marker, Path, Reference, ReferenceSchemaType, SanityDocument } from '@sanity/types';
import { FormFieldPresence } from '@sanity/base/presence';
import PatchEvent from '../../../PatchEvent';
export declare type Props = {
    value?: Reference;
    compareValue?: Reference;
    type: ReferenceSchemaType;
    markers: Marker[];
    focusPath: Path;
    readOnly?: boolean;
    onFocus: (path: Path) => void;
    onChange: (event: PatchEvent) => void;
    level: number;
    presence: FormFieldPresence[];
    document: SanityDocument;
    getValuePath: () => Path;
};
declare const _default: {
    new (props: Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath"> | Readonly<Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath">>): {
        _input: any;
        _didShowFocusWarning: boolean;
        focus(): void;
        setRef: (input: any) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath">>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath">> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath">, context: any): {
        _input: any;
        _didShowFocusWarning: boolean;
        focus(): void;
        setRef: (input: any) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath">>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath">> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Omit<Props & React.RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    contextTypes: {
        getValuePath: import("prop-types").Requireable<any>;
    };
    contextType?: React.Context<any>;
};
export default _default;
//# sourceMappingURL=SanityReferenceInput.d.ts.map