/// <reference types="react" />
declare const _default: {
    object: import("react").MemoExoticComponent<import("react").ForwardRefExoticComponent<import("../../inputs/ObjectInput/ObjectInput").Props & import("react").RefAttributes<HTMLDivElement>>>;
    array: import("react").ForwardRefExoticComponent<import("../../inputs/arrays/ArrayOfObjectsInput").Props & import("react").RefAttributes<import("../../inputs/arrays/ArrayOfObjectsInput").default>>;
    boolean: import("react").ForwardRefExoticComponent<import("../../inputs/types").Props<boolean, import("@sanity/types/src").BooleanSchemaType> & import("react").RefAttributes<HTMLInputElement>>;
    number: import("react").ForwardRefExoticComponent<import("../../inputs/types").Props<number, import("@sanity/types/src").NumberSchemaType> & import("react").RefAttributes<HTMLInputElement>>;
    text: import("react").ForwardRefExoticComponent<import("../../inputs/types").Props<string, import("@sanity/types/src").TextSchemaType> & import("react").RefAttributes<HTMLTextAreaElement>>;
    email: import("react").ForwardRefExoticComponent<import("../../inputs/types").Props<string, import("@sanity/types/src").StringSchemaType> & import("react").RefAttributes<HTMLInputElement>>;
    datetime: import("react").ForwardRefExoticComponent<import("../../inputs/DateInputs/types").CommonProps & {
        onChange: (event: import("../../PatchEvent").default) => void;
        type: {
            name: string;
            title: string;
            description?: string;
            options?: {
                dateFormat?: string;
                timeFormat?: string;
                timeStep?: number;
                calendarTodayLabel?: string;
            };
            placeholder?: string;
        };
    } & import("react").RefAttributes<HTMLInputElement>>;
    date: import("react").ForwardRefExoticComponent<import("../../inputs/DateInputs/types").CommonProps & {
        onChange: (event: import("../../PatchEvent").default) => void;
        type: {
            name: string;
            title: string;
            description?: string;
            options?: {
                dateFormat?: string;
                calendarTodayLabel?: string;
            };
            placeholder?: string;
        };
    } & import("react").RefAttributes<HTMLInputElement>>;
    url: import("react").ForwardRefExoticComponent<import("../../inputs/types").Props<string, import("@sanity/types/src").StringSchemaType> & import("react").RefAttributes<HTMLInputElement>>;
    image: import("react").ForwardRefExoticComponent<{
        type: import("@sanity/types/src").ImageSchemaType;
        onFocus: (path: import("@sanity/types/src").Path) => void;
        onBlur: () => void;
        onChange: (event: import("../../PatchEvent").default) => void;
        readOnly: boolean;
        value?: import("../../inputs/files/ImageInput").Image;
        presence: import("@sanity/base/presence").FormFieldPresence[];
        focusPath: import("@sanity/types/src").Path;
        markers: import("@sanity/types/src").ValidationMarker[];
        compareValue?: import("../../inputs/files/ImageInput").Image;
        level: number;
        getValuePath: () => import("@sanity/types/src").Path;
        directUploads?: boolean;
        observeAsset: (documentId: string) => import("rxjs").Observable<import("@sanity/types/src").ImageAsset>;
        imageUrlBuilder: import("@sanity/image-url/lib/types/builder").ImageUrlBuilder;
    } & import("react").RefAttributes<unknown>>;
    file: import("react").ForwardRefExoticComponent<{
        type: import("@sanity/types/src").FileSchemaType;
        onFocus: (path: import("@sanity/types/src").Path) => void;
        onBlur: () => void;
        onChange: (event: import("../../PatchEvent").default) => void;
        readOnly: boolean;
        value?: import("../../inputs/files/FileInput").File;
        presence: import("@sanity/base/presence").FormFieldPresence[];
        focusPath: import("@sanity/types/src").Path;
        markers: import("@sanity/types/src").ValidationMarker[];
        compareValue?: import("../../inputs/files/FileInput").File;
        level: number;
        resolveUploader: import("../uploads/types").UploaderResolver;
        getValuePath: () => import("@sanity/types/src").Path;
        directUploads?: boolean;
        observeAsset: (documentId: string) => import("rxjs").Observable<import("@sanity/types/src").FileAsset>;
    } & import("react").RefAttributes<unknown>>;
    string: import("react").ForwardRefExoticComponent<import("../../inputs/types").Props<string, import("@sanity/types/src").StringSchemaType> & import("react").RefAttributes<HTMLInputElement>>;
    slug: {
        new (props: Omit<Omit<{
            type: import("@sanity/types/src").SlugSchemaType;
            level: number;
            value?: import("../../inputs/Slug/SlugInput").Slug;
            compareValue?: import("../../inputs/Slug/SlugInput").Slug;
            readOnly?: boolean;
            document: import("@sanity/types/src").SanityDocument;
            onChange: (ev: import("../../PatchEvent").default) => void;
            onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
            getValuePath: () => import("@sanity/types/src").Path;
            markers: import("@sanity/types/src").ValidationMarker[];
            presence: any;
        } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath"> | Readonly<Omit<Omit<{
            type: import("@sanity/types/src").SlugSchemaType;
            level: number;
            value?: import("../../inputs/Slug/SlugInput").Slug;
            compareValue?: import("../../inputs/Slug/SlugInput").Slug;
            readOnly?: boolean;
            document: import("@sanity/types/src").SanityDocument;
            onChange: (ev: import("../../PatchEvent").default) => void;
            onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
            getValuePath: () => import("@sanity/types/src").Path;
            markers: import("@sanity/types/src").ValidationMarker[];
            presence: any;
        } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>): {
            _input: any;
            _didShowFocusWarning: boolean;
            focus(): void;
            setRef: (input: any) => void;
            render(): JSX.Element;
            context: any;
            setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Omit<{
                type: import("@sanity/types/src").SlugSchemaType;
                level: number;
                value?: import("../../inputs/Slug/SlugInput").Slug;
                compareValue?: import("../../inputs/Slug/SlugInput").Slug;
                readOnly?: boolean;
                document: import("@sanity/types/src").SanityDocument;
                onChange: (ev: import("../../PatchEvent").default) => void;
                onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
                getValuePath: () => import("@sanity/types/src").Path;
                markers: import("@sanity/types/src").ValidationMarker[];
                presence: any;
            } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
            forceUpdate(callback?: () => void): void;
            readonly props: Readonly<Omit<Omit<{
                type: import("@sanity/types/src").SlugSchemaType;
                level: number;
                value?: import("../../inputs/Slug/SlugInput").Slug;
                compareValue?: import("../../inputs/Slug/SlugInput").Slug;
                readOnly?: boolean;
                document: import("@sanity/types/src").SanityDocument;
                onChange: (ev: import("../../PatchEvent").default) => void;
                onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
                getValuePath: () => import("@sanity/types/src").Path;
                markers: import("@sanity/types/src").ValidationMarker[];
                presence: any;
            } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">> & Readonly<{
                children?: import("react").ReactNode;
            }>;
            state: Readonly<{}>;
            refs: {
                [key: string]: import("react").ReactInstance;
            };
            componentDidMount?(): void;
            shouldComponentUpdate?(nextProps: Readonly<Omit<Omit<{
                type: import("@sanity/types/src").SlugSchemaType;
                level: number;
                value?: import("../../inputs/Slug/SlugInput").Slug;
                compareValue?: import("../../inputs/Slug/SlugInput").Slug;
                readOnly?: boolean;
                document: import("@sanity/types/src").SanityDocument;
                onChange: (ev: import("../../PatchEvent").default) => void;
                onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
                getValuePath: () => import("@sanity/types/src").Path;
                markers: import("@sanity/types/src").ValidationMarker[];
                presence: any;
            } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextState: Readonly<{}>, nextContext: any): boolean;
            componentWillUnmount?(): void;
            componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
            getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Omit<{
                type: import("@sanity/types/src").SlugSchemaType;
                level: number;
                value?: import("../../inputs/Slug/SlugInput").Slug;
                compareValue?: import("../../inputs/Slug/SlugInput").Slug;
                readOnly?: boolean;
                document: import("@sanity/types/src").SanityDocument;
                onChange: (ev: import("../../PatchEvent").default) => void;
                onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
                getValuePath: () => import("@sanity/types/src").Path;
                markers: import("@sanity/types/src").ValidationMarker[];
                presence: any;
            } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, prevState: Readonly<{}>): any;
            componentDidUpdate?(prevProps: Readonly<Omit<Omit<{
                type: import("@sanity/types/src").SlugSchemaType;
                level: number;
                value?: import("../../inputs/Slug/SlugInput").Slug;
                compareValue?: import("../../inputs/Slug/SlugInput").Slug;
                readOnly?: boolean;
                document: import("@sanity/types/src").SanityDocument;
                onChange: (ev: import("../../PatchEvent").default) => void;
                onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
                getValuePath: () => import("@sanity/types/src").Path;
                markers: import("@sanity/types/src").ValidationMarker[];
                presence: any;
            } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, prevState: Readonly<{}>, snapshot?: any): void;
            componentWillMount?(): void;
            UNSAFE_componentWillMount?(): void;
            componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<{
                type: import("@sanity/types/src").SlugSchemaType;
                level: number;
                value?: import("../../inputs/Slug/SlugInput").Slug;
                compareValue?: import("../../inputs/Slug/SlugInput").Slug;
                readOnly?: boolean;
                document: import("@sanity/types/src").SanityDocument;
                onChange: (ev: import("../../PatchEvent").default) => void;
                onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
                getValuePath: () => import("@sanity/types/src").Path;
                markers: import("@sanity/types/src").ValidationMarker[];
                presence: any;
            } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextContext: any): void;
            UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<{
                type: import("@sanity/types/src").SlugSchemaType;
                level: number;
                value?: import("../../inputs/Slug/SlugInput").Slug;
                compareValue?: import("../../inputs/Slug/SlugInput").Slug;
                readOnly?: boolean;
                document: import("@sanity/types/src").SanityDocument;
                onChange: (ev: import("../../PatchEvent").default) => void;
                onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
                getValuePath: () => import("@sanity/types/src").Path;
                markers: import("@sanity/types/src").ValidationMarker[];
                presence: any;
            } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextContext: any): void;
            componentWillUpdate?(nextProps: Readonly<Omit<Omit<{
                type: import("@sanity/types/src").SlugSchemaType;
                level: number;
                value?: import("../../inputs/Slug/SlugInput").Slug;
                compareValue?: import("../../inputs/Slug/SlugInput").Slug;
                readOnly?: boolean;
                document: import("@sanity/types/src").SanityDocument;
                onChange: (ev: import("../../PatchEvent").default) => void;
                onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
                getValuePath: () => import("@sanity/types/src").Path;
                markers: import("@sanity/types/src").ValidationMarker[];
                presence: any;
            } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextState: Readonly<{}>, nextContext: any): void;
            UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Omit<{
                type: import("@sanity/types/src").SlugSchemaType;
                level: number;
                value?: import("../../inputs/Slug/SlugInput").Slug;
                compareValue?: import("../../inputs/Slug/SlugInput").Slug;
                readOnly?: boolean;
                document: import("@sanity/types/src").SanityDocument;
                onChange: (ev: import("../../PatchEvent").default) => void;
                onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
                getValuePath: () => import("@sanity/types/src").Path;
                markers: import("@sanity/types/src").ValidationMarker[];
                presence: any;
            } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextState: Readonly<{}>, nextContext: any): void;
        };
        new (props: Omit<Omit<{
            type: import("@sanity/types/src").SlugSchemaType;
            level: number;
            value?: import("../../inputs/Slug/SlugInput").Slug;
            compareValue?: import("../../inputs/Slug/SlugInput").Slug;
            readOnly?: boolean;
            document: import("@sanity/types/src").SanityDocument;
            onChange: (ev: import("../../PatchEvent").default) => void;
            onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
            getValuePath: () => import("@sanity/types/src").Path;
            markers: import("@sanity/types/src").ValidationMarker[];
            presence: any;
        } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">, context: any): {
            _input: any;
            _didShowFocusWarning: boolean;
            focus(): void;
            setRef: (input: any) => void;
            render(): JSX.Element;
            context: any;
            setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Omit<{
                type: import("@sanity/types/src").SlugSchemaType;
                level: number;
                value?: import("../../inputs/Slug/SlugInput").Slug;
                compareValue?: import("../../inputs/Slug/SlugInput").Slug;
                readOnly?: boolean;
                document: import("@sanity/types/src").SanityDocument;
                onChange: (ev: import("../../PatchEvent").default) => void;
                onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
                getValuePath: () => import("@sanity/types/src").Path;
                markers: import("@sanity/types/src").ValidationMarker[];
                presence: any;
            } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
            forceUpdate(callback?: () => void): void;
            readonly props: Readonly<Omit<Omit<{
                type: import("@sanity/types/src").SlugSchemaType;
                level: number;
                value?: import("../../inputs/Slug/SlugInput").Slug;
                compareValue?: import("../../inputs/Slug/SlugInput").Slug;
                readOnly?: boolean;
                document: import("@sanity/types/src").SanityDocument;
                onChange: (ev: import("../../PatchEvent").default) => void;
                onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
                getValuePath: () => import("@sanity/types/src").Path;
                markers: import("@sanity/types/src").ValidationMarker[];
                presence: any;
            } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">> & Readonly<{
                children?: import("react").ReactNode;
            }>;
            state: Readonly<{}>;
            refs: {
                [key: string]: import("react").ReactInstance;
            };
            componentDidMount?(): void;
            shouldComponentUpdate?(nextProps: Readonly<Omit<Omit<{
                type: import("@sanity/types/src").SlugSchemaType;
                level: number;
                value?: import("../../inputs/Slug/SlugInput").Slug;
                compareValue?: import("../../inputs/Slug/SlugInput").Slug;
                readOnly?: boolean;
                document: import("@sanity/types/src").SanityDocument;
                onChange: (ev: import("../../PatchEvent").default) => void;
                onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
                getValuePath: () => import("@sanity/types/src").Path;
                markers: import("@sanity/types/src").ValidationMarker[];
                presence: any;
            } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextState: Readonly<{}>, nextContext: any): boolean;
            componentWillUnmount?(): void;
            componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
            getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Omit<{
                type: import("@sanity/types/src").SlugSchemaType;
                level: number;
                value?: import("../../inputs/Slug/SlugInput").Slug;
                compareValue?: import("../../inputs/Slug/SlugInput").Slug;
                readOnly?: boolean;
                document: import("@sanity/types/src").SanityDocument;
                onChange: (ev: import("../../PatchEvent").default) => void;
                onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
                getValuePath: () => import("@sanity/types/src").Path;
                markers: import("@sanity/types/src").ValidationMarker[];
                presence: any;
            } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, prevState: Readonly<{}>): any;
            componentDidUpdate?(prevProps: Readonly<Omit<Omit<{
                type: import("@sanity/types/src").SlugSchemaType;
                level: number;
                value?: import("../../inputs/Slug/SlugInput").Slug;
                compareValue?: import("../../inputs/Slug/SlugInput").Slug;
                readOnly?: boolean;
                document: import("@sanity/types/src").SanityDocument;
                onChange: (ev: import("../../PatchEvent").default) => void;
                onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
                getValuePath: () => import("@sanity/types/src").Path;
                markers: import("@sanity/types/src").ValidationMarker[];
                presence: any;
            } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, prevState: Readonly<{}>, snapshot?: any): void;
            componentWillMount?(): void;
            UNSAFE_componentWillMount?(): void;
            componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<{
                type: import("@sanity/types/src").SlugSchemaType;
                level: number;
                value?: import("../../inputs/Slug/SlugInput").Slug;
                compareValue?: import("../../inputs/Slug/SlugInput").Slug;
                readOnly?: boolean;
                document: import("@sanity/types/src").SanityDocument;
                onChange: (ev: import("../../PatchEvent").default) => void;
                onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
                getValuePath: () => import("@sanity/types/src").Path;
                markers: import("@sanity/types/src").ValidationMarker[];
                presence: any;
            } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextContext: any): void;
            UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<{
                type: import("@sanity/types/src").SlugSchemaType;
                level: number;
                value?: import("../../inputs/Slug/SlugInput").Slug;
                compareValue?: import("../../inputs/Slug/SlugInput").Slug;
                readOnly?: boolean;
                document: import("@sanity/types/src").SanityDocument;
                onChange: (ev: import("../../PatchEvent").default) => void;
                onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
                getValuePath: () => import("@sanity/types/src").Path;
                markers: import("@sanity/types/src").ValidationMarker[];
                presence: any;
            } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextContext: any): void;
            componentWillUpdate?(nextProps: Readonly<Omit<Omit<{
                type: import("@sanity/types/src").SlugSchemaType;
                level: number;
                value?: import("../../inputs/Slug/SlugInput").Slug;
                compareValue?: import("../../inputs/Slug/SlugInput").Slug;
                readOnly?: boolean;
                document: import("@sanity/types/src").SanityDocument;
                onChange: (ev: import("../../PatchEvent").default) => void;
                onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
                getValuePath: () => import("@sanity/types/src").Path;
                markers: import("@sanity/types/src").ValidationMarker[];
                presence: any;
            } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextState: Readonly<{}>, nextContext: any): void;
            UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Omit<{
                type: import("@sanity/types/src").SlugSchemaType;
                level: number;
                value?: import("../../inputs/Slug/SlugInput").Slug;
                compareValue?: import("../../inputs/Slug/SlugInput").Slug;
                readOnly?: boolean;
                document: import("@sanity/types/src").SanityDocument;
                onChange: (ev: import("../../PatchEvent").default) => void;
                onFocus: (pathOrEvent?: import("@sanity/types/src").Path | import("react").FocusEvent<any, Element>) => void;
                getValuePath: () => import("@sanity/types/src").Path;
                markers: import("@sanity/types/src").ValidationMarker[];
                presence: any;
            } & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextState: Readonly<{}>, nextContext: any): void;
        };
        displayName: string;
        contextTypes: {
            getValuePath: import("prop-types").Requireable<any>;
        };
        contextType?: import("react").Context<any>;
    };
};
export default _default;
//# sourceMappingURL=defaultInputs.d.ts.map