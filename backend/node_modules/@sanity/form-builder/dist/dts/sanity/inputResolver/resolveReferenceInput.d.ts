/// <reference types="react" />
export default function resolveReferenceInput(type: any): {
    new (props: Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath"> | Readonly<Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>): {
        _input: any;
        _didShowFocusWarning: boolean;
        focus(): void;
        setRef: (input: any) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">, context: any): {
        _input: any;
        _didShowFocusWarning: boolean;
        focus(): void;
        setRef: (input: any) => void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>) => {} | Pick<{}, K>) | Pick<{}, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Omit<Omit<import("../inputs/reference/SanityReferenceInput").Props & import("react").RefAttributes<HTMLInputElement>, "document">, "getValuePath">>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    contextTypes: {
        getValuePath: import("prop-types").Requireable<any>;
    };
    contextType?: import("react").Context<any>;
};
//# sourceMappingURL=resolveReferenceInput.d.ts.map