"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.isValidDatasetName = isValidDatasetName;
exports.isValidTokenId = isValidTokenId;

var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

var _createValidationResult = require("../createValidationResult");

var _getDupes = require("../utils/getDupes");

var _validateExperimentalSearch = require("../utils/validateExperimentalSearch");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function normalizeToProp(typeDef) {
  if (Array.isArray(typeDef.to)) {
    return typeDef.to;
  }

  return typeDef.to ? [typeDef.to] : typeDef.to;
}

var VALID_DATASET = /^[a-z0-9~][-_a-z0-9]+$/;

function isValidDatasetName(name) {
  var isValid = name.length >= 2 && name.toLowerCase() === name && VALID_DATASET.test(name);
  return isValid || "The provided dataset \"".concat(name, "\" doesn't look like a valid dataset. Dataset names must be more than 2 characters, can only contain lowercase characters, numbers, underscores and dashes and can not start with a dash or an underscore");
}

var VALID_TOKEN_ID = /^[a-zA-Z0-9_][a-zA-Z0-9_-]+$/;

function isValidTokenId(tokenId) {
  var isValid = tokenId.length >= 2 && VALID_TOKEN_ID.test(tokenId);
  return isValid || "The provided tokenId \"".concat(tokenId, "\" is invalid. The tokenId must be a string made up of at least 2 characters in the a-zA-Z0-9_- range and cannot start with a - (dash) character");
}

var _default = (typeDef, visitorContext) => {
  var isValidTo = Array.isArray(typeDef.to) || (0, _isPlainObject2.default)(typeDef.to);
  var normalizedTo = normalizeToProp(typeDef);
  var problems = (0, _flatten2.default)([isValidTo ? (0, _getDupes.getDupes)(normalizedTo, t => "".concat(t.name, ";").concat(t.type)).map(dupes => (0, _createValidationResult.error)("Found ".concat(dupes.length, " members with same type, but not unique names \"").concat(dupes[0].type, "\" in reference. This makes it impossible to tell their values apart and you should consider naming them"), _createValidationResult.HELP_IDS.CROSS_DATASET_REFERENCE_INVALID)) : (0, _createValidationResult.error)('The cross dataset reference type is missing or having an invalid value for the required "to" property. It should be an array of accepted types.', _createValidationResult.HELP_IDS.CROSS_DATASET_REFERENCE_INVALID)]);

  if (isValidTo && normalizedTo.length === 0) {
    problems.push((0, _createValidationResult.error)('The cross dataset reference type should define at least one referenced type. Please check the "to" property.', _createValidationResult.HELP_IDS.CROSS_DATASET_REFERENCE_INVALID));
  }

  normalizedTo.forEach((crossDatasetTypeDef, index) => {
    if (!crossDatasetTypeDef.type) {
      problems.push((0, _createValidationResult.error)("The referenced type at index ".concat(index, " must be named. Specify the name of the type you want to create references to."), _createValidationResult.HELP_IDS.CROSS_DATASET_REFERENCE_INVALID));
    }

    if (!(0, _isPlainObject2.default)(crossDatasetTypeDef.preview)) {
      problems.push((0, _createValidationResult.error)("Missing required preview config for the referenced type \"".concat(crossDatasetTypeDef.type || '<unknown type>', "\""), _createValidationResult.HELP_IDS.CROSS_DATASET_REFERENCE_INVALID));
    }

    (0, _validateExperimentalSearch.validateExperimentalSearch)(crossDatasetTypeDef.__experimental_search).forEach(err => {
      problems.push((0, _createValidationResult.error)("Invalid \"__experimental_search\" config for referenced type \"".concat(crossDatasetTypeDef.type || '<unknown type>', "\": ").concat(err), _createValidationResult.HELP_IDS.CROSS_DATASET_REFERENCE_INVALID));
    });
  });

  if (typeof typeDef.tokenId === 'string') {
    var validationResult = isValidTokenId(typeDef.tokenId);

    if (validationResult !== true) {
      problems.push((0, _createValidationResult.error)(validationResult, _createValidationResult.HELP_IDS.CROSS_DATASET_REFERENCE_INVALID));
    }
  }

  if (typeof typeDef.projectId !== 'string') {
    problems.push((0, _createValidationResult.error)('A cross dataset reference must specify a `projectId`', _createValidationResult.HELP_IDS.CROSS_DATASET_REFERENCE_INVALID));
  }

  if (typeof typeDef.dataset === 'string') {
    var datasetValidation = isValidDatasetName(typeDef.dataset);

    if (datasetValidation !== true) {
      problems.push((0, _createValidationResult.error)(datasetValidation, _createValidationResult.HELP_IDS.CROSS_DATASET_REFERENCE_INVALID));
    }
  } else {
    problems.push((0, _createValidationResult.error)('A cross dataset reference must specify a `dataset`', _createValidationResult.HELP_IDS.CROSS_DATASET_REFERENCE_INVALID));
  }

  if (typeDef.studioUrl && typeof typeDef.studioUrl !== 'function') {
    problems.push((0, _createValidationResult.error)('The "studioUrl" property on a cross dataset reference must be a function taking "{id, type}" as argument and returning a studio url.', _createValidationResult.HELP_IDS.CROSS_DATASET_REFERENCE_INVALID));
  }

  problems.push(...getOptionErrors(typeDef));
  return _objectSpread(_objectSpread({}, typeDef), {}, {
    _problems: problems
  });
};

exports.default = _default;

function getOptionErrors(typeDef) {
  var options = typeDef.options;
  var problems = [];
  problems.push(...['filter', 'filterParams'].filter(key => key in typeDef).map(key => (0, _createValidationResult.error)("`".concat(key, "` is not allowed on a reference type definition - did you mean `options.").concat(key, "`?"), _createValidationResult.HELP_IDS.REFERENCE_INVALID_OPTIONS_LOCATION)));

  if (!options) {
    return problems;
  }

  if (!(0, _isPlainObject2.default)(options)) {
    return problems.concat((0, _createValidationResult.error)('The reference type expects `options` to be an object', _createValidationResult.HELP_IDS.REFERENCE_INVALID_OPTIONS));
  }

  if (typeof options.filter === 'function' && typeof options.filterParams !== 'undefined') {
    return problems.concat((0, _createValidationResult.error)('`filterParams` cannot be used if `filter` is a function. Either statically define `filter` as a string, or return `params` from the `filter`-function.', _createValidationResult.HELP_IDS.REFERENCE_INVALID_FILTER_PARAMS_COMBINATION));
  }

  if (typeof options.filter === 'function' || !options.filter && !options.filterParams) {
    return problems;
  }

  if (typeof options.filter !== 'string') {
    return problems.concat((0, _createValidationResult.error)("If set, `filter` must be a string. Got ".concat(typeof options.filter)));
  }

  if (typeof options.filterParams !== 'undefined' && !(0, _isPlainObject2.default)(options.filterParams)) {
    return problems.concat((0, _createValidationResult.error)("If set, `filterParams` must be an object."));
  }

  if (options.filterParams) {
    return problems.concat(Object.keys(options.filterParams).filter(key => key.startsWith('__') || key.startsWith('$')).map(key => (0, _createValidationResult.error)("Filter parameter cannot be prefixed with \"$\" or \"__\". Got ".concat(key, "\"."))));
  }

  return problems;
}