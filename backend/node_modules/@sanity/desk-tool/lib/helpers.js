"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIntentRouteParams = getIntentRouteParams;
exports.getWaitMessages = getWaitMessages;
exports.isSaveHotkey = void 0;
exports.legacyEditParamsToPath = legacyEditParamsToPath;
exports.legacyEditParamsToState = legacyEditParamsToState;
exports.toPath = toPath;
exports.toState = toState;

var _isHotkey = _interopRequireDefault(require("is-hotkey"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _parsePanesSegment = require("./utils/parsePanesSegment");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @internal
 */
var isSaveHotkey = (0, _isHotkey.default)('mod+s');
exports.isSaveHotkey = isSaveHotkey;

/**
 * @internal
 */
function getIntentRouteParams(_ref) {
  var id = _ref.id,
      type = _ref.type,
      payloadParams = _ref.payloadParams,
      templateName = _ref.templateName;
  return {
    intent: 'edit',
    params: _objectSpread(_objectSpread({
      id
    }, type ? {
      type
    } : {}), templateName ? {
      template: templateName
    } : {}),
    payload: Object.keys(payloadParams || {}).length > 0 ? payloadParams : undefined
  };
}
/**
 * @internal
 */


function getWaitMessages(path) {
  var thresholds = [{
    ms: 300,
    message: 'Loading…'
  }, {
    ms: 5000,
    message: 'Still loading…'
  }];

  if (__DEV__) {
    var message = ['Check console for errors?', 'Is your observable/promise resolving?', path.length > 0 ? "Structure path: ".concat(path.join(' ➝ ')) : ''];
    thresholds.push({
      ms: 10000,
      message: message.join('\n')
    });
  }

  var src = (0, _rxjs.of)(null);
  return (0, _rxjs.merge)(...thresholds.map(_ref2 => {
    var ms = _ref2.ms,
        message = _ref2.message;
    return src.pipe((0, _operators.mapTo)(message), (0, _operators.delay)(ms));
  }));
}
/**
 * @internal
 */


function toState(pathSegment) {
  return (0, _parsePanesSegment.parsePanesSegment)(decodeURIComponent(pathSegment));
}
/**
 * @internal
 */


function toPath(panes) {
  return (0, _parsePanesSegment.encodePanesSegment)(panes);
}
/**
 * @internal
 */


function legacyEditParamsToState(params) {
  try {
    return JSON.parse(decodeURIComponent(params));
  } catch (err) {
    // eslint-disable-next-line no-console
    console.warn('Failed to parse JSON parameters');
    return {};
  }
}
/**
 * @internal
 */


function legacyEditParamsToPath(params) {
  return JSON.stringify(params);
}