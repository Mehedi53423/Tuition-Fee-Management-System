"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadStructure = void 0;

var _leven = _interopRequireDefault(require("leven"));

var _defaultStructure = require("../defaultStructure");

var _isRecord = require("./isRecord");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var KNOWN_STRUCTURE_EXPORTS = ['getDefaultDocumentNode'];

function isStructure(structure) {
  if (typeof structure === 'function') return true;
  if (!(0, _isRecord.isRecord)(structure)) return false;
  return typeof structure.serialize !== 'function' || typeof structure.then !== 'function' || typeof structure.subscribe !== 'function' || typeof structure.type !== 'string';
}

var loadStructure = () => {
  var mod = require('part:@sanity/desk-tool/structure?') || _defaultStructure.defaultStructure;

  var structure = mod && mod.__esModule ? mod.default : mod;
  warnOnUnknownExports(mod);

  if (!isStructure(structure)) {
    throw new Error("Structure needs to export a function, an observable, a promise or a structure builder, got ".concat(typeof structure));
  }

  return structure;
};

exports.loadStructure = loadStructure;

function warnOnUnknownExports(mod) {
  if (!mod) return;
  var known = [...KNOWN_STRUCTURE_EXPORTS, 'default'];
  var unknownKeys = Object.keys(mod).filter(key => !known.includes(key));

  var _iterator = _createForOfIteratorHelper(unknownKeys),
      _step;

  try {
    var _loop = function _loop() {
      var key = _step.value;

      var _known$reduce = known.reduce((acc, current) => {
        var distance = (0, _leven.default)(current, key);
        return distance < 3 && distance < acc.distance ? {
          closest: current,
          distance
        } : acc;
      }, {
        closest: null,
        distance: +Infinity
      }),
          closest = _known$reduce.closest;

      var hint = closest ? " - did you mean \"".concat(closest, "\"") : ''; // eslint-disable-next-line

      console.warn("Unknown structure export \"".concat(key, "\"").concat(hint));
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}