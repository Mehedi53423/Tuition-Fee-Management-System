"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useResolvedPanes = useResolvedPanes;

var _router = require("@sanity/base/router");

var _react = require("react");

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _constants = require("../constants");

var _createResolvedPaneNodeStream = require("./createResolvedPaneNodeStream");

var _loadStructure = require("./loadStructure");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function useResolvedPanes() {
  var router = (0, _react.useContext)(_router.RouterContext);

  var _useState = (0, _react.useState)({
    paneDataItems: [],
    resolvedPanes: [],
    routerPanes: []
  }),
      _useState2 = _slicedToArray(_useState, 2),
      data = _useState2[0],
      setData = _useState2[1]; // used to propagate errors from async effect. throwing inside of the render
  // will bubble the error to react where it can be picked up by standard error
  // boundaries


  var _useState3 = (0, _react.useState)(),
      _useState4 = _slicedToArray(_useState3, 2),
      error = _useState4[0],
      setError = _useState4[1];

  if (error) throw error;
  (0, _react.useEffect)(() => {
    var routerPanes$ = new _rxjs.Observable(observer => {
      // emit state initial flow
      observer.next(router.getState());
      var unsubscribe = router.channel.subscribe(() => observer.next(router.getState()));
      return unsubscribe;
    }).pipe((0, _operators.map)(routerState => (routerState === null || routerState === void 0 ? void 0 : routerState.panes) || []));
    var resolvedPanes$ = (0, _createResolvedPaneNodeStream.createResolvedPaneNodeStream)({
      rootPaneNode: (0, _loadStructure.loadStructure)(),
      routerPanesStream: routerPanes$
    }).pipe((0, _operators.map)(resolvedPanes => {
      var routerPanes = resolvedPanes.reduce((acc, next) => {
        var currentGroup = acc[next.groupIndex] || [];
        currentGroup[next.siblingIndex] = next.routerPaneSibling;
        acc[next.groupIndex] = currentGroup;
        return acc;
      }, []);
      var groupsLen = routerPanes.length;
      var paneDataItems = resolvedPanes.map(pane => {
        var _nextGroup$0$id;

        var groupIndex = pane.groupIndex,
            flatIndex = pane.flatIndex,
            siblingIndex = pane.siblingIndex,
            routerPaneSibling = pane.routerPaneSibling,
            path = pane.path;
        var itemId = routerPaneSibling.id;
        var nextGroup = routerPanes[groupIndex + 1];
        var paneDataItem = {
          active: groupIndex === groupsLen - 2,
          childItemId: (_nextGroup$0$id = nextGroup === null || nextGroup === void 0 ? void 0 : nextGroup[0].id) !== null && _nextGroup$0$id !== void 0 ? _nextGroup$0$id : null,
          index: flatIndex,
          itemId: routerPaneSibling.id,
          groupIndex,
          key: "".concat(pane.type === 'loading' ? 'unknown' : pane.paneNode.id, "-").concat(itemId, "-").concat(siblingIndex),
          pane: pane.type === 'loading' ? _constants.LOADING_PANE : pane.paneNode,
          params: routerPaneSibling.params || {},
          path: path.join(';'),
          payload: routerPaneSibling.payload,
          selected: flatIndex === resolvedPanes.length - 1,
          siblingIndex
        };
        return paneDataItem;
      });
      return {
        paneDataItems,
        routerPanes,
        resolvedPanes: paneDataItems.map(pane => pane.pane)
      };
    }));
    var subscription = resolvedPanes$.subscribe({
      next: result => setData(result),
      error: e => setError(e)
    });
    return () => subscription.unsubscribe();
  }, [router]);
  return data;
}