"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encodePanesSegment = encodePanesSegment;
exports.parseOldPanesSegment = parseOldPanesSegment;
exports.parsePanesSegment = parsePanesSegment;

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// old: authors;knut,{"template":"diaryEntry"}
// new: authors;knut,view=diff,eyJyZXYxIjoiYWJjMTIzIiwicmV2MiI6ImRlZjQ1NiJ9|latest-posts
var panePattern = /^([.a-z0-9_-]+),?({.*?})?(?:(;|$))/i;

var isParam = str => /^[a-z0-9]+=[^=]+/i.test(str);

var isPayload = str => /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(str);

var exclusiveParams = ['view', 'since', 'rev'];
var isTruthy = Boolean;

function parseChunks(chunks, initial) {
  return chunks.reduce((pane, chunk) => {
    if (isParam(chunk)) {
      var key = chunk.slice(0, chunk.indexOf('='));
      var value = chunk.slice(key.length + 1);
      pane.params = _objectSpread(_objectSpread({}, pane.params), {}, {
        [decodeURIComponent(key)]: decodeURIComponent(value)
      });
    } else if (isPayload(chunk)) {
      pane.payload = tryParseBase64Payload(chunk);
    } else {
      // eslint-disable-next-line no-console
      console.warn('Unknown pane segment: %s - skipping', chunk);
    }

    return pane;
  }, _objectSpread(_objectSpread({}, initial), {}, {
    params: _constants.EMPTY_PARAMS,
    payload: undefined
  }));
}

function encodeChunks(pane, index, group) {
  var payload = pane.payload,
      _pane$params = pane.params,
      params = _pane$params === void 0 ? {} : _pane$params,
      id = pane.id;

  var _group = _slicedToArray(group, 1),
      firstSibling = _group[0];

  var paneIsFirstSibling = pane === firstSibling;
  var sameAsFirst = index !== 0 && id === firstSibling.id;
  var encodedPayload = typeof payload === 'undefined' ? undefined : btoa(JSON.stringify(payload));
  var encodedParams = Object.entries(params).filter(entry => {
    var _firstSibling$params;

    var _entry = _slicedToArray(entry, 2),
        key = _entry[0],
        value = _entry[1];

    if (!value) return false;
    if (paneIsFirstSibling) return true; // omit the value if it's the same as the value from the first sibling

    var valueFromFirstSibling = (_firstSibling$params = firstSibling.params) === null || _firstSibling$params === void 0 ? void 0 : _firstSibling$params[key];
    if (value === valueFromFirstSibling && !exclusiveParams.includes(key)) return false;
    return true;
  }).map(_ref => {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];

    return "".concat(encodeURIComponent(key), "=").concat(encodeURIComponent(value));
  });
  return [sameAsFirst ? '' : id].concat([encodedParams.length > 0 && encodedParams, encodedPayload].filter(isTruthy).flat()).join(',') || ',';
}

function parsePanesSegment(str) {
  if (str.indexOf(',{') !== -1) {
    return parseOldPanesSegment(str);
  }

  return str.split(';').map(group => {
    var _group$split$map = group.split('|').map(segment => {
      var _segment$split = segment.split(','),
          _segment$split2 = _toArray(_segment$split),
          id = _segment$split2[0],
          chunks = _segment$split2.slice(1);

      return parseChunks(chunks, {
        id
      });
    }),
        _group$split$map2 = _toArray(_group$split$map),
        firstSibling = _group$split$map2[0],
        restOfSiblings = _group$split$map2.slice(1);

    return [firstSibling, ...restOfSiblings.map(sibling => _objectSpread(_objectSpread(_objectSpread({}, firstSibling), sibling), {}, {
      id: sibling.id || firstSibling.id,
      params: _objectSpread(_objectSpread({}, (0, _omit2.default)(firstSibling.params, exclusiveParams)), sibling.params),
      payload: sibling.payload || firstSibling.payload
    }))];
  }).filter(group => group.length > 0);
}

function encodePanesSegment(panes) {
  return (panes || []).map(group => group.map(encodeChunks).join('|')).map(encodeURIComponent).join(';');
}

function parseOldPanesSegment(str) {
  var chunks = [];
  var buffer = str;

  while (buffer.length) {
    var _ref3 = buffer.match(panePattern) || [],
        _ref4 = _slicedToArray(_ref3, 3),
        match = _ref4[0],
        id = _ref4[1],
        payloadChunk = _ref4[2];

    if (!match) {
      buffer = buffer.slice(1);
      continue;
    }

    var payload = payloadChunk && tryParsePayload(payloadChunk);
    chunks.push({
      id,
      payload
    });
    buffer = buffer.slice(match.length);
  }

  return [chunks];
}

function tryParsePayload(json) {
  try {
    return JSON.parse(json);
  } catch (err) {
    // eslint-disable-next-line no-console
    console.warn("Failed to parse parameters: ".concat(err.message));
    return undefined;
  }
}

function tryParseBase64Payload(data) {
  return data ? tryParsePayload(atob(data)) : undefined;
}