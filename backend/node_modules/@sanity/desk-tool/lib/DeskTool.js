"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeskTool = void 0;

var _initialValueTemplates = require("@sanity/base/initial-value-templates");

var _router = require("@sanity/base/router");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _pane = require("./components/pane");

var _constants = require("./constants");

var _deskTool = require("./contexts/deskTool");

var _useResolvedPanes2 = require("./utils/useResolvedPanes");

var _helpers = require("./helpers");

var _panes = require("./panes");

var _excluded = ["template"];

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var StyledPaneLayout = (0, _styledComponents.default)(_pane.PaneLayout)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  min-height: 100%;\n  min-width: 320px;\n"])));
/**
 * @internal
 */

var DeskTool = /*#__PURE__*/(0, _react.memo)(_ref => {
  var onPaneChange = _ref.onPaneChange;

  var _useToast = (0, _ui.useToast)(),
      pushToast = _useToast.push;

  var _useRouter = (0, _router.useRouter)(),
      navigate = _useRouter.navigate,
      getState = _useRouter.getState;

  var _useResolvedPanes = (0, _useResolvedPanes2.useResolvedPanes)(),
      paneDataItems = _useResolvedPanes.paneDataItems,
      resolvedPanes = _useResolvedPanes.resolvedPanes,
      routerPanes = _useResolvedPanes.routerPanes;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      layoutCollapsed = _useState2[0],
      setLayoutCollapsed = _useState2[1];

  var _useState3 = (0, _react.useState)(null),
      _useState4 = _slicedToArray(_useState3, 2),
      portalElement = _useState4[0],
      setPortalElement = _useState4[1];

  var handleRootCollapse = (0, _react.useCallback)(() => setLayoutCollapsed(true), []);
  var handleRootExpand = (0, _react.useCallback)(() => setLayoutCollapsed(false), []);
  (0, _react.useEffect)(() => {
    // we check for length before emitting here to skip the initial empty array
    // state from the `useResolvedPanes` hook. there should always be a root
    // pane emitted on subsequent emissions
    if (resolvedPanes.length) {
      onPaneChange(resolvedPanes);
    }
  }, [onPaneChange, resolvedPanes]); // The pane layout is "collapsed" on small screens, and only shows 1 pane at a time.
  // Remove pane siblings (i.e. split panes) as the pane layout collapses.

  (0, _react.useEffect)(() => {
    if (!layoutCollapsed) return;
    var hasSiblings = routerPanes === null || routerPanes === void 0 ? void 0 : routerPanes.some(group => group.length > 1);
    if (!hasSiblings) return;
    var withoutSiblings = routerPanes === null || routerPanes === void 0 ? void 0 : routerPanes.map(group => [group[0]]);
    navigate({
      panes: withoutSiblings
    }, {
      replace: true
    });
  }, [navigate, layoutCollapsed, routerPanes]); // Handle old-style URLs

  var shouldRewrite = (0, _router.useRouterState)((0, _react.useCallback)(routerState => {
    var _ref2 = routerState || {},
        action = _ref2.action,
        legacyEditDocumentId = _ref2.legacyEditDocumentId,
        schemaType = _ref2.type,
        editDocumentId = _ref2.editDocumentId,
        _ref2$params = _ref2.params,
        params = _ref2$params === void 0 ? {} : _ref2$params;

    var templateName = params.template;
    var template = (0, _initialValueTemplates.getTemplateById)(templateName);
    var type = template && template.schemaType || schemaType;
    return action === 'edit' && legacyEditDocumentId || type && editDocumentId;
  }, []));
  (0, _react.useEffect)(() => {
    if (!shouldRewrite) return;

    var _ref3 = getState() || {},
        legacyEditDocumentId = _ref3.legacyEditDocumentId,
        schemaType = _ref3.type,
        editDocumentId = _ref3.editDocumentId,
        _ref3$params = _ref3.params,
        params = _ref3$params === void 0 ? {} : _ref3$params;

    var templateName = params.template,
        payloadParams = _objectWithoutProperties(params, _excluded);

    var template = (0, _initialValueTemplates.getTemplateById)(templateName);
    var type = template && template.schemaType || schemaType;
    navigate((0, _helpers.getIntentRouteParams)({
      id: editDocumentId || legacyEditDocumentId,
      type,
      payloadParams,
      templateName
    }), {
      replace: true
    });
  }, [getState, navigate, shouldRewrite]);
  (0, _react.useEffect)(() => {
    var handleGlobalKeyDown = event => {
      // Prevent `Cmd+S`
      if ((0, _helpers.isSaveHotkey)(event)) {
        event.preventDefault();
        pushToast({
          closable: true,
          id: 'auto-save-message',
          status: 'info',
          title: 'Sanity auto-saves your work!',
          duration: 4000
        });
      }
    };

    window.addEventListener('keydown', handleGlobalKeyDown);
    return () => window.removeEventListener('keydown', handleGlobalKeyDown);
  }, [pushToast]);
  return /*#__PURE__*/_react.default.createElement(_deskTool.DeskToolProvider, {
    layoutCollapsed: layoutCollapsed
  }, /*#__PURE__*/_react.default.createElement(_ui.PortalProvider, {
    element: portalElement || null
  }, /*#__PURE__*/_react.default.createElement(StyledPaneLayout, {
    flex: 1,
    height: layoutCollapsed ? undefined : 'fill',
    minWidth: 512,
    onCollapse: handleRootCollapse,
    onExpand: handleRootExpand
  }, paneDataItems.map(_ref4 => {
    var active = _ref4.active,
        childItemId = _ref4.childItemId,
        groupIndex = _ref4.groupIndex,
        itemId = _ref4.itemId,
        paneKey = _ref4.key,
        pane = _ref4.pane,
        paneIndex = _ref4.index,
        paneParams = _ref4.params,
        path = _ref4.path,
        payload = _ref4.payload,
        siblingIndex = _ref4.siblingIndex,
        selected = _ref4.selected;
    return /*#__PURE__*/_react.default.createElement(_react.Fragment, {
      key: "".concat(pane === _constants.LOADING_PANE ? 'loading' : pane.type, "-").concat(paneIndex)
    }, pane === _constants.LOADING_PANE ? /*#__PURE__*/_react.default.createElement(_panes.LoadingPane, {
      paneKey: paneKey,
      path: path,
      message: _helpers.getWaitMessages,
      selected: selected
    }) : /*#__PURE__*/_react.default.createElement(_panes.DeskToolPane, {
      active: active,
      groupIndex: groupIndex,
      index: paneIndex,
      pane: pane,
      childItemId: childItemId,
      itemId: itemId,
      paneKey: paneKey,
      params: paneParams,
      payload: payload,
      selected: selected,
      siblingIndex: siblingIndex
    }));
  })), /*#__PURE__*/_react.default.createElement("div", {
    "data-portal": "",
    ref: setPortalElement
  })));
});
exports.DeskTool = DeskTool;
DeskTool.displayName = 'DeskTool';