"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDocumentList = useDocumentList;

var _queryContainer = require("part:@sanity/base/query-container");

var _react = require("react");

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _helpers = require("./helpers");

var _constants = require("./constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * @internal
 */
function useDocumentList(opts) {
  var _result$result;

  var defaultOrdering = opts.defaultOrdering,
      filter = opts.filter,
      params = opts.params,
      sortOrder = opts.sortOrder,
      apiVersion = opts.apiVersion;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      fullList = _useState2[0],
      setFullList = _useState2[1];

  var fullListRef = (0, _react.useRef)(fullList);

  var _useState3 = (0, _react.useState)(null),
      _useState4 = _slicedToArray(_useState3, 2),
      result = _useState4[0],
      setResult = _useState4[1];

  var error = (result === null || result === void 0 ? void 0 : result.error) || null;
  var isLoading = (result === null || result === void 0 ? void 0 : result.loading) || result === null;
  var onRetry = result === null || result === void 0 ? void 0 : result.onRetry;
  var documents = result === null || result === void 0 ? void 0 : (_result$result = result.result) === null || _result$result === void 0 ? void 0 : _result$result.documents;
  var items = (0, _react.useMemo)(() => documents ? (0, _helpers.removePublishedWithDrafts)(documents) : null, [documents]);
  var query = (0, _react.useMemo)(() => {
    var extendedProjection = sortOrder === null || sortOrder === void 0 ? void 0 : sortOrder.extendedProjection;
    var projectionFields = ['_id', '_type'];
    var finalProjection = projectionFields.join(',');
    var sortBy = (sortOrder === null || sortOrder === void 0 ? void 0 : sortOrder.by) || defaultOrdering || [];
    var limit = fullList ? _constants.FULL_LIST_LIMIT : _constants.PARTIAL_PAGE_LIMIT;
    var sort = sortBy.length > 0 ? sortBy : _constants.DEFAULT_ORDERING.by;
    var order = (0, _helpers.toOrderClause)(sort);

    if (extendedProjection) {
      var firstProjection = projectionFields.concat(extendedProjection).join(',');
      return ["*[".concat(filter, "] {").concat(firstProjection, "}"), "order(".concat(order, ") [0...").concat(limit, "]"), "{".concat(finalProjection, "}")].join('|');
    }

    return "*[".concat(filter, "]|order(").concat(order, ")[0...").concat(limit, "]{").concat(finalProjection, "}");
  }, [defaultOrdering, filter, fullList, sortOrder]);
  var handleListChange = (0, _react.useCallback)(_ref => {
    var toIndex = _ref.toIndex;

    if (isLoading || fullListRef.current) {
      return;
    }

    if (toIndex >= _constants.PARTIAL_PAGE_LIMIT / 2) {
      setFullList(true); // Prevent change handler from firing again before setState kicks in

      fullListRef.current = true;
    }
  }, [isLoading]); // Set up the document list listener

  (0, _react.useEffect)(() => {
    // @todo: explain what this does
    var filterFn = fullList ? queryResult => Boolean(queryResult.result) : () => true; // Set loading state

    setResult(r => r ? _objectSpread(_objectSpread({}, r), {}, {
      loading: true
    }) : null);
    var queryResults$ = (0, _queryContainer.getQueryResults)((0, _rxjs.of)({
      query,
      params
    }), {
      tag: 'desk.document-list',
      apiVersion
    }).pipe((0, _operators.filter)(filterFn));
    var sub = queryResults$.subscribe(setResult);
    return () => sub.unsubscribe();
  }, [fullList, query, params, apiVersion]); // If `filter` or `params` changed, set up a new query from scratch.
  // If `sortOrder` changed, set up a new query from scratch as well.

  (0, _react.useEffect)(() => {
    setResult(null);
    setFullList(false);
    fullListRef.current = false;
  }, [filter, params, sortOrder, apiVersion]);
  return {
    error,
    fullList,
    handleListChange,
    isLoading,
    items,
    onRetry
  };
}