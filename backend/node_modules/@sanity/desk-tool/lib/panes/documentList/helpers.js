"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyOrderingFunctions = applyOrderingFunctions;
exports.fieldExtendsType = fieldExtendsType;
exports.getDocumentKey = getDocumentKey;
exports.getTypeNameFromSingleTypeFilter = getTypeNameFromSingleTypeFilter;
exports.isSimpleTypeFilter = isSimpleTypeFilter;
exports.removePublishedWithDrafts = removePublishedWithDrafts;
exports.toOrderClause = toOrderClause;

var PathUtils = _interopRequireWildcard(require("@sanity/util/paths"));

var _types = require("@sanity/types");

var _draftUtils = require("part:@sanity/base/util/draft-utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getDocumentKey(value, index) {
  return value._id ? (0, _draftUtils.getPublishedId)(value._id) : "item-".concat(index);
}

function removePublishedWithDrafts(documents) {
  return (0, _draftUtils.collate)(documents).map(entry => {
    var doc = entry.draft || entry.published;
    return _objectSpread(_objectSpread({}, doc), {}, {
      hasPublished: !!entry.published,
      hasDraft: !!entry.draft
    });
  });
}

var RE_TYPE_NAME_IN_FILTER = /\b_type\s*==\s*(['"].*?['"]|\$.*?(?:\s|$))|\B(['"].*?['"]|\$.*?(?:\s|$))\s*==\s*_type\b/;

function getTypeNameFromSingleTypeFilter(filter) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var matches = filter.match(RE_TYPE_NAME_IN_FILTER);

  if (!matches) {
    return null;
  }

  var match = (matches[1] || matches[2]).trim().replace(/^["']|["']$/g, '');

  if (match[0] === '$') {
    var k = match.slice(1);
    var v = params[k];
    return typeof v === 'string' ? v : null;
  }

  return match;
}

function isSimpleTypeFilter(filter) {
  return /^_type\s*==\s*['"$]\w+['"]?\s*$/.test(filter.trim());
}

function toOrderClause(orderBy) {
  return orderBy.map(ordering => [wrapFieldWithFn(ordering), (ordering.direction || '').toLowerCase()].map(str => str.trim()).filter(Boolean).join(' ')).join(',');
}

function wrapFieldWithFn(ordering) {
  return ordering.mapWith ? "".concat(ordering.mapWith, "(").concat(ordering.field, ")") : ordering.field;
}

function applyOrderingFunctions(order, schemaType) {
  var orderBy = order.by.map(by => {
    // Skip those that already have a mapper
    if (by.mapWith) {
      return by;
    }

    var fieldType = tryResolveSchemaTypeForPath(schemaType, by.field);

    if (!fieldType) {
      return by;
    } // Note: order matters here, since the jsonType of a date field is `string`,
    // but we want to apply `datetime()`, not `lower()`


    if (fieldExtendsType(fieldType, 'datetime')) {
      return _objectSpread(_objectSpread({}, by), {}, {
        mapWith: 'dateTime'
      });
    }

    if (fieldType.jsonType === 'string') {
      return _objectSpread(_objectSpread({}, by), {}, {
        mapWith: 'lower'
      });
    }

    return by;
  });
  return orderBy.every((item, index) => item === order.by[index]) ? order : _objectSpread(_objectSpread({}, order), {}, {
    by: orderBy
  });
}

function tryResolveSchemaTypeForPath(baseType, path) {
  var pathSegments = PathUtils.fromString(path);
  var current = baseType;

  var _iterator = _createForOfIteratorHelper(pathSegments),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var segment = _step.value;

      if (!current) {
        return undefined;
      }

      if (typeof segment === 'string') {
        current = getFieldTypeByName(current, segment);
        continue;
      }

      var isArrayAccessor = (0, _types.isKeySegment)(segment) || (0, _types.isIndexSegment)(segment);

      if (!isArrayAccessor || current.jsonType !== 'array') {
        return undefined;
      }

      var _ref = current.of || [],
          _ref2 = _slicedToArray(_ref, 2),
          memberType = _ref2[0],
          otherType = _ref2[1];

      if (otherType || !memberType) {
        // Can't figure out the type without knowing the value
        return undefined;
      }

      if (!(0, _types.isReferenceSchemaType)(memberType)) {
        current = memberType;
        continue;
      }

      var _ref3 = memberType.to || [],
          _ref4 = _slicedToArray(_ref3, 2),
          refType = _ref4[0],
          otherRefType = _ref4[1];

      if (otherRefType || !refType) {
        // Can't figure out the type without knowing the value
        return undefined;
      }

      current = refType;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return current;
}

function getFieldTypeByName(type, fieldName) {
  if (!('fields' in type)) {
    return undefined;
  }

  var fieldType = type.fields.find(field => field.name === fieldName);
  return fieldType ? fieldType.type : undefined;
}

function fieldExtendsType(field, ofType) {
  var current = field.type;

  while (current) {
    if (current.name === ofType) {
      return true;
    }

    if (!current.type && current.jsonType === ofType) {
      return true;
    }

    current = current.type;
  }

  return false;
}