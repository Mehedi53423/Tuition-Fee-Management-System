"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeskToolPane = void 0;

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _react = _interopRequireWildcard(require("react"));

var _paneRouter = require("../contexts/paneRouter");

var _document = require("./document");

var _documentList = require("./documentList");

var _list = require("./list");

var _unknown = require("./unknown");

var _userComponent = require("./userComponent");

var _excluded = ["params", "payload"],
    _excluded2 = ["params", "payload"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var paneMap = {
  component: _userComponent.UserComponentPane,
  document: _document.DocumentPane,
  documentList: _documentList.DocumentListPane,
  list: _list.ListPane
};
/**
 * @note The same pane might appear multiple times (split pane), so use index as tiebreaker
 *
 * @internal
 */

var DeskToolPane = /*#__PURE__*/(0, _react.memo)(function DeskToolPane(props) {
  var active = props.active,
      childItemId = props.childItemId,
      groupIndex = props.groupIndex,
      index = props.index,
      itemId = props.itemId,
      pane = props.pane,
      paneKey = props.paneKey,
      params = props.params,
      payload = props.payload,
      selected = props.selected,
      siblingIndex = props.siblingIndex;
  var PaneComponent = paneMap[pane.type] || _unknown.UnknownPane;
  return /*#__PURE__*/_react.default.createElement(_paneRouter.PaneRouterProvider, {
    flatIndex: index,
    index: groupIndex,
    params: params,
    payload: payload,
    siblingIndex: siblingIndex
  }, /*#__PURE__*/_react.default.createElement(PaneComponent, {
    childItemId: childItemId || '',
    index: index,
    itemId: itemId,
    isActive: active,
    isSelected: selected,
    paneKey: paneKey // @ts-expect-error TS doesn't know how to handle this intersection
    ,
    pane: pane
  }));
}, (_ref, _ref2) => {
  var _ref$params = _ref.params,
      prevParams = _ref$params === void 0 ? {} : _ref$params,
      _ref$payload = _ref.payload,
      prevPayload = _ref$payload === void 0 ? null : _ref$payload,
      prev = _objectWithoutProperties(_ref, _excluded);

  var _ref2$params = _ref2.params,
      nextParams = _ref2$params === void 0 ? {} : _ref2$params,
      _ref2$payload = _ref2.payload,
      nextPayload = _ref2$payload === void 0 ? null : _ref2$payload,
      next = _objectWithoutProperties(_ref2, _excluded2);

  // deeply compare these objects (it's okay, they're small)
  if (!(0, _isEqual2.default)(prevParams, nextParams)) return false;
  if (!(0, _isEqual2.default)(prevPayload, nextPayload)) return false;
  var keys = new Set([...Object.keys(prev), ...Object.keys(next)]); // then shallow equal the rest

  var _iterator = _createForOfIteratorHelper(keys),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var key = _step.value;
      if (prev[key] !== next[key]) return false;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return true;
});
exports.DeskToolPane = DeskToolPane;