"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useInitialValue = useInitialValue;

var _react = require("react");

var _paneRouter = require("../../../contexts/paneRouter");

var _useUnique = require("../../../utils/useUnique");

var _getInitialValue = require("./getInitialValue");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * @internal
 */
function useInitialValue(documentId, rawPaneOptions) {
  var paneRouter = (0, _paneRouter.usePaneRouter)();
  var paneParams = (0, _useUnique.useUnique)(paneRouter.params);
  var panePayload = (0, _useUnique.useUnique)(paneRouter.payload);
  var paneOptions = (0, _useUnique.useUnique)(rawPaneOptions);
  var defaultValue = (0, _react.useMemo)(() => ({
    _type: paneOptions.type
  }), [paneOptions.type]);
  var urlTemplate = paneParams === null || paneParams === void 0 ? void 0 : paneParams.template;

  var _useState = (0, _react.useState)({
    loading: false,
    error: null,
    value: defaultValue
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  (0, _react.useEffect)(() => {
    setState({
      loading: true,
      error: null,
      value: defaultValue
    });
    var initialValueOptions = {
      documentId,
      paneOptions,
      panePayload,
      urlTemplate
    };
    var sub = (0, _getInitialValue.getInitialValueObservable)(initialValueOptions).subscribe(msg => {
      if (msg.type === 'success') {
        setState({
          loading: false,
          error: null,
          value: msg.value ? _objectSpread(_objectSpread({}, defaultValue), msg.value) : defaultValue
        });
      }

      if (msg.type === 'error') {
        setState({
          loading: false,
          error: msg.error,
          value: defaultValue
        });
      }
    });
    return () => sub.unsubscribe();
  }, [defaultValue, documentId, paneOptions, panePayload, urlTemplate]);
  return state;
}