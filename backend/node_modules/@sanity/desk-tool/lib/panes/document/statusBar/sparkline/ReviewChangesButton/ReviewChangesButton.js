"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReviewChangesButton = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _hooks = require("@sanity/base/hooks");

var _AnimatedStatusIcon = require("./AnimatedStatusIcon");

var _excluded = ["collapsed", "status", "lastUpdated"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ReviewButton = /*#__PURE__*/_react.default.forwardRef(function ReviewButton(props, ref) {
  var collapsed = props.collapsed,
      status = props.status,
      lastUpdated = props.lastUpdated,
      rest = _objectWithoutProperties(props, _excluded);

  var lastUpdatedTime = (0, _hooks.useTimeAgo)(lastUpdated || '', {
    minimal: true
  });
  var lastUpdatedTimeAgo = (0, _hooks.useTimeAgo)(lastUpdated || '', {
    minimal: true,
    agoSuffix: true
  });
  var buttonProps = (0, _react.useMemo)(() => {
    if (status === 'syncing') {
      return {
        text: 'Saving...',
        tone: undefined
      };
    }

    if (status === 'changes') {
      return {
        text: lastUpdatedTime,
        tone: 'caution'
      };
    }

    if (status === 'saved') {
      return {
        text: 'Saved!',
        tone: 'positive'
      };
    }

    return {};
  }, [status, lastUpdatedTime]);

  if (!status) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    portal: true,
    disabled: status !== 'changes',
    content: /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      padding: 3,
      space: 3
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 1,
      weight: "semibold"
    }, "Review changes"), /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 1,
      muted: true
    }, "Changes saved ", lastUpdatedTimeAgo))
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, _extends({
    mode: "bleed",
    justify: "flex-start",
    tone: buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.tone
  }, rest, {
    "data-testid": "review-changes-button",
    ref: ref
  }), /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center"
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginRight: collapsed ? 0 : 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, /*#__PURE__*/_react.default.createElement(_AnimatedStatusIcon.AnimatedStatusIcon, {
    status: status
  }))), !collapsed && /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1,
    weight: "medium"
  }, buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.text))));
});

var ReviewChangesButton = /*#__PURE__*/_react.default.memo(ReviewButton);

exports.ReviewChangesButton = ReviewChangesButton;