"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentPanel = void 0;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _components = require("@sanity/base/components");

var _hooks = require("@sanity/base/hooks");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _internal = require("@sanity/base/_internal");

var _pane = require("../../../components/pane");

var _usePaneLayout2 = require("../../../components/pane/usePaneLayout");

var _deskTool = require("../../../contexts/deskTool");

var _useDocumentPane2 = require("../useDocumentPane");

var _inspectDialog = require("../inspectDialog");

var _header = require("./header");

var _documentViews = require("./documentViews");

var _PermissionCheckBanner = require("./PermissionCheckBanner");

var _ReferenceChangedBanner = require("./ReferenceChangedBanner");

var _templateObject;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function getSchemaType(typeName) {
  var schemaMod = require('part:@sanity/base/schema');

  var schema = schemaMod.default || schemaMod;
  var type = schema.get(typeName);
  if (!type) return null;
  return type;
}

var Scroller = (0, _styledComponents.default)(_components.ScrollContainer)(_ref => {
  var $disabled = _ref.$disabled;

  if ($disabled) {
    return {
      height: '100%'
    };
  }

  return (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    height: 100%;\n    overflow: auto;\n    position: relative;\n    scroll-behavior: smooth;\n    outline: none;\n  "])));
});

var DocumentPanel = function DocumentPanel(props) {
  var footerHeight = props.footerHeight,
      rootElement = props.rootElement,
      isInspectOpen = props.isInspectOpen;

  var _useDocumentPane = (0, _useDocumentPane2.useDocumentPane)(),
      activeViewId = _useDocumentPane.activeViewId,
      displayed = _useDocumentPane.displayed,
      documentId = _useDocumentPane.documentId,
      documentSchema = _useDocumentPane.documentSchema,
      editState = _useDocumentPane.editState,
      value = _useDocumentPane.value,
      views = _useDocumentPane.views,
      ready = _useDocumentPane.ready,
      documentType = _useDocumentPane.documentType;

  var _usePaneLayout = (0, _usePaneLayout2.usePaneLayout)(),
      layoutCollapsed = _usePaneLayout.collapsed;

  var parentPortal = (0, _ui.usePortal)();

  var _useDeskTool = (0, _deskTool.useDeskTool)(),
      features = _useDeskTool.features;

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      headerElement = _useState2[0],
      setHeaderElement = _useState2[1];

  var headerRect = (0, _ui.useElementRect)(headerElement);
  var portalRef = (0, _react.useRef)(null);

  var _useState3 = (0, _react.useState)(null),
      _useState4 = _slicedToArray(_useState3, 2),
      documentScrollElement = _useState4[0],
      setDocumentScrollElement = _useState4[1];

  var requiredPermission = value._createdAt ? 'update' : 'create';
  var liveEdit = (0, _react.useMemo)(() => {
    var _getSchemaType;

    return Boolean((_getSchemaType = getSchemaType(documentType)) === null || _getSchemaType === void 0 ? void 0 : _getSchemaType.liveEdit);
  }, [documentType]);
  var docId = value._id ? value._id : 'dummy-id';
  var docPermissionsInput = (0, _react.useMemo)(() => {
    return _objectSpread(_objectSpread({}, value), {}, {
      _id: liveEdit ? (0, _internal.getPublishedId)(docId) : (0, _internal.getDraftId)(docId)
    });
  }, [liveEdit, value, docId]);

  var _useDocumentValuePerm = (0, _hooks.unstable_useDocumentValuePermissions)({
    document: docPermissionsInput,
    permission: requiredPermission
  }),
      _useDocumentValuePerm2 = _slicedToArray(_useDocumentValuePerm, 2),
      permissions = _useDocumentValuePerm2[0],
      isPermissionsLoading = _useDocumentValuePerm2[1];

  var activeView = (0, _react.useMemo)(() => views.find(view => view.id === activeViewId) || views[0] || {
    type: 'form'
  }, [activeViewId, views]); // Use a local portal container when split panes is supported

  var portalElement = features.splitPanes ? portalRef.current || parentPortal.element : parentPortal.element; // Calculate the height of the header

  var margins = (0, _react.useMemo)(() => {
    if (layoutCollapsed) {
      return [(headerRect === null || headerRect === void 0 ? void 0 : headerRect.height) || 0, 0, footerHeight ? footerHeight + 2 : 2, 0];
    }

    return [0, 0, 2, 0];
  }, [layoutCollapsed, footerHeight, headerRect]);
  var formViewHidden = activeView.type !== 'form';
  var activeViewNode = (0, _react.useMemo)(() => activeView.type === 'component' && activeView.component && /*#__PURE__*/(0, _react.createElement)(activeView.component, {
    document: {
      draft: (editState === null || editState === void 0 ? void 0 : editState.draft) || null,
      displayed: displayed || value,
      historical: displayed,
      published: (editState === null || editState === void 0 ? void 0 : editState.published) || null
    },
    documentId,
    options: activeView.options,
    schemaType: documentSchema
  }), [activeView, displayed, documentId, documentSchema, editState === null || editState === void 0 ? void 0 : editState.draft, editState === null || editState === void 0 ? void 0 : editState.published, value]); // Scroll to top as `documentId` changes

  (0, _react.useEffect)(() => {
    if (!(documentScrollElement !== null && documentScrollElement !== void 0 && documentScrollElement.scrollTo)) return;
    documentScrollElement.scrollTo(0, 0);
  }, [documentId, documentScrollElement]);
  var inspectDialog = (0, _react.useMemo)(() => {
    return isInspectOpen ? /*#__PURE__*/_react.default.createElement(_inspectDialog.InspectDialog, {
      value: displayed || value
    }) : null;
  }, [isInspectOpen, displayed, value]);
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    direction: "column",
    flex: 2,
    overflow: layoutCollapsed ? undefined : 'hidden'
  }, /*#__PURE__*/_react.default.createElement(_header.DocumentPanelHeader, {
    rootElement: rootElement,
    ref: setHeaderElement
  }), /*#__PURE__*/_react.default.createElement(_pane.PaneContent, null, /*#__PURE__*/_react.default.createElement(_ui.PortalProvider, {
    element: portalElement
  }, /*#__PURE__*/_react.default.createElement(_ui.BoundaryElementProvider, {
    element: documentScrollElement
  }, activeView.type === 'form' && !isPermissionsLoading && ready && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_PermissionCheckBanner.PermissionCheckBanner, {
    granted: Boolean(permissions === null || permissions === void 0 ? void 0 : permissions.granted),
    requiredPermission: requiredPermission
  }), /*#__PURE__*/_react.default.createElement(_ReferenceChangedBanner.ReferenceChangedBanner, null)), /*#__PURE__*/_react.default.createElement(Scroller, {
    $disabled: layoutCollapsed || false,
    "data-testid": "document-panel-scroller",
    ref: setDocumentScrollElement
  }, /*#__PURE__*/_react.default.createElement(_documentViews.FormView, {
    hidden: formViewHidden,
    key: documentId + (ready ? '_ready' : '_pending'),
    margins: margins,
    granted: Boolean(permissions === null || permissions === void 0 ? void 0 : permissions.granted)
  }), activeViewNode), inspectDialog, /*#__PURE__*/_react.default.createElement("div", {
    "data-testid": "document-panel-portal",
    ref: portalRef
  })))));
};

exports.DocumentPanel = DocumentPanel;