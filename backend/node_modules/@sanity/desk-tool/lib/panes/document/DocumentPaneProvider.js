"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentPaneProvider = void 0;

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _react = _interopRequireWildcard(require("react"));

var _reactHooks = require("@sanity/react-hooks");

var _ui = require("@sanity/ui");

var _paths = require("@sanity/util/paths");

var _isHotkey = _interopRequireDefault(require("is-hotkey"));

var _presence = require("part:@sanity/base/datastore/presence");

var _resolver = _interopRequireDefault(require("part:@sanity/base/document-actions/resolver"));

var _resolver2 = _interopRequireDefault(require("part:@sanity/base/document-badges/resolver"));

var _draftUtils = require("part:@sanity/base/util/draft-utils");

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _reactRx = require("react-rx");

var _deskTool = require("../../contexts/deskTool");

var _paneRouter = require("../../contexts/paneRouter");

var _useUnique = require("../../utils/useUnique");

var _versionedClient = require("../../versionedClient");

var _Controller = require("./documentHistory/history/Controller");

var _Timeline = require("./documentHistory/history/Timeline");

var _DocumentPaneContext = require("./DocumentPaneContext");

var _initialValue = require("./initialValue");

var _menuItems = require("./menuItems");

var _usePreviewUrl = require("./usePreviewUrl");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var emptyObject = {};

/**
 * @internal
 */
// eslint-disable-next-line complexity, max-statements
var DocumentPaneProvider = /*#__PURE__*/(0, _react.memo)(_ref => {
  var children = _ref.children,
      index = _ref.index,
      pane = _ref.pane,
      paneKey = _ref.paneKey;
  var paneRouter = (0, _paneRouter.usePaneRouter)();

  var _useDeskTool = (0, _deskTool.useDeskTool)(),
      features = _useDeskTool.features;

  var _useToast = (0, _ui.useToast)(),
      pushToast = _useToast.push;

  var options = pane.options,
      menuItemGroups = pane.menuItemGroups,
      _pane$title = pane.title,
      title = _pane$title === void 0 ? null : _pane$title,
      _pane$views = pane.views,
      viewsProp = _pane$views === void 0 ? [] : _pane$views;
  var initialValueRaw = (0, _initialValue.useInitialValue)(options.id, options);
  var initialValue = (0, _useUnique.useUnique)(initialValueRaw);
  var documentIdRaw = options.id;
  var documentId = (0, _draftUtils.getPublishedId)(documentIdRaw);
  var documentType = options.type;

  var _useDocumentOperation = (0, _reactHooks.useDocumentOperation)(documentId, documentType),
      patch = _useDocumentOperation.patch;

  var editState = (0, _reactHooks.useEditState)(documentId, documentType);

  var _useValidationStatus = (0, _reactHooks.useValidationStatus)(documentId, documentType),
      markersRaw = _useValidationStatus.markers;

  var connectionState = (0, _reactHooks.useConnectionState)(documentId, documentType);

  var documentSchema = _schema.default.get(documentType);

  var value = (editState === null || editState === void 0 ? void 0 : editState.draft) || (editState === null || editState === void 0 ? void 0 : editState.published) || initialValue.value;
  var actions = (0, _react.useMemo)(() => editState ? (0, _resolver.default)(editState) : null, [editState]);
  var badges = (0, _react.useMemo)(() => editState ? (0, _resolver2.default)(editState) : null, [editState]);
  var markers = (0, _useUnique.useUnique)(markersRaw);
  var views = (0, _useUnique.useUnique)(viewsProp);
  var params = paneRouter.params || emptyObject;

  var _useState = (0, _react.useState)(() => params.path ? (0, _paths.fromString)(params.path) : []),
      _useState2 = _slicedToArray(_useState, 2),
      focusPath = _useState2[0],
      setFocusPath = _useState2[1];

  var activeViewId = params.view || views[0] && views[0].id || null;
  var timeline = (0, _react.useMemo)(() => new _Timeline.Timeline({
    publishedId: documentId,
    enableTrace: __DEV__
  }), [documentId]);

  var _useState3 = (0, _react.useState)('closed'),
      _useState4 = _slicedToArray(_useState3, 2),
      timelineMode = _useState4[0],
      setTimelineMode = _useState4[1]; // NOTE: this emits sync so can never be null
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion


  var _ref2 = (0, _reactRx.useMemoObservable)(() => (0, _Controller.createObservableController)({
    timeline,
    documentId,
    documentType,
    client: _versionedClient.versionedClient
  }), [timeline, documentId, documentType, timeline, _versionedClient.versionedClient]),
      historyController = _ref2.historyController;
  /**
   * @todo: this will now happen on each render, but should be refactored so it happens only when
   * the `rev`, `since` or `historyController` values change.
   */


  historyController.setRange(params.since || null, params.rev || null);
  var changesOpen = historyController.changesPanelActive();
  var previewUrl = (0, _react.useMemo)(() => (0, _usePreviewUrl.getPreviewUrl)(historyController, value), [historyController, value]);
  var hasValue = Boolean(value);
  var menuItems = (0, _react.useMemo)(() => (0, _menuItems.getMenuItems)({
    features,
    hasValue,
    changesOpen,
    previewUrl
  }), [features, hasValue, changesOpen, previewUrl]);
  var inspectOpen = params.inspect === 'on';
  var compareValue = changesOpen ? historyController.sinceAttributes() : (editState === null || editState === void 0 ? void 0 : editState.published) || null;
  var ready = connectionState === 'connected' && editState.ready;
  var viewOlderVersion = historyController.onOlderRevision();
  var displayed = (0, _react.useMemo)(() => viewOlderVersion ? historyController.displayed() : value, // eslint-disable-next-line react-hooks/exhaustive-deps
  [historyController, params.rev, params.since, value, viewOlderVersion]);
  var setTimelineRange = (0, _react.useCallback)((newSince, newRev) => {
    paneRouter.setParams(_objectSpread(_objectSpread({}, paneRouter.params), {}, {
      since: newSince,
      rev: newRev || undefined
    }));
  }, [paneRouter]);
  var handleFocus = (0, _react.useCallback)(nextFocusPath => {
    setFocusPath((0, _paths.pathFor)(nextFocusPath));
    (0, _presence.setLocation)([{
      type: 'document',
      documentId,
      path: nextFocusPath,
      lastActiveAt: new Date().toISOString()
    }]);
  }, [documentId, setFocusPath]);
  var handleChange = (0, _react.useCallback)(patches => patch.execute(patches, initialValue.value), [patch, initialValue.value]);
  var handleHistoryClose = (0, _react.useCallback)(() => {
    paneRouter.setParams(_objectSpread(_objectSpread({}, params), {}, {
      since: undefined
    }));
  }, [paneRouter, params]);
  var handleHistoryOpen = (0, _react.useCallback)(() => {
    paneRouter.setParams(_objectSpread(_objectSpread({}, params), {}, {
      since: '@lastPublished'
    }));
  }, [paneRouter, params]);
  var handlePaneClose = (0, _react.useCallback)(() => paneRouter.closeCurrent(), [paneRouter]);
  var handlePaneSplit = (0, _react.useCallback)(() => paneRouter.duplicateCurrent(), [paneRouter]);
  var toggleInspect = (0, _react.useCallback)(function () {
    var toggle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !inspectOpen;

    if (toggle) {
      paneRouter.setParams(_objectSpread(_objectSpread({}, params), {}, {
        inspect: 'on'
      }));
    } else {
      paneRouter.setParams((0, _omit2.default)(params, 'inspect'));
    }
  }, [inspectOpen, paneRouter, params]);
  var handleMenuAction = (0, _react.useCallback)(item => {
    if (item.action === 'production-preview' && previewUrl) {
      window.open(previewUrl);
      return true;
    }

    if (item.action === 'inspect') {
      toggleInspect(true);
      return true;
    }

    if (item.action === 'reviewChanges') {
      handleHistoryOpen();
      return true;
    }

    return false;
  }, [handleHistoryOpen, previewUrl, toggleInspect]);
  var handleKeyUp = (0, _react.useCallback)(event => {
    var _iterator = _createForOfIteratorHelper(menuItems),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var item = _step.value;

        if (item.shortcut) {
          if ((0, _isHotkey.default)(item.shortcut, event)) {
            event.preventDefault();
            event.stopPropagation();
            handleMenuAction(item);
            return;
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }, [handleMenuAction, menuItems]);
  var handleInspectClose = (0, _react.useCallback)(() => toggleInspect(false), [toggleInspect]);
  var documentPane = {
    actions,
    activeViewId,
    badges,
    changesOpen,
    compareValue,
    connectionState,
    displayed,
    documentId,
    documentIdRaw,
    documentSchema,
    documentType,
    editState,
    focusPath,
    handleChange,
    handleFocus,
    handleHistoryClose,
    handleHistoryOpen,
    handleInspectClose,
    handleKeyUp,
    handleMenuAction,
    handlePaneClose,
    handlePaneSplit,
    historyController,
    index,
    inspectOpen,
    markers,
    menuItems,
    menuItemGroups: menuItemGroups || [],
    paneKey,
    previewUrl,
    ready,
    setTimelineMode,
    setTimelineRange,
    timeline,
    timelineMode,
    title,
    value,
    views
  };
  (0, _react.useEffect)(() => {
    if (connectionState === 'reconnecting') {
      pushToast({
        id: 'desk-tool/reconnecting',
        status: 'warning',
        title: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Connection lost. Reconnecting\u2026")
      });
    }
  }, [connectionState, pushToast]); // Reset `focusPath` when `documentId` or `params.path` changes

  (0, _react.useEffect)(() => {
    // Reset focus path
    setFocusPath(params.path ? (0, _paths.fromString)(params.path) : []);
  }, [documentId, params.path]);
  return /*#__PURE__*/_react.default.createElement(_DocumentPaneContext.DocumentPaneContext.Provider, {
    value: documentPane
  }, children);
});
exports.DocumentPaneProvider = DocumentPaneProvider;
DocumentPaneProvider.displayName = 'DocumentPaneProvider';