"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InspectDialog = InspectDialog;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _reactJsonInspector = _interopRequireDefault(require("react-json-inspector"));

var _DocTitle = require("../../../components/DocTitle");

var _settings = require("../../../settings");

var _useDocumentPane2 = require("../useDocumentPane");

var _constants = require("./constants");

var _helpers = require("./helpers");

var _InspectDialog = require("./InspectDialog.styles");

var _Search = require("./Search");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function InspectDialog(props) {
  var value = props.value;

  var _useDocumentPane = (0, _useDocumentPane2.useDocumentPane)(),
      handleInspectClose = _useDocumentPane.handleInspectClose,
      paneKey = _useDocumentPane.paneKey;

  var dialogIdPrefix = "".concat(paneKey, "_inspect_");
  /* this creates a view mode (the default that it opens with is the parsed tab) that is saved based on the paneKey 
  where the inspect dialog lives.
  This also means that when a page is loaded, the state of the tabs remains and doesn't revert to the pane tab */

  var _useDeskToolSetting = (0, _settings.useDeskToolSetting)('desk-tool', "inspect-view-preferred-view-mode-".concat(paneKey), 'parsed'),
      _useDeskToolSetting2 = _slicedToArray(_useDeskToolSetting, 2),
      viewModeId = _useDeskToolSetting2[0],
      onViewModeChange = _useDeskToolSetting2[1];
  /* based on the view mode it shows the right tab content */


  var viewMode = _constants.VIEW_MODES.find(mode => mode.id === viewModeId);

  var setParsedViewMode = (0, _react.useCallback)(() => {
    onViewModeChange(_constants.VIEW_MODE_PARSED.id);
  }, [onViewModeChange]);
  var setRawViewMode = (0, _react.useCallback)(() => {
    onViewModeChange(_constants.VIEW_MODE_RAW.id);
  }, [onViewModeChange]);
  return /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
    id: "".concat(dialogIdPrefix, "dialog"),
    header: (0, _helpers.isDocumentWithType)(value) ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Inspecting", ' ', /*#__PURE__*/_react.default.createElement("em", null, /*#__PURE__*/_react.default.createElement(_DocTitle.DocTitle, {
      document: value
    }))) : /*#__PURE__*/_react.default.createElement("em", null, "No value"),
    onClose: handleInspectClose,
    width: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    direction: "column",
    height: "fill"
  }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    padding: 3,
    shadow: 1,
    style: {
      position: 'sticky',
      bottom: 0,
      zIndex: 3
    }
  }, /*#__PURE__*/_react.default.createElement(_ui.TabList, {
    space: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Tab, {
    "aria-controls": "".concat(dialogIdPrefix, "tabpanel"),
    fontSize: 1,
    id: "".concat(dialogIdPrefix, "tab-").concat(_constants.VIEW_MODE_PARSED.id),
    label: _constants.VIEW_MODE_PARSED.title,
    onClick: setParsedViewMode,
    selected: viewMode === _constants.VIEW_MODE_PARSED
  }), /*#__PURE__*/_react.default.createElement(_ui.Tab, {
    "aria-controls": "".concat(dialogIdPrefix, "tabpanel"),
    fontSize: 1,
    id: "".concat(dialogIdPrefix, "tab-").concat(_constants.VIEW_MODE_RAW.id),
    label: _constants.VIEW_MODE_RAW.title,
    onClick: setRawViewMode,
    selected: viewMode === _constants.VIEW_MODE_RAW
  }))), /*#__PURE__*/_react.default.createElement(_ui.TabPanel, {
    "aria-labelledby": "".concat(dialogIdPrefix, "tab-").concat(viewModeId),
    flex: 1,
    id: "".concat(dialogIdPrefix, "tabpanel"),
    overflow: "auto",
    padding: 4,
    style: {
      outline: 'none'
    }
  }, viewMode === _constants.VIEW_MODE_PARSED && /*#__PURE__*/_react.default.createElement(_InspectDialog.JSONInspectorWrapper, null, /*#__PURE__*/_react.default.createElement(_reactJsonInspector.default, {
    data: value,
    isExpanded: _helpers.isExpanded,
    onClick: _helpers.toggleExpanded,
    search: _Search.Search
  })), viewMode === _constants.VIEW_MODE_RAW && /*#__PURE__*/_react.default.createElement(_ui.Code, {
    language: "json",
    tabIndex: 0,
    onKeyDown: _helpers.maybeSelectAll,
    onDoubleClick: _helpers.select,
    onFocus: _helpers.select
  }, JSON.stringify(value, null, 2)))));
}