"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PaneHeaderCreateButton = PaneHeaderCreateButton;

var _initialValueTemplates = require("@sanity/base/initial-value-templates");

var _icons = require("@sanity/icons");

var _react = _interopRequireWildcard(require("react"));

var _hooks = require("@sanity/base/hooks");

var _ui = require("@sanity/ui");

var _router = require("@sanity/base/router");

var _IntentButton = require("../IntentButton");

var _InsufficientPermissionsMessageTooltip = require("./InsufficientPermissionsMessageTooltip");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var POPOVER_PROPS = {
  constrainSize: true,
  placement: 'bottom',
  portal: true
};

var getIntent = item => {
  var _getTemplateById;

  var typeName = (_getTemplateById = (0, _initialValueTemplates.getTemplateById)(item.templateId)) === null || _getTemplateById === void 0 ? void 0 : _getTemplateById.schemaType;
  if (!typeName) return null;
  var baseParams = {
    template: item.templateId,
    type: typeName,
    id: item.initialDocumentId
  };
  return {
    type: 'create',
    params: item.parameters ? [baseParams, item.parameters] : baseParams
  };
};

function PaneHeaderCreateButton(_ref) {
  var initialValueTemplateItems = _ref.initialValueTemplateItems;

  var _useTemplatePermissio = (0, _hooks.unstable_useTemplatePermissions)(initialValueTemplateItems),
      _useTemplatePermissio2 = _slicedToArray(_useTemplatePermissio, 2),
      templatePermissions = _useTemplatePermissio2[0],
      isTemplatePermissionsLoading = _useTemplatePermissio2[1];

  var nothingGranted = (0, _react.useMemo)(() => {
    return !isTemplatePermissionsLoading && (templatePermissions === null || templatePermissions === void 0 ? void 0 : templatePermissions.every(permission => !permission.granted));
  }, [isTemplatePermissionsLoading, templatePermissions]);
  var permissionsById = (0, _react.useMemo)(() => {
    if (!templatePermissions) return {};
    return templatePermissions.reduce((acc, permission) => {
      acc[permission.id] = permission;
      return acc;
    }, {});
  }, [templatePermissions]);

  if (nothingGranted) {
    return /*#__PURE__*/_react.default.createElement(_InsufficientPermissionsMessageTooltip.InsufficientPermissionsMessageTooltip, {
      reveal: true,
      loading: isTemplatePermissionsLoading
    }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
      "aria-label": "Insufficient permissions",
      icon: _icons.ComposeIcon,
      mode: "bleed",
      disabled: true,
      "data-testid": "action-intent-button"
    }));
  }

  if (initialValueTemplateItems.length === 1) {
    var firstItem = initialValueTemplateItems[0];
    var permissions = permissionsById[firstItem.id];
    var disabled = !(permissions !== null && permissions !== void 0 && permissions.granted);
    var intent = getIntent(firstItem);
    if (!intent) return null;
    return /*#__PURE__*/_react.default.createElement(_InsufficientPermissionsMessageTooltip.InsufficientPermissionsMessageTooltip, {
      reveal: disabled,
      loading: isTemplatePermissionsLoading
    }, /*#__PURE__*/_react.default.createElement(_IntentButton.IntentButton, {
      "aria-label": firstItem.title,
      icon: firstItem.icon || _icons.ComposeIcon,
      intent: intent,
      mode: "bleed",
      disabled: disabled,
      "data-testid": "action-intent-button"
    }));
  }

  return /*#__PURE__*/_react.default.createElement(_ui.MenuButton, {
    button: /*#__PURE__*/_react.default.createElement(_ui.Button, {
      icon: _icons.ComposeIcon,
      mode: "bleed",
      padding: 3,
      "data-testid": "multi-action-intent-button"
    }),
    id: "create-menu",
    menu: /*#__PURE__*/_react.default.createElement(_ui.Menu, null, /*#__PURE__*/_react.default.createElement(_ui.Box, {
      paddingX: 3,
      paddingTop: 3,
      paddingBottom: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Label, {
      muted: true
    }, "Create")), initialValueTemplateItems.map((item, itemIndex) => {
      var permissions = permissionsById[item.id];
      var disabled = !(permissions !== null && permissions !== void 0 && permissions.granted);
      var intent = getIntent(item);
      var template = (0, _initialValueTemplates.getTemplateById)(item.templateId);
      if (!template || !intent) return null;
      var Link = /*#__PURE__*/(0, _react.forwardRef)((linkProps, linkRef) => disabled ? /*#__PURE__*/_react.default.createElement("button", _extends({
        type: "button",
        disabled: true
      }, linkProps, {
        ref: linkRef
      })) : /*#__PURE__*/_react.default.createElement(_router.IntentLink, _extends({}, linkProps, {
        intent: intent.type,
        params: intent.params,
        ref: linkRef
      })));
      Link.displayName = 'Link';
      return /*#__PURE__*/_react.default.createElement(_InsufficientPermissionsMessageTooltip.InsufficientPermissionsMessageTooltip, {
        key: item.id,
        reveal: disabled,
        loading: isTemplatePermissionsLoading
      }, /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
        as: Link,
        "data-as": disabled ? 'button' : 'a',
        text: item.title || template.title,
        "aria-label": disabled ? 'Insufficient permissions' : item.title || template.title,
        disabled: disabled,
        "data-testid": "action-intent-button-".concat(itemIndex)
      }));
    })),
    popover: POPOVER_PROPS
  });
}