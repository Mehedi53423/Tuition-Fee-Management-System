"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMissingDocumentFallback = void 0;
exports.getPreviewStateObservable = getPreviewStateObservable;
exports.isLiveEditEnabled = exports.getValueWithFallback = void 0;

var _assignWith2 = _interopRequireDefault(require("lodash/assignWith"));

var _icons = require("@sanity/icons");

var _preview = require("part:@sanity/base/preview");

var _draftUtils = require("part:@sanity/base/util/draft-utils");

var _react = _interopRequireDefault(require("react"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var isLiveEditEnabled = schemaType => schemaType.liveEdit === true;

exports.isLiveEditEnabled = isLiveEditEnabled;

var getMissingDocumentFallback = item => ({
  title: /*#__PURE__*/_react.default.createElement("span", {
    style: {
      fontStyle: 'italic'
    }
  }, item.title ? String(item.title) : 'Missing document'),
  subtitle: /*#__PURE__*/_react.default.createElement("span", {
    style: {
      fontStyle: 'italic'
    }
  }, item.title ? "Missing document ID: ".concat(item._id) : "Document ID: ".concat(item._id)),
  media: _icons.WarningOutlineIcon
});

exports.getMissingDocumentFallback = getMissingDocumentFallback;

var getValueWithFallback = _ref => {
  var value = _ref.value,
      draft = _ref.draft,
      published = _ref.published;
  var snapshot = draft || published;

  if (!snapshot) {
    return getMissingDocumentFallback(value);
  }

  return (0, _assignWith2.default)({}, snapshot, value, (objValue, srcValue) => {
    return typeof srcValue === 'undefined' ? objValue : srcValue;
  });
};

exports.getValueWithFallback = getValueWithFallback;

function getPreviewStateObservable(schemaType, documentId, title) {
  var draft$ = isLiveEditEnabled(schemaType) ? (0, _rxjs.of)({
    snapshot: null
  }) : (0, _preview.observeForPreview)({
    _id: (0, _draftUtils.getDraftId)(documentId)
  }, schemaType);
  var published$ = (0, _preview.observeForPreview)({
    _id: (0, _draftUtils.getPublishedId)(documentId)
  }, schemaType);
  return (0, _rxjs.combineLatest)([draft$, published$]).pipe((0, _operators.map)(_ref2 => {
    var _ref3 = _slicedToArray(_ref2, 2),
        draft = _ref3[0],
        published = _ref3[1];

    return {
      draft: draft.snapshot ? _objectSpread({
        title
      }, draft.snapshot) : null,
      isLoading: false,
      published: published.snapshot ? _objectSpread({
        title
      }, published.snapshot) : null
    };
  }), (0, _operators.startWith)({
    draft: null,
    isLoading: true,
    published: null
  }));
}