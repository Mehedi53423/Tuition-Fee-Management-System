"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PaneItem = PaneItem;

var _react = _interopRequireWildcard(require("react"));

var _icons = require("@sanity/icons");

var _types = require("@sanity/types");

var _ui = require("@sanity/ui");

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _preview = require("part:@sanity/base/preview");

var _components = require("@sanity/base/components");

var _hooks = require("@sanity/base/hooks");

var _getIconWithFallback = require("../../utils/getIconWithFallback");

var _MissingSchemaType = require("../MissingSchemaType");

var _paneRouter = require("../../contexts/paneRouter");

var _PaneItemPreview = require("./PaneItemPreview");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function PaneItem(props) {
  var icon = props.icon,
      id = props.id,
      _props$layout = props.layout,
      layout = _props$layout === void 0 ? 'default' : _props$layout,
      pressed = props.pressed,
      schemaType = props.schemaType,
      selected = props.selected,
      title = props.title,
      value = props.value;

  var _usePaneRouter = (0, _paneRouter.usePaneRouter)(),
      ChildLink = _usePaneRouter.ChildLink;

  var documentPresence = (0, _hooks.useDocumentPresence)(id);
  var hasSchemaType = Boolean(schemaType && schemaType.name && _schema.default.get(schemaType.name));
  var previewValue = (0, _react.useMemo)(() => ({
    title
  }), [title]);

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      clicked = _useState2[0],
      setClicked = _useState2[1];

  var preview = (0, _react.useMemo)(() => {
    if (value && (0, _types.isSanityDocument)(value)) {
      if (!schemaType || !hasSchemaType) {
        return /*#__PURE__*/_react.default.createElement(_MissingSchemaType.MissingSchemaType, {
          value: value
        });
      }

      return /*#__PURE__*/_react.default.createElement(_PaneItemPreview.PaneItemPreview, {
        icon: (0, _getIconWithFallback.getIconWithFallback)(icon, schemaType, _icons.DocumentIcon),
        layout: layout,
        schemaType: schemaType,
        value: value,
        presence: documentPresence
      });
    }

    return /*#__PURE__*/_react.default.createElement(_preview.SanityDefaultPreview, {
      status: /*#__PURE__*/_react.default.createElement(_ui.Text, {
        muted: true
      }, /*#__PURE__*/_react.default.createElement(_icons.ChevronRightIcon, null)),
      icon: (0, _getIconWithFallback.getIconWithFallback)(icon, schemaType, _icons.FolderIcon),
      layout: layout,
      value: previewValue
    });
  }, [hasSchemaType, icon, layout, previewValue, schemaType, value, documentPresence]);
  var LinkComponent = (0, _react.useMemo)(() =>
  /*#__PURE__*/
  // eslint-disable-next-line @typescript-eslint/no-shadow
  (0, _react.forwardRef)(function LinkComponent(linkProps, ref) {
    return /*#__PURE__*/_react.default.createElement(ChildLink, _extends({}, linkProps, {
      childId: id,
      ref: ref
    }));
  }), [ChildLink, id]);
  var handleClick = (0, _react.useCallback)(() => setClicked(true), []); // Reset `clicked` state when `selected` prop changes

  (0, _react.useEffect)(() => setClicked(false), [selected]);
  return (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(_components.PreviewCard, {
    __unstable_focusRing: true,
    as: LinkComponent,
    "data-as": "a",
    "data-ui": "PaneItem",
    padding: 2,
    radius: 2,
    onClick: handleClick,
    pressed: pressed,
    selected: selected || clicked,
    tone: "inherit"
  }, preview), [clicked, handleClick, LinkComponent, pressed, preview, selected]);
}