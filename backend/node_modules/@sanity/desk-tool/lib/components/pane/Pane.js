"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pane = void 0;

var _components = require("@sanity/base/components");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _constants = require("./constants");

var _PaneContext = require("./PaneContext");

var _PaneDivider = require("./PaneDivider");

var _usePaneLayout2 = require("./usePaneLayout");

var _excluded = ["children", "currentMinWidth", "currentMaxWidth", "flex", "id", "minWidth", "maxWidth", "selected"];

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var Root = (0, _styledComponents.default)(_ui.Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  outline: none;\n\n  // NOTE: This will render a border to the right side of each pane\n  // without taking up physical space.\n  box-shadow: 1px 0 0 var(--card-border-color);\n"])));
/**
 * @beta This API will change. DO NOT USE IN PRODUCTION.
 */
// eslint-disable-next-line complexity

var Pane = /*#__PURE__*/(0, _react.forwardRef)(function Pane(props, ref) {
  var _pane$flex, _pane$currentMinWidth, _pane$currentMaxWidth;

  var children = props.children,
      currentMinWidthProp = props.currentMinWidth,
      currentMaxWidthProp = props.currentMaxWidth,
      _props$flex = props.flex,
      flexProp = _props$flex === void 0 ? 1 : _props$flex,
      id = props.id,
      minWidthProp = props.minWidth,
      maxWidthProp = props.maxWidth,
      _props$selected = props.selected,
      selected = _props$selected === void 0 ? false : _props$selected,
      restProps = _objectWithoutProperties(props, _excluded);

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      rootElement = _useState2[0],
      setRootElement = _useState2[1];

  var _usePaneLayout = (0, _usePaneLayout2.usePaneLayout)(),
      collapse = _usePaneLayout.collapse,
      layoutCollapsed = _usePaneLayout.collapsed,
      expand = _usePaneLayout.expand,
      expandedElement = _usePaneLayout.expandedElement,
      mount = _usePaneLayout.mount,
      panes = _usePaneLayout.panes;

  var pane = panes.find(p => p.element === rootElement);
  var paneIndex = pane && panes.indexOf(pane);
  var nextPane = typeof paneIndex === 'number' ? panes[paneIndex + 1] : undefined;
  var isLast = paneIndex === panes.length - 1;
  var expanded = expandedElement === rootElement;
  var collapsed = layoutCollapsed ? false : (pane === null || pane === void 0 ? void 0 : pane.collapsed) || false;
  var nextCollapsed = (nextPane === null || nextPane === void 0 ? void 0 : nextPane.collapsed) || false;
  var forwardedRef = (0, _ui.useForwardedRef)(ref);
  var flex = (_pane$flex = pane === null || pane === void 0 ? void 0 : pane.flex) !== null && _pane$flex !== void 0 ? _pane$flex : flexProp;
  var currentMinWidth = (_pane$currentMinWidth = pane === null || pane === void 0 ? void 0 : pane.currentMinWidth) !== null && _pane$currentMinWidth !== void 0 ? _pane$currentMinWidth : currentMinWidthProp;
  var currentMaxWidth = (_pane$currentMaxWidth = pane === null || pane === void 0 ? void 0 : pane.currentMaxWidth) !== null && _pane$currentMaxWidth !== void 0 ? _pane$currentMaxWidth : currentMaxWidthProp;
  var setRef = (0, _react.useCallback)(refValue => {
    setRootElement(refValue);
    forwardedRef.current = refValue;
  }, [forwardedRef]);
  (0, _react.useEffect)(() => {
    if (!rootElement) return undefined;
    return mount(rootElement, {
      currentMinWidth: currentMinWidthProp,
      currentMaxWidth: currentMaxWidthProp,
      flex: flexProp,
      id,
      minWidth: minWidthProp,
      maxWidth: maxWidthProp
    });
  }, [currentMinWidthProp, currentMaxWidthProp, flexProp, id, minWidthProp, maxWidthProp, mount, rootElement]);
  var handleCollapse = (0, _react.useCallback)(() => {
    if (!rootElement) return;
    collapse(rootElement);
  }, [collapse, rootElement]);
  var handleExpand = (0, _react.useCallback)(() => {
    if (!rootElement) return;
    expand(rootElement);
  }, [expand, rootElement]);
  var contextValue = (0, _react.useMemo)(() => ({
    collapse: handleCollapse,
    collapsed: layoutCollapsed ? false : collapsed,
    expand: handleExpand,
    index: paneIndex,
    isLast,
    rootElement
  }), [collapsed, handleCollapse, handleExpand, isLast, layoutCollapsed, paneIndex, rootElement]);
  var minWidth = (0, _react.useMemo)(() => {
    if (layoutCollapsed) {
      return undefined;
    }

    if (collapsed) return _constants.PANE_COLLAPSED_WIDTH;

    if (currentMinWidth === 0) {
      return minWidthProp || _constants.PANE_DEFAULT_MIN_WIDTH;
    }

    if (isLast) {
      return minWidthProp || _constants.PANE_DEFAULT_MIN_WIDTH;
    }

    return currentMinWidth || minWidthProp || _constants.PANE_DEFAULT_MIN_WIDTH;
  }, [collapsed, currentMinWidth, isLast, layoutCollapsed, minWidthProp]);
  var maxWidth = (0, _react.useMemo)(() => {
    if (collapsed) return _constants.PANE_COLLAPSED_WIDTH;

    if (layoutCollapsed && isLast) {
      return undefined;
    }

    if (isLast) {
      if (maxWidthProp) {
        return currentMaxWidth !== null && currentMaxWidth !== void 0 ? currentMaxWidth : maxWidthProp;
      }

      return undefined;
    }

    return currentMaxWidth !== null && currentMaxWidth !== void 0 ? currentMaxWidth : maxWidthProp;
  }, [collapsed, currentMaxWidth, isLast, layoutCollapsed, maxWidthProp]);
  var hidden = layoutCollapsed && !isLast;
  var divider = (0, _react.useMemo)(() => !isLast && !layoutCollapsed && /*#__PURE__*/_react.default.createElement(_components.LegacyLayerProvider, {
    zOffset: "paneResizer"
  }, /*#__PURE__*/_react.default.createElement(_PaneDivider.PaneDivider, {
    disabled: collapsed || nextCollapsed,
    element: rootElement
  })), [collapsed, isLast, layoutCollapsed, nextCollapsed, rootElement]);
  var style = (0, _react.useMemo)(() => ({
    flex,
    minWidth,
    maxWidth: maxWidth === Infinity ? undefined : maxWidth
  }), [flex, minWidth, maxWidth]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_components.LegacyLayerProvider, {
    zOffset: "pane"
  }, /*#__PURE__*/_react.default.createElement(_PaneContext.PaneContext.Provider, {
    value: contextValue
  }, /*#__PURE__*/_react.default.createElement(Root, _extends({
    "data-testid": "pane",
    tone: "inherit",
    hidden: hidden,
    id: id,
    overflow: layoutCollapsed ? undefined : 'hidden'
  }, restProps, {
    "data-pane-collapsed": collapsed ? '' : undefined,
    "data-pane-index": paneIndex,
    "data-pane-selected": selected ? '' : undefined,
    ref: setRef,
    style: style
  }), _constants.PANE_DEBUG && /*#__PURE__*/_react.default.createElement(_ui.Card, {
    padding: 4,
    tone: expanded ? 'primary' : 'caution'
  }, /*#__PURE__*/_react.default.createElement(_ui.Code, {
    size: 1
  }, ["#".concat(paneIndex), "collapsed=".concat(collapsed), "currentMinWidth=".concat(currentMinWidth), "currentMaxWidth=".concat(currentMaxWidth), "flex=".concat(flex), "minWidth=".concat(minWidth), "maxWidth=".concat(maxWidth)].join('\n'))), /*#__PURE__*/_react.default.createElement(_ui.BoundaryElementProvider, {
    element: rootElement
  }, !hidden && /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    direction: "column",
    height: "fill"
  }, children))))), divider);
});
exports.Pane = Pane;