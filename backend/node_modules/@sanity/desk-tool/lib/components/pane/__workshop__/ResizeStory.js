"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ResizeStory;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _usePaneLayout2 = require("../usePaneLayout");

var _PaneDivider = require("../PaneDivider");

var _PaneLayoutContext = require("../PaneLayoutContext");

var _constants = require("../constants");

var _paneLayoutController = require("../paneLayoutController");

var _templateObject, _templateObject2;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var PaneLayoutRoot = (0, _styledComponents.default)(_ui.Flex)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  &[data-resizing] {\n    cursor: ew-resize;\n  }\n"])));

function ResizeStory() {
  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      rootElement = _useState2[0],
      setRootElement = _useState2[1];

  var controller = (0, _react.useMemo)(() => (0, _paneLayoutController.createPaneLayoutController)(), []);
  var collapsed = false;

  var _useState3 = (0, _react.useState)({
    expandedElement: null,
    panes: [],
    resizing: false
  }),
      _useState4 = _slicedToArray(_useState3, 2),
      state = _useState4[0],
      setState = _useState4[1];

  var paneLayout = (0, _react.useMemo)(() => ({
    collapse: controller.collapse,
    collapsed,
    expand: controller.expand,
    expandedElement: state.expandedElement,
    mount: controller.mount,
    panes: state.panes,
    resize: controller.resize,
    resizing: state.resizing
  }), [collapsed, controller, state.expandedElement, state.panes, state.resizing]);
  (0, _react.useEffect)(() => controller.subscribe(setState), [controller]);
  (0, _react.useEffect)(() => {
    if (!rootElement) return undefined;
    var ro = new ResizeObserver(entries => {
      controller.setRootWidth(entries[0].contentRect.width);
    });
    ro.observe(rootElement);
    return () => ro.disconnect();
  }, [controller, rootElement]);
  return /*#__PURE__*/_react.default.createElement(_PaneLayoutContext.PaneLayoutContext.Provider, {
    value: paneLayout
  }, /*#__PURE__*/_react.default.createElement(PaneLayoutRoot, {
    "data-resizing": state.resizing ? '' : undefined,
    height: "fill",
    ref: setRootElement
  }, /*#__PURE__*/_react.default.createElement(Pane, {
    currentMinWidth: undefined // currentMaxWidth={320}
    ,
    flex: 1,
    minWidth: 160,
    maxWidth: 320
  }), /*#__PURE__*/_react.default.createElement(Pane, {
    currentMinWidth: undefined // currentMaxWidth={320}
    ,
    flex: 1,
    minWidth: 160,
    maxWidth: 320
  }), /*#__PURE__*/_react.default.createElement(Pane, {
    currentMinWidth: undefined // currentMaxWidth={320}
    ,
    flex: 1,
    minWidth: 160,
    maxWidth: 320
  }), /*#__PURE__*/_react.default.createElement(Pane, {
    currentMinWidth: 320,
    currentMaxWidth: undefined,
    flex: 2,
    minWidth: 160,
    maxWidth: undefined
  })));
}

function Pane(props) {
  var _pane$flex, _pane$currentMinWidth, _pane$currentMaxWidth;

  var currentMinWidthProp = props.currentMinWidth,
      currentMaxWidthProp = props.currentMaxWidth,
      _props$flex = props.flex,
      flexProp = _props$flex === void 0 ? 1 : _props$flex,
      minWidthProp = props.minWidth,
      maxWidthProp = props.maxWidth;

  var _useState5 = (0, _react.useState)(null),
      _useState6 = _slicedToArray(_useState5, 2),
      rootElement = _useState6[0],
      setRootElement = _useState6[1];

  var _usePaneLayout = (0, _usePaneLayout2.usePaneLayout)(),
      collapse = _usePaneLayout.collapse,
      expand = _usePaneLayout.expand,
      expandedElement = _usePaneLayout.expandedElement,
      mount = _usePaneLayout.mount,
      panes = _usePaneLayout.panes,
      resizing = _usePaneLayout.resizing;

  var pane = panes.find(p => p.element === rootElement);
  var paneIndex = pane && panes.indexOf(pane);
  var nextPane = typeof paneIndex === 'number' ? panes[paneIndex + 1] : undefined;
  var isLast = !nextPane;
  var expanded = expandedElement === rootElement;
  var collapsed = (pane === null || pane === void 0 ? void 0 : pane.collapsed) || false;
  var nextCollapsed = (nextPane === null || nextPane === void 0 ? void 0 : nextPane.collapsed) || false;
  var flex = (_pane$flex = pane === null || pane === void 0 ? void 0 : pane.flex) !== null && _pane$flex !== void 0 ? _pane$flex : flexProp;
  var currentMinWidth = (_pane$currentMinWidth = pane === null || pane === void 0 ? void 0 : pane.currentMinWidth) !== null && _pane$currentMinWidth !== void 0 ? _pane$currentMinWidth : currentMinWidthProp;
  var currentMaxWidth = (_pane$currentMaxWidth = pane === null || pane === void 0 ? void 0 : pane.currentMaxWidth) !== null && _pane$currentMaxWidth !== void 0 ? _pane$currentMaxWidth : currentMaxWidthProp;
  (0, _react.useEffect)(() => {
    if (!rootElement) {
      return undefined;
    }

    return mount(rootElement, {
      currentMinWidth: currentMinWidthProp,
      currentMaxWidth: currentMaxWidthProp,
      flex: flexProp,
      id: String(paneIndex),
      minWidth: minWidthProp,
      maxWidth: maxWidthProp
    });
  }, [currentMinWidthProp, currentMaxWidthProp, flexProp, minWidthProp, maxWidthProp, mount, paneIndex, rootElement]);
  var minWidth = (0, _react.useMemo)(() => {
    if (collapsed) return _constants.PANE_COLLAPSED_WIDTH;

    if (currentMinWidth === 0) {
      return minWidthProp || _constants.PANE_DEFAULT_MIN_WIDTH;
    }

    return currentMinWidth || minWidthProp || _constants.PANE_DEFAULT_MIN_WIDTH;
  }, [collapsed, currentMinWidth, minWidthProp]);
  var maxWidth = (0, _react.useMemo)(() => {
    if (collapsed) return _constants.PANE_COLLAPSED_WIDTH;

    if (maxWidthProp !== undefined) {
      return currentMaxWidth !== null && currentMaxWidth !== void 0 ? currentMaxWidth : maxWidthProp;
    }

    return isLast ? undefined : currentMaxWidth;
  }, [collapsed, currentMaxWidth, isLast, maxWidthProp]);
  var handleCollapse = (0, _react.useCallback)(() => {
    if (!rootElement) return;
    collapse(rootElement);
  }, [collapse, rootElement]);
  var handleExpand = (0, _react.useCallback)(() => {
    if (!rootElement) return;
    expand(rootElement);
  }, [expand, rootElement]);
  return /*#__PURE__*/_react.default.createElement(PaneView, {
    collapsed: collapsed,
    currentMinWidth: currentMinWidth,
    currentMaxWidth: currentMaxWidth,
    expanded: expanded,
    flex: flex,
    index: paneIndex,
    isLast: isLast,
    minWidth: minWidth,
    maxWidth: maxWidth,
    nextCollapsed: nextCollapsed,
    onCollapse: handleCollapse,
    onExpand: handleExpand,
    resizing: resizing,
    rootElement: rootElement,
    setRootElement: setRootElement
  });
}

var PaneViewRoot = (0, _styledComponents.default)(_ui.Card)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  box-shadow: 0 0 0 1px var(--card-border-color) !important;\n\n  &[data-resizing] {\n    pointer-events: none;\n  }\n\n  & + & {\n    margin-left: 1px;\n  }\n"])));
var PaneView = /*#__PURE__*/(0, _react.memo)(function PaneView(props) {
  var collapsed = props.collapsed,
      currentMinWidth = props.currentMinWidth,
      currentMaxWidth = props.currentMaxWidth,
      expanded = props.expanded,
      flex = props.flex,
      index = props.index,
      isLast = props.isLast,
      minWidth = props.minWidth,
      maxWidth = props.maxWidth,
      nextCollapsed = props.nextCollapsed,
      onCollapse = props.onCollapse,
      onExpand = props.onExpand,
      resizing = props.resizing,
      rootElement = props.rootElement,
      setRootElement = props.setRootElement;
  var style = (0, _react.useMemo)(() => ({
    flex,
    minWidth,
    maxWidth: maxWidth === Infinity ? undefined : maxWidth
  }), [flex, minWidth, maxWidth]);
  var handleClick = (0, _react.useCallback)(() => {
    if (collapsed) onExpand();else onCollapse();
  }, [collapsed, onCollapse, onExpand]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(PaneViewRoot, {
    "data-as": "button",
    "data-resizing": resizing ? '' : undefined,
    id: "pane-".concat(index),
    onClick: handleClick,
    overflow: "hidden",
    ref: setRootElement,
    style: style,
    tone: expanded ? 'primary' : undefined
  }, !collapsed && /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Code, {
    size: 1
  }, ["#".concat(index), "collapsed=".concat(collapsed), "currentMinWidth=".concat(currentMinWidth), "currentMaxWidth=".concat(currentMaxWidth), "flex=".concat(flex), "minWidth=".concat(minWidth), "maxWidth=".concat(maxWidth)].join('\n')))), !isLast && /*#__PURE__*/_react.default.createElement(_PaneDivider.PaneDivider, {
    disabled: collapsed || nextCollapsed,
    element: rootElement
  }));
});