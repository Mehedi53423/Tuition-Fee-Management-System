"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentActions = DocumentActions;

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var MENU_BUTTON_POPOVER_PROPS = {
  constrainSize: true,
  portal: true
};

function DocumentActions() {
  var _useToast = (0, _ui.useToast)(),
      pushToast = _useToast.push;

  var publish = (0, _react.useCallback)(() => pushToast({
    status: 'success',
    title: 'Successfully published'
  }), [pushToast]);
  return /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    gap: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    flex: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    icon: _icons.PublishIcon,
    onClick: publish,
    text: "Publish",
    tone: "positive"
  })), /*#__PURE__*/_react.default.createElement(_ui.MenuButton, {
    button: /*#__PURE__*/_react.default.createElement(_ui.Button, {
      icon: _icons.ChevronDownIcon,
      mode: "ghost"
    }),
    id: "actions",
    menu: /*#__PURE__*/_react.default.createElement(_ui.Menu, null, /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
      text: "Discard changes"
    })),
    popover: MENU_BUTTON_POPOVER_PROPS
  }));
}