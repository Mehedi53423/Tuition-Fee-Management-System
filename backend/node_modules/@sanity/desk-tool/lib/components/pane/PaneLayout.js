"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PaneLayout = PaneLayout;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _PaneLayoutContext = require("./PaneLayoutContext");

var _PaneLayout = require("./PaneLayout.styles");

var _paneLayoutController = require("./paneLayoutController");

var _excluded = ["children", "minWidth", "onCollapse", "onExpand"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * @beta This API will change. DO NOT USE IN PRODUCTION.
 */
function PaneLayout(props) {
  var children = props.children,
      minWidth = props.minWidth,
      onCollapse = props.onCollapse,
      onExpand = props.onExpand,
      restProps = _objectWithoutProperties(props, _excluded);

  var controller = (0, _react.useMemo)(() => (0, _paneLayoutController.createPaneLayoutController)(), []);

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      rootElement = _useState2[0],
      setRootElement = _useState2[1];

  var rootRect = (0, _ui.useElementRect)(rootElement);
  var width = (rootRect === null || rootRect === void 0 ? void 0 : rootRect.width) || 0;
  var collapsed = width === undefined || !minWidth ? undefined : width < minWidth;

  var _useState3 = (0, _react.useState)({
    expandedElement: null,
    panes: [],
    resizing: false
  }),
      _useState4 = _slicedToArray(_useState3, 2),
      state = _useState4[0],
      setState = _useState4[1]; // Set root element


  (0, _react.useEffect)(() => controller.setRootElement(rootElement), [controller, rootElement]); // Set root size

  (0, _react.useEffect)(() => controller.setRootWidth(width), [controller, width]); // Subscribe to state changes

  (0, _react.useEffect)(() => controller.subscribe(setState), [controller]); // Call the `onCollapse` and `onExpand` callbacks as the `collapsed` boolean changes

  (0, _react.useEffect)(() => {
    if (collapsed === undefined) return;
    if (collapsed && onCollapse) onCollapse();
    if (!collapsed && onExpand) onExpand();
  }, [collapsed, onCollapse, onExpand]); // This is the context value that gives each pane the information they need

  var paneLayout = (0, _react.useMemo)(() => ({
    collapse: controller.collapse,
    collapsed,
    expand: controller.expand,
    expandedElement: state.expandedElement,
    mount: controller.mount,
    panes: state.panes,
    resize: controller.resize,
    resizing: state.resizing
  }), [collapsed, controller, state.expandedElement, state.panes, state.resizing]);
  return /*#__PURE__*/_react.default.createElement(_PaneLayoutContext.PaneLayoutContext.Provider, {
    value: paneLayout
  }, /*#__PURE__*/_react.default.createElement(_PaneLayout.Root, _extends({
    "data-ui": "PaneLayout"
  }, restProps, {
    "data-collapsed": collapsed ? '' : undefined // The `data-resizing` attribute is used to improve cursor behavior
    ,
    "data-resizing": state.resizing ? '' : undefined // The `data-mounted` attribute is used to fade in the layout and prevent flash of
    // non-collapsed panes
    ,
    "data-mounted": width ? '' : undefined,
    ref: setRootElement
  }), children));
}