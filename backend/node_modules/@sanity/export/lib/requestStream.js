"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var getIt = require('get-it');

var _require = require('get-it/middleware'),
    keepAlive = _require.keepAlive,
    promise = _require.promise;

var debug = require('./debug');

var request = getIt([keepAlive(), promise({
  onlyBody: true
})]);
var socketsWithTimeout = new WeakSet();
var CONNECTION_TIMEOUT = 15 * 1000; // 15 seconds

var READ_TIMEOUT = 3 * 60 * 1000; // 3 minutes

var MAX_RETRIES = 5;

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
/* eslint-disable no-await-in-loop, max-depth */


module.exports = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (options) {
    var error;

    for (var i = 0; i < MAX_RETRIES; i++) {
      try {
        var _ret = yield* function* () {
          var response = yield request(_objectSpread(_objectSpread({}, options), {}, {
            stream: true,
            maxRedirects: 0,
            timeout: {
              connect: CONNECTION_TIMEOUT,
              socket: READ_TIMEOUT
            }
          }));

          if (response.connection && typeof response.connection.setTimeout === 'function' && !socketsWithTimeout.has(response.connection)) {
            socketsWithTimeout.add(response.connection);
            response.connection.setTimeout(READ_TIMEOUT, () => {
              response.destroy(new Error("Read timeout: No data received on socket for ".concat(READ_TIMEOUT, " ms")));
            });
          }

          return {
            v: response
          };
        }();

        if (typeof _ret === "object") return _ret.v;
      } catch (err) {
        error = err;

        if (err.response && err.response.statusCode && err.response.statusCode < 500) {
          break;
        }

        debug('Error, retrying after 1500ms: %s', err.message);
        yield delay(1500);
      }
    }

    throw error;
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();