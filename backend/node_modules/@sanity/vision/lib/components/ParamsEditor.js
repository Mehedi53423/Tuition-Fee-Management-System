"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debounce2 = _interopRequireDefault(require("lodash/debounce"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _isPlainObject = _interopRequireDefault(require("../util/isPlainObject"));

var _tryParseParams = _interopRequireDefault(require("../util/tryParseParams"));

var _ParamsEditor = require("./ParamsEditor.styled");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable @typescript-eslint/no-var-requires */

/* eslint-disable import/no-unassigned-import */
var ENTER_KEY = 13;

class ParamsEditor extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      valid: true
    };
    this.handleChange = this.handleChange.bind(this);
    this.handleKeyUp = this.handleKeyUp.bind(this);
    this.handleThrottledChange = (0, _debounce2.default)(this.handleChange, 1000 / 3);
    this.handleThrottledChange = this.handleThrottledChange.bind(this);
  }

  componentDidMount() {
    // Check if value is valid on load
    var params = (0, _tryParseParams.default)(this.props.value);
    var validationError = params instanceof Error ? params.message : null;
    var valid = (0, _isPlainObject.default)(params);
    this.setState({
      valid
    });
    this.props.onChange({
      parsed: params,
      raw: this.props.value,
      valid,
      validationError
    });
  }

  handleKeyUp(evt) {
    if ((evt.ctrlKey || evt.metaKey) && evt.which === ENTER_KEY) {
      this.props.onExecute();
    }
  }

  handleChange(editor, metadata, value) {
    var params = (0, _tryParseParams.default)(value);
    var valid = (0, _isPlainObject.default)(params);
    var validationError = params instanceof Error ? params.message : null;
    this.setState({
      valid
    });
    this.props.onChange({
      parsed: params,
      raw: value,
      valid,
      validationError
    });
  }

  render() {
    var valid = this.state.valid;
    var isNotValid = !valid;
    var _this$props = this.props,
        className = _this$props.className,
        classNameInvalid = _this$props.classNameInvalid;
    var options = {
      lineNumbers: true,
      tabSize: 2,
      mode: {
        name: 'javascript',
        json: true
      },
      autoCloseBrackets: true,
      extraKeys: {
        Tab: false
      }
    };
    return /*#__PURE__*/_react.default.createElement(_ParamsEditor.ReactCodeMirror, {
      $isInvalid: isNotValid,
      className: (0, _classnames.default)(className, {
        [classNameInvalid]: isNotValid
      }),
      value: this.props.value,
      onChange: this.handleThrottledChange,
      options: options,
      autoCursor: false,
      autoScroll: true
    });
  }

}

ParamsEditor.propTypes = {
  className: _propTypes.default.string,
  classNameInvalid: _propTypes.default.string,
  onExecute: _propTypes.default.func.isRequired,
  onChange: _propTypes.default.func.isRequired,
  value: _propTypes.default.string
};
ParamsEditor.defaultProps = {
  value: '{\n  \n}',
  className: 'vision_params-editor',
  classNameInvalid: 'vision_params-editor-invalid'
};
var _default = ParamsEditor;
exports.default = _default;