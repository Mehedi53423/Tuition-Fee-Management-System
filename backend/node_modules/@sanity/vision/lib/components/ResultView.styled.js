"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactJsonViewContainer = void 0;

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _ui = require("@sanity/ui");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var ReactJsonViewContainer = _styledComponents.default.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  padding-bottom: ", ";\n\n  .react-json-view {\n    font-family: ", " !important;\n    font-size: ", " !important;\n    line-height: inherit;\n    // This aligns the top with the CodeMirror lines in the QueryEditor\n    padding: 4px 0;\n  }\n"])), _ref => {
  var theme = _ref.theme;
  return (0, _ui.rem)(theme.sanity.space[3] * 2 + theme.sanity.fonts.text.sizes[2].lineHeight - theme.sanity.fonts.text.sizes[2].ascenderHeight - theme.sanity.fonts.text.sizes[2].descenderHeight);
}, _ref2 => {
  var theme = _ref2.theme;
  return theme.sanity.fonts.code.family;
}, _ref3 => {
  var theme = _ref3.theme;
  return (0, _ui.rem)(theme.sanity.fonts.code.sizes[1].fontSize);
});

exports.ReactJsonViewContainer = ReactJsonViewContainer;