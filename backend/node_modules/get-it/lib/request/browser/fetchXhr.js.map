{"version":3,"sources":["../../../src/request/browser/fetchXhr.js"],"names":["FetchXhr","readyState","prototype","open","method","url","_method","_url","_resHeaders","onreadystatechange","abort","_controller","getAllResponseHeaders","setRequestHeader","key","value","_headers","send","body","ctrl","AbortController","textBody","responseType","options","headers","signal","window","credentials","withCredentials","fetch","then","res","forEach","status","statusText","text","arrayBuffer","responseText","resBody","response","catch","err","name","onabort","onerror","module","exports"],"mappings":";;AAAA;;;AAGA,SAASA,QAAT,GAAoB;AAClB,OAAKC,UAAL,GAAkB,CAAlB,CADkB,CACE;AACrB;AACDD,SAASE,SAAT,CAAmBC,IAAnB,GAA0B,UAASC,MAAT,EAAiBC,GAAjB,EAAsB;AAC9C,OAAKC,OAAL,GAAeF,MAAf;AACA,OAAKG,IAAL,GAAYF,GAAZ;AACA,OAAKG,WAAL,GAAmB,EAAnB;AACA,OAAKP,UAAL,GAAkB,CAAlB,CAJ8C,CAI1B;AACpB,OAAKQ,kBAAL;AACD,CAND;AAOAT,SAASE,SAAT,CAAmBQ,KAAnB,GAA2B,YAAW;AACpC,MAAI,KAAKC,WAAT,EAAsB;AACpB,SAAKA,WAAL,CAAiBD,KAAjB;AACD;AACF,CAJD;AAKAV,SAASE,SAAT,CAAmBU,qBAAnB,GAA2C,YAAW;AACpD,SAAO,KAAKJ,WAAZ;AACD,CAFD;AAGAR,SAASE,SAAT,CAAmBW,gBAAnB,GAAsC,UAASC,GAAT,EAAcC,KAAd,EAAqB;AACzD,OAAKC,QAAL,GAAgB,KAAKA,QAAL,IAAiB,EAAjC;AACA,OAAKA,QAAL,CAAcF,GAAd,IAAqBC,KAArB;AACD,CAHD;AAIAf,SAASE,SAAT,CAAmBe,IAAnB,GAA0B,UAASC,IAAT,EAAe;AAAA;;AACvC;AACA,MAAMC,OAAQ,KAAKR,WAAL,GAAmB,OAAOS,eAAP,KAA2B,UAA3B,IAAyC,IAAIA,eAAJ,EAA1E;AACA,MAAMC,WAAW,KAAKC,YAAL,KAAsB,aAAvC;AACA,MAAMC,UAAU;AACdnB,YAAQ,KAAKE,OADC;AAEdkB,aAAS,KAAKR,QAFA;AAGdS,YAAQN,QAAQA,KAAKM,MAHP;AAIdP;;AAGF;AACA;AACA;AATgB,GAAhB,CAUA,IAAI,OAAOQ,MAAP,KAAkB,WAAtB,EAAmC;AACjCH,YAAQI,WAAR,GAAsB,KAAKC,eAAL,GAAuB,SAAvB,GAAmC,MAAzD;AACD;;AAEDC,QAAM,KAAKtB,IAAX,EAAiBgB,OAAjB,EACGO,IADH,CACQ,eAAO;AACXC,QAAIP,OAAJ,CAAYQ,OAAZ,CAAoB,UAACjB,KAAD,EAAQD,GAAR,EAAgB;AAClC,YAAKN,WAAL,IAAuBM,GAAvB,UAA+BC,KAA/B;AACD,KAFD;AAGA,UAAKkB,MAAL,GAAcF,IAAIE,MAAlB;AACA,UAAKC,UAAL,GAAkBH,IAAIG,UAAtB;AACA,UAAKjC,UAAL,GAAkB,CAAlB,CANW,CAMS;AACpB,WAAOoB,WAAWU,IAAII,IAAJ,EAAX,GAAwBJ,IAAIK,WAAJ,EAA/B;AACD,GATH,EAUGN,IAVH,CAUQ,mBAAW;AACf,QAAIT,QAAJ,EAAc;AACZ,YAAKgB,YAAL,GAAoBC,OAApB;AACD,KAFD,MAEO;AACL,YAAKC,QAAL,GAAgBD,OAAhB;AACD;AACD,UAAKrC,UAAL,GAAkB,CAAlB,CANe,CAMK;AACpB,UAAKQ,kBAAL;AACD,GAlBH,EAmBG+B,KAnBH,CAmBS,eAAO;AACZ,QAAIC,IAAIC,IAAJ,KAAa,YAAjB,EAA+B;AAC7B,YAAKC,OAAL;AACA;AACD;;AAED,UAAKC,OAAL,CAAaH,GAAb;AACD,GA1BH;AA2BD,CA7CD;;AA+CAI,OAAOC,OAAP,GAAiB9C,QAAjB","file":"fetchXhr.js","sourcesContent":["/**\n * Mimicks the XMLHttpRequest API with only the parts needed for get-it's XHR adapter\n */\nfunction FetchXhr() {\n  this.readyState = 0 // Unsent\n}\nFetchXhr.prototype.open = function(method, url) {\n  this._method = method\n  this._url = url\n  this._resHeaders = ''\n  this.readyState = 1 // Open\n  this.onreadystatechange()\n}\nFetchXhr.prototype.abort = function() {\n  if (this._controller) {\n    this._controller.abort()\n  }\n}\nFetchXhr.prototype.getAllResponseHeaders = function() {\n  return this._resHeaders\n}\nFetchXhr.prototype.setRequestHeader = function(key, value) {\n  this._headers = this._headers || {}\n  this._headers[key] = value\n}\nFetchXhr.prototype.send = function(body) {\n  // eslint-disable-next-line no-multi-assign\n  const ctrl = (this._controller = typeof AbortController === 'function' && new AbortController())\n  const textBody = this.responseType !== 'arraybuffer'\n  const options = {\n    method: this._method,\n    headers: this._headers,\n    signal: ctrl && ctrl.signal,\n    body\n  }\n\n  // Some environments (like CloudFlare workers) don't support credentials in\n  // RequestInitDict, and there doesn't seem to be any easy way to check for it,\n  // so for now let's just make do with a window check :/\n  if (typeof window !== 'undefined') {\n    options.credentials = this.withCredentials ? 'include' : 'omit'\n  }\n\n  fetch(this._url, options)\n    .then(res => {\n      res.headers.forEach((value, key) => {\n        this._resHeaders += `${key}: ${value}\\r\\n`\n      })\n      this.status = res.status\n      this.statusText = res.statusText\n      this.readyState = 3 // Loading\n      return textBody ? res.text() : res.arrayBuffer()\n    })\n    .then(resBody => {\n      if (textBody) {\n        this.responseText = resBody\n      } else {\n        this.response = resBody\n      }\n      this.readyState = 4 // Done\n      this.onreadystatechange()\n    })\n    .catch(err => {\n      if (err.name === 'AbortError') {\n        this.onabort()\n        return\n      }\n\n      this.onerror(err)\n    })\n}\n\nmodule.exports = FetchXhr\n"]}