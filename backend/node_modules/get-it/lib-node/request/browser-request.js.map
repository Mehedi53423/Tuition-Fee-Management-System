{"version":3,"sources":["../../src/request/browser-request.js"],"names":["sameOrigin","require","parseHeaders","FetchXhr","noop","win","window","undefined","adapter","XmlHttpRequest","XMLHttpRequest","hasXhr2","XDR","XDomainRequest","CrossDomainRequest","module","exports","context","callback","opts","options","applyMiddleware","timers","cors","location","href","url","injectedResponse","cbTimer","setTimeout","cancel","clearTimeout","abort","xhr","isXdr","headers","delays","timeout","aborted","loaded","timedOut","onerror","onError","ontimeout","onabort","onprogress","loadEvent","resetTimers","readyState","status","onLoad","open","method","withCredentials","setRequestHeader","key","hasOwnProperty","Error","rawBody","responseType","request","send","body","connect","timeoutRequest","code","error","channels","publish","stopTimers","socket","err","isNetworkError","reduceResponse","statusCode","statusMessage","statusText","response","responseText","getAllResponseHeaders"],"mappings":"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","file":"browser-request.js","sourcesContent":["/* eslint max-depth: [\"error\", 4] */\nconst sameOrigin = require('same-origin')\nconst parseHeaders = require('parse-headers')\nconst FetchXhr = require('./browser/fetchXhr')\n\nconst noop = function() {\n  /* intentional noop */\n}\n\nconst win = typeof window === 'undefined' ? undefined : window\nconst adapter = win ? 'xhr' : 'fetch'\n\nlet XmlHttpRequest = typeof XMLHttpRequest === 'function' ? XMLHttpRequest : noop\nconst hasXhr2 = 'withCredentials' in new XmlHttpRequest()\nconst XDR = typeof XDomainRequest === 'undefined' ? undefined : XDomainRequest\nlet CrossDomainRequest = hasXhr2 ? XmlHttpRequest : XDR\n\n// Fallback to fetch-based XHR polyfill for non-browser environments like Workers\nif (!win) {\n  XmlHttpRequest = FetchXhr\n  CrossDomainRequest = FetchXhr\n}\n\nmodule.exports = (context, callback) => {\n  const opts = context.options\n  const options = context.applyMiddleware('finalizeOptions', opts)\n  const timers = {}\n\n  // Deep-checking window.location because of react native, where `location` doesn't exist\n  const cors = win && win.location && !sameOrigin(win.location.href, options.url)\n\n  // Allow middleware to inject a response, for instance in the case of caching or mocking\n  const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n    adapter,\n    context\n  })\n\n  // If middleware injected a response, treat it as we normally would and return it\n  // Do note that the injected response has to be reduced to a cross-environment friendly response\n  if (injectedResponse) {\n    const cbTimer = setTimeout(callback, 0, null, injectedResponse)\n    const cancel = () => clearTimeout(cbTimer)\n    return {abort: cancel}\n  }\n\n  // We'll want to null out the request on success/failure\n  let xhr = cors ? new CrossDomainRequest() : new XmlHttpRequest()\n\n  const isXdr = win && win.XDomainRequest && xhr instanceof win.XDomainRequest\n  const headers = options.headers\n  const delays = options.timeout\n\n  // Request state\n  let aborted = false\n  let loaded = false\n  let timedOut = false\n\n  // Apply event handlers\n  xhr.onerror = onError\n  xhr.ontimeout = onError\n  xhr.onabort = () => {\n    aborted = true\n  }\n\n  // IE9 must have onprogress be set to a unique function\n  xhr.onprogress = () => {\n    /* intentional noop */\n  }\n\n  const loadEvent = isXdr ? 'onload' : 'onreadystatechange'\n  xhr[loadEvent] = () => {\n    // Prevent request from timing out\n    resetTimers()\n\n    if (aborted || (xhr.readyState !== 4 && !isXdr)) {\n      return\n    }\n\n    // Will be handled by onError\n    if (xhr.status === 0) {\n      return\n    }\n\n    onLoad()\n  }\n\n  // @todo two last options to open() is username/password\n  xhr.open(\n    options.method,\n    options.url,\n    true // Always async\n  )\n\n  // Some options need to be applied after open\n  xhr.withCredentials = !!options.withCredentials\n\n  // Set headers\n  if (headers && xhr.setRequestHeader) {\n    for (const key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key])\n      }\n    }\n  } else if (headers && isXdr) {\n    throw new Error('Headers cannot be set on an XDomainRequest object')\n  }\n\n  if (options.rawBody) {\n    xhr.responseType = 'arraybuffer'\n  }\n\n  // Let middleware know we're about to do a request\n  context.applyMiddleware('onRequest', {options, adapter, request: xhr, context})\n\n  xhr.send(options.body || null)\n\n  // Figure out which timeouts to use (if any)\n  if (delays) {\n    timers.connect = setTimeout(() => timeoutRequest('ETIMEDOUT'), delays.connect)\n  }\n\n  return {abort}\n\n  function abort() {\n    aborted = true\n\n    if (xhr) {\n      xhr.abort()\n    }\n  }\n\n  function timeoutRequest(code) {\n    timedOut = true\n    xhr.abort()\n    const error = new Error(\n      code === 'ESOCKETTIMEDOUT'\n        ? `Socket timed out on request to ${options.url}`\n        : `Connection timed out on request to ${options.url}`\n    )\n    error.code = code\n    context.channels.error.publish(error)\n  }\n\n  function resetTimers() {\n    if (!delays) {\n      return\n    }\n\n    stopTimers()\n    timers.socket = setTimeout(() => timeoutRequest('ESOCKETTIMEDOUT'), delays.socket)\n  }\n\n  function stopTimers() {\n    // Only clear the connect timeout if we've got a connection\n    if (aborted || (xhr.readyState >= 2 && timers.connect)) {\n      clearTimeout(timers.connect)\n    }\n\n    if (timers.socket) {\n      clearTimeout(timers.socket)\n    }\n  }\n\n  function onError(error) {\n    if (loaded) {\n      return\n    }\n\n    // Clean up\n    stopTimers()\n    loaded = true\n    xhr = null\n\n    // Annoyingly, details are extremely scarce and hidden from us.\n    // We only really know that it is a network error\n    const err = error || new Error(`Network error while attempting to reach ${options.url}`)\n    err.isNetworkError = true\n    err.request = options\n    callback(err)\n  }\n\n  function reduceResponse() {\n    let statusCode = xhr.status\n    let statusMessage = xhr.statusText\n\n    if (isXdr && statusCode === undefined) {\n      // IE8 CORS GET successful response doesn't have a status field, but body is fine\n      statusCode = 200\n    } else if (statusCode > 12000 && statusCode < 12156) {\n      // Yet another IE quirk where it emits weird status codes on network errors\n      // https://support.microsoft.com/en-us/kb/193625\n      return onError()\n    } else {\n      // Another IE bug where HTTP 204 somehow ends up as 1223\n      statusCode = xhr.status === 1223 ? 204 : xhr.status\n      statusMessage = xhr.status === 1223 ? 'No Content' : statusMessage\n    }\n\n    return {\n      body: xhr.response || xhr.responseText,\n      url: options.url,\n      method: options.method,\n      headers: isXdr ? {} : parseHeaders(xhr.getAllResponseHeaders()),\n      statusCode: statusCode,\n      statusMessage: statusMessage\n    }\n  }\n\n  function onLoad() {\n    if (aborted || loaded || timedOut) {\n      return\n    }\n\n    if (xhr.status === 0) {\n      onError(new Error('Unknown XHR error'))\n      return\n    }\n\n    // Prevent being called twice\n    stopTimers()\n    loaded = true\n    callback(null, reduceResponse())\n  }\n}\n"]}