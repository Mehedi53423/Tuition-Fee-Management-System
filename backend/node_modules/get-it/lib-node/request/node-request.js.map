{"version":3,"sources":["../../src/request/node-request.js"],"names":["qs","require","url","http","https","concat","follow","timedOut","isStream","toStream","objectAssign","progressStream","decompressResponse","getProxyOptions","rewriteUriForProxy","tunneling","adapter","reduceResponse","res","reqUrl","method","body","headers","statusCode","statusMessage","module","exports","context","cb","options","uri","parse","bodyType","Buffer","isBuffer","Error","lengthHeader","bodySize","byteLength","aborted","callback","err","channels","abort","subscribe","reqOpts","lowerCaseHeaders","maxRedirects","proxy","tunnel","shouldEnable","injectedResponse","applyMiddleware","undefined","cbTimer","setImmediate","clearImmediate","applyAgent","auth","username","password","split","map","item","unescape","from","authBase64","toString","transport","getRequestTransport","debug","agent","host","port","finalOptions","request","response","tryDecompress","resStream","responseUrl","stream","data","rawBody","reduced","timeout","once","getProgressStream","bodyStream","progress","pipe","end","bodyIsStream","length","time","isHttpsRequest","protocol","transports","isHttpsProxy","test","Object","keys","reduce","acc","header","toLowerCase"],"mappings":"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","file":"node-request.js","sourcesContent":["/* eslint-disable no-process-env */\nconst qs = require('querystring')\nconst url = require('url')\nconst http = require('http')\nconst https = require('https')\nconst concat = require('simple-concat')\nconst follow = require('follow-redirects')\nconst timedOut = require('@sanity/timed-out')\nconst isStream = require('is-stream')\nconst toStream = require('into-stream')\nconst objectAssign = require('object-assign')\nconst progressStream = require('progress-stream')\nconst decompressResponse = require('decompress-response')\nconst {getProxyOptions, rewriteUriForProxy} = require('./node/proxy')\nconst tunneling = require('./node/tunnel')\n\nconst adapter = 'node'\n\n// Reduce a fully fledged node-style response object to\n// something that works in both browser and node environment\nconst reduceResponse = (res, reqUrl, method, body) => ({\n  body,\n  url: reqUrl,\n  method: method,\n  headers: res.headers,\n  statusCode: res.statusCode,\n  statusMessage: res.statusMessage\n})\n\nmodule.exports = (context, cb) => {\n  const options = context.options\n  const uri = objectAssign({}, url.parse(options.url))\n  const bodyType = isStream(options.body) ? 'stream' : typeof options.body\n\n  if (\n    bodyType !== 'undefined' &&\n    bodyType !== 'stream' &&\n    bodyType !== 'string' &&\n    !Buffer.isBuffer(options.body)\n  ) {\n    throw new Error(`Request body must be a string, buffer or stream, got ${bodyType}`)\n  }\n\n  const lengthHeader = {}\n  if (options.bodySize) {\n    lengthHeader['content-length'] = options.bodySize\n  } else if (options.body && bodyType !== 'stream') {\n    lengthHeader['content-length'] = Buffer.byteLength(options.body)\n  }\n\n  // Make sure callback is not called in the event of a cancellation\n  let aborted = false\n  const callback = (err, res) => !aborted && cb(err, res)\n  context.channels.abort.subscribe(() => {\n    aborted = true\n  })\n\n  // Create a reduced subset of options meant for the http.request() method\n  let reqOpts = objectAssign({}, uri, {\n    method: options.method,\n    headers: objectAssign({}, lowerCaseHeaders(options.headers), lengthHeader),\n    maxRedirects: options.maxRedirects\n  })\n\n  // Figure out proxying/tunnel options\n  const proxy = getProxyOptions(options)\n  const tunnel = proxy && tunneling.shouldEnable(options)\n\n  // Allow middleware to inject a response, for instance in the case of caching or mocking\n  const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n    adapter,\n    context\n  })\n\n  // If middleware injected a response, treat it as we normally would and return it\n  // Do note that the injected response has to be reduced to a cross-environment friendly response\n  if (injectedResponse) {\n    const cbTimer = setImmediate(callback, null, injectedResponse)\n    const abort = () => clearImmediate(cbTimer)\n    return {abort}\n  }\n\n  // We're using the follow-redirects module to transparently follow redirects\n  if (options.maxRedirects !== 0) {\n    reqOpts.maxRedirects = options.maxRedirects || 5\n  }\n\n  // Apply currect options for proxy tunneling, if enabled\n  if (proxy && tunnel) {\n    reqOpts = tunneling.applyAgent(reqOpts, proxy)\n  } else if (proxy && !tunnel) {\n    reqOpts = rewriteUriForProxy(reqOpts, uri, proxy)\n  }\n\n  // Handle proxy authorization if present\n  if (!tunnel && proxy && proxy.auth && !reqOpts.headers['proxy-authorization']) {\n    const [username, password] = proxy.auth.username\n      ? [proxy.auth.username, proxy.auth.password]\n      : proxy.auth.split(':').map(item => qs.unescape(item))\n\n    const auth = Buffer.from(`${username}:${password}`, 'utf8')\n    const authBase64 = auth.toString('base64')\n    reqOpts.headers['proxy-authorization'] = `Basic ${authBase64}`\n  }\n\n  // Figure out transport (http/https, forwarding/non-forwarding agent)\n  const transport = getRequestTransport(reqOpts, proxy, tunnel)\n  if (typeof options.debug === 'function' && proxy) {\n    options.debug(\n      'Proxying using %s',\n      reqOpts.agent ? 'tunnel agent' : `${reqOpts.host}:${reqOpts.port}`\n    )\n  }\n\n  const finalOptions = context.applyMiddleware('finalizeOptions', reqOpts)\n  const request = transport.request(finalOptions, response => {\n    // See if we should try to decompress the response\n    const tryDecompress = reqOpts.method !== 'HEAD'\n    const res = tryDecompress ? decompressResponse(response) : response\n\n    const resStream = context.applyMiddleware('onHeaders', res, {\n      headers: response.headers,\n      adapter,\n      context\n    })\n\n    // On redirects, `responseUrl` is set\n    const reqUrl = response.responseUrl || options.url\n\n    if (options.stream) {\n      callback(null, reduceResponse(res, reqUrl, reqOpts.method, resStream))\n      return\n    }\n\n    // Concatenate the response body, then parse the response with middlewares\n    concat(resStream, (err, data) => {\n      if (err) {\n        return callback(err)\n      }\n\n      const body = options.rawBody ? data : data.toString()\n      const reduced = reduceResponse(res, reqUrl, reqOpts.method, body)\n      return callback(null, reduced)\n    })\n  })\n\n  if (options.timeout) {\n    timedOut(request, options.timeout)\n  }\n\n  request.once('error', callback)\n\n  // Cheating a bit here; since we're not concerned about the \"bundle size\" in node,\n  // and modifying the body stream would be sorta tricky, we're just always going\n  // to put a progress stream in the middle here. Note that\n  const {bodyStream, progress} = getProgressStream(options)\n\n  // Let middleware know we're about to do a request\n  context.applyMiddleware('onRequest', {options, adapter, request, context, progress})\n\n  if (bodyStream) {\n    bodyStream.pipe(request)\n  } else {\n    request.end(options.body)\n  }\n\n  return {abort: () => request.abort()}\n}\n\nfunction getProgressStream(options) {\n  if (!options.body) {\n    return {}\n  }\n\n  const bodyIsStream = isStream(options.body)\n  const length = options.bodySize || (bodyIsStream ? null : Buffer.byteLength(options.body))\n  if (!length) {\n    return bodyIsStream ? {bodyStream: options.body} : {}\n  }\n\n  const progress = progressStream({time: 16, length})\n  const bodyStream = bodyIsStream ? options.body : toStream(options.body)\n  return {bodyStream: bodyStream.pipe(progress), progress}\n}\n\nfunction getRequestTransport(reqOpts, proxy, tunnel) {\n  const isHttpsRequest = reqOpts.protocol === 'https:'\n  const transports =\n    reqOpts.maxRedirects === 0\n      ? {http: http, https: https}\n      : {http: follow.http, https: follow.https}\n\n  if (!proxy || tunnel) {\n    return isHttpsRequest ? transports.https : transports.http\n  }\n\n  // Assume the proxy is an HTTPS proxy if port is 443, or if there is a\n  // `protocol` option set that starts with https\n  let isHttpsProxy = proxy.port === 443\n  if (proxy.protocol) {\n    isHttpsProxy = /^https:?/.test(proxy.protocol)\n  }\n\n  return isHttpsProxy ? transports.https : transports.http\n}\n\nfunction lowerCaseHeaders(headers) {\n  return Object.keys(headers || {}).reduce((acc, header) => {\n    acc[header.toLowerCase()] = headers[header]\n    return acc\n  }, {})\n}\n"]}